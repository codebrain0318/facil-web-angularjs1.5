(function () {

  'use strict';
  agGrid.initialiseAgGridWithAngular1(angular);
  angular.module('foneClub', [

    /* public modules */
    'ionic',
    'firebase',
    'ngCordova',
    'ngMask',
    'LocalStorageModule',
    'ui.bootstrap',
    'ngDialog',
    'ui.router',
    'ui.toggle',
    'autoCompleteModule',
    'smart-table',
    'g1b.datetime-inputs',
    'ngclipboard',
    'ngAnimate',
    'vAccordion',
    'ngTable',
    'kendo.directives',
    'agGrid',
    'moment-picker',
    'ngQuill',
    'ngSanitize',
  ]);

  angular.module('foneClub').controller('globalCtrl', globalCtrl);

  globalCtrl.$inject = ['$interval', 'DataFactory', 'FoneclubeService', '$location'];

  function globalCtrl($interval, DataFactory, FoneclubeService, $location) {
    var vm = this;
    vm.data = DataFactory;

    function init() {
      // FoneclubeService.getCustomers().then(function (result) {
      //     vm.data.customers = result.map(function (user) {
      //         user.Phones = user.Phones.map(function (phone) {
      //             phone.phoneFull = phone.DDD.concat(phone.Number);
      //             return phone;
      //         })
      //         return user;
      //     })
      //     console.log('getCustomers')
      //     console.log(result)
      //     //post realizado com sucesso
      // })
      //     .catch(function (error) {
      //         console.log('catch error');
      //         console.log(error);
      //         console.log(error.statusText); // mensagem de erro para tela, caso precise
      //     });
    }

    //init();

    // $interval(function () {
    //     FoneclubeService.getCustomers().then(function (result) {
    //         vm.data.customersCache = result.map(function (user) {
    //             user.Phones = user.Phones.map(function (phone) {
    //                 phone.phoneFull = phone.DDD.concat(phone.Number);
    //                 return phone;
    //             })
    //             return user;
    //         })
    //         if ($location.$$path !== '/tab/customers') {
    //             vm.data.customers = angular.copy(vm.data.customersCache);
    //         }
    //         console.log('getCustomers')
    //         console.log(result)
    //         //post realizado com sucesso
    //     })
    //         .catch(function (error) {
    //             console.log('catch error');
    //             console.log(error);
    //             console.log(error.statusText); // mensagem de erro para tela, caso precise
    //         });
    // }, 300000);
  }

})();






(function () {

  'use strict';

  angular.module('foneClub')
    .config(masterConfiguration);

  function masterConfiguration($urlRouterProvider,$ionicConfigProvider,$provide, $stateProvider, $locationProvider){

      configRouteProvider($ionicConfigProvider, $locationProvider)

      var rota = window.location.href;
      // debugger

      $stateProvider.state('master', {
        url: '/',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('login', {
        url: '/login',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('resumocobranca', {
        url: "/resumocobranca/:personId/:chargeId",
        templateUrl: 'modules/charge-summary/charge-summary.html',
        controller: 'ChargeSummaryController',
        params: { data: null }  
      })
      // .state('shopifyorder', {
      //   url: "/shopifyorder/:orderId",
      //   templateUrl: 'modules/shopify/shopifyorder.html',
      //   controller: 'ShopifyOrderController',
      //   params: { data: null }  
      // })
      .state('tabs', {
        url: "/tab",
        abstract: true,
        templateUrl: "modules/menu-tabs/menu-tabs.html",
        controller:"MenuController as vm"
      })
      .state('tabs.checkout-view', {
        url: "/checkout-view",
        views: {
          'menu-tab': {
            templateUrl: "modules/checkout/checkout.html",
            controller: 'CheckoutController as vm'
          }
        }
      })
      .state('tabs.home', {
        url: "/home",
        views: {
          'menu-tab': {
            templateUrl: "modules/home/home.html",
            controller: 'HomeController as vm'
          }
        }
      })
      .state('tabs.cadastro', {
        url: "/cadastro",
        views: {
          'menu-tab': {
            templateUrl: "modules/cadastro/cadastro.html",
            controller: 'CadastroController as vm'
          }
        }
      })
      .state('tabs.list-customer', {
        url: "/list-customer",
        views: {
          'menu-tab': {
            templateUrl: "modules/lista-customer/lista-customer.html",
            controller: 'CustomerListController as vm'
          }
        }
      })
      .state('tabs.customers', {
        cache: false,
        url: "/customers",
        params : {previous: rota},
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/customers.html",
            controller: 'CustomersController as vm'
          }
        }
      })
      // .state('tabs.status-charging', {
      //   url: "/status-charging",
      //   views: {
      //     'menu-tab': {
      //       templateUrl: "modules/status-charging/status-charging.html",
      //       controller: 'StatusChargingController as vm' 
      //     }
      //   }
      // })
      .state('tabs.customers-new', {
        url: "/customers-new",
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/new/customers-new.html",
            controller: 'CustomersControllerNew as vm'
          }
        }
      })
      .state('tabs.customers-new2', {
        url: "/customers-new2",
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/new2/customers-new2.html",
            controller: 'CustomersControllerNew2 as vm'
          }
        }
      })
      .state('tabs.edicao', {
        url: "/edicao", 
        views: {      
          'menu-tab': {
            templateUrl: "modules/customers/edicao/edicao.html",
            controller: 'EdicaoController as vm'
          }
        },
        params: {data: null}
      })
      .state('tabs.ordemservico', {
        url: "/ordemservico",       
        templateUrl: "modules/customers/ordem-servico/ordemservico.html",
        controller: 'OrdemServico as vm',
        params: { data: null }      
      })
      .state('tabs.mass-charging', {
        url: "/mass-charging",
        views: {
          'menu-tab': {
            templateUrl: "modules/mass-charging/mass-charging.html",
            controller: 'MassChargingController as vm'
          }
        }
      })
      .state('tabs.allphone-lines',{
        url: "/allphone-lines",
        views: {
          'menu-tab': {
            templateUrl: "modules/allphonelines/allphonelines.html",
            controller: 'AllPhoneLinesController as vm'
          }
        }
      })
      .state('tabs.template-edit', {
        url: "/template-edit",
        views: {
          'menu-tab': {
            templateUrl: 'modules/template-edit/template-edit.html',
            controller: 'TemplateEditController as vm'
          }
        }
      })
      .state('tabs.wa-template-edit', {
        cache: false,
        url: "/wa-template-edit",
        params : {previous: rota},
        views: {
          'menu-tab': {
            templateUrl: 'modules/wa-template-edit/wa-template-edit.html',
            controller: 'WATemplateEditController as vm'
          }
        }
      })
      // .state('tabs.all-phones', {
      //   url: "/allPhones",
      //   views: {
      //     'menu-tab': {
      //       templateUrl: 'modules/all-phones/all-phones.html',
      //       controller: 'AllPhonesController as vm'
      //     }
      //   }
      //   })
      //   .state('tabs.estoque', {
      //     url: "/estoque",
      //     views: {
      //       'menu-tab': {
      //         templateUrl: 'modules/estoque/estoque.html',
      //         controller: 'EstoqueController as vm'
      //       }
      //     }
      //   })
        .state('tabs.plan-edition', {
          url: "/plan-edition",
          views: {
            'menu-tab': {
              templateUrl: 'modules/plan-edition/plan-edition.html',
              controller: 'PlanEditionController as vm'
            }
          }
        })
        .state('tabs.report-comissions', {
          url: "/report-comissions",
          views: {
            'menu-tab': {
              templateUrl: 'modules/report-comissions/report-comissions.html',
              controller: 'ReportComissionController as vm'
            }
          }
        })
        .state('tabs.all-phones-new', {
          url: "/allPhoneNew",
          views: {
            'menu-tab': {
              templateUrl: 'modules/all-phones-new/all-phones-new.html',
              controller: 'AllPhoneNewController as vm'
            }
          }
        })
        .state('tabs.wpp', {
          url: "/wpp",
          views: {
            'menu-tab': {
              templateUrl: 'modules/whatsapp/wpp.html',
              controller: 'WPPController as vm'
            }
          }
        })
        .state('tabs.instacharge', {
          url: "/instacharge",
          views: {
            'menu-tab': {
              templateUrl: 'modules/customers/insta-charge/insta-charge.html',
              controller: 'InstaChargeController as vm'
            }
          }
        })
        .state('tabs.allphonelinesnew', {
          url: "/allphonelinesnew",
          views: {
            'menu-tab': {
              templateUrl: 'modules/all-phoneslines-new/all-phoneslines-new.html',
              controller: 'AllPhoneLinesNewController as vm'
            }
          }
        })
        .state('tabs.allphonelines2new', {
          url: "/allphonelines2new",
          views: {
            'menu-tab': {
              templateUrl: 'modules/all-phoneslines2-new/all-phoneslines2-new.html',
              controller: 'AllPhoneLines2NewController as vm'
            }
          }
        })
        .state('tabs.facil', {
          url: "/facil",
          views: {
            'menu-tab': {
              templateUrl: 'modules/facil/facil.html',
              controller: 'FacilController as vm'
            }
          }
        })
      // .state('tabs.estoque', {
      //   url: "/estoque",
      //   views: {
      //     'menu-tab': {
      //       templateUrl: 'modules/estoque/estoque.html',
      //       controller: 'EstoqueController as vm'
      //     }
      //   }
      // }) 
      
      $urlRouterProvider.otherwise('/');
      configErrorHandler($provide);
  }

  function configRouteProvider($ionicConfigProvider, $locationProvider){
      $ionicConfigProvider.views.maxCache(0);
      $ionicConfigProvider.tabs.position('bottom');

      // $locationProvider.html5Mode(true).hashPrefix('!');

      // $locationProvider.html5Mode({
      //   enabled: true,
      //   requireBase: false
      // });
  }

  function configErrorHandler($provide){
    $provide.decorator("$exceptionHandler", function($delegate) {
        return function(exception, cause) {
          $delegate(exception, cause);
          //alert(exception.name + ' - ' + exception.message);
        };
      });
  }


})();

(function () {
  'use strict';

  angular.module('foneClub')
    .run(function($ionicPlatform) {
        $ionicPlatform.ready(function() {
            if(window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

            // Don't remove this line unless you know what you are doing. It stops the viewport
            // from snapping when text inputs are focused. Ionic handles this internally for
            // a much nicer keyboard experience.
            cordova.plugins.Keyboard.disableScroll(true);
            }
            if(window.StatusBar) {
            StatusBar.styleDefault();
            }
        });
        })

})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('AllPhonesController', AllPhonesController);
    
      AllPhonesController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService', 'NgTableParams', '$scope'];
      function AllPhonesController(FlowManagerService, FoneclubeService, PagarmeService, NgTableParams, $scope) {
            
        var vm = this;
        vm.planOptions;
        vm.result;
        vm.filtroCliente = false;

        vm.changeFilterCliente = changeFilterCliente;
        vm.onClickDesassociar = onClickDesassociar; 
        vm.changeSelectPlan = changeSelectPlan;
        vm.onClickTrocaPlano = onClickTrocaPlano;

        FoneclubeService.getAllPhonesStatus().then(function(result){

            FoneclubeService.getPlanOptios().then(function(result){

                vm.planOptions = result;
                // vm.planOptions.forEach(plan => {
                //     console.log(plan)
                // });

            FoneclubeService.getStatusTelefonesOperadora().then(function (result) {

                

                for(var i in vm.result)
                {
                    var telefone = vm.result[i].linhaLivreOperadora;
                    vm.result[i].usoLinha = "Sem dados na SP";
                    vm.result[i].plano = "Sem dados na SP";
                    vm.result[i].divergente = -1;

                    for(var r in result){
                        if(telefone == result[r].phone){

                            var operadora; 
                            if(result[r].operadora == 1)
                            {
                                operadora = 'CLARO'
                            } 
                            else if(result[r].operadora == 2)
                            {
                                operadora = 'VIVO'
                            }

                            vm.result[i].plano = operadora + " " + result[r].plano;
                            vm.result[i].usoLinha = result[r].usoLinha ? "Sim" : "Não";

                            // console.log('telefone')
                            // console.log(vm.result[i])
                            
                            // var phoneLine = vm.result[i];
                            // var planoFoneclube = phoneLine.txtPlanoFoneclube;
                            // var planoOperadora = phoneLine.plano;                            
                        }
                    }
                }

                // console.log('tentando getStatusDivergencia')
                FoneclubeService.getStatusDivergencia().then(function (result) {
                    
                    // console.log('getStatusDivergencia')
                    for(var l in vm.result){
                        
                        // debugger;
                        vm.result[l].divergente = 'Não';
                        for(var i in result){
                            if(vm.result[l].linhaLivreOperadora == result[i].phone){
                                
                                if((result[i].bitOperatorDivergent || result[i].bitPlanDivergent)) {
                                    vm.result[l].divergente = 'Sim';
                                    vm.result[l].operatorDivergent = result[i].bitOperatorDivergent
                                    vm.result[l].planDivergent = result[i].bitOperatorDivergent
                                }
                            }
                        }

                        if(vm.result[l].plano == 'Sem dados na SP' || vm.result[l].plano == 'VIVO Sem Plano deinido na SP'){
                            vm.result[l].divergente = 'Sem dados na SP';  
                        }
                    }

                })
                
                vm.result
                
            })

        })
            

            for(var i in result){
                result[i].desativada = false;

                if(result[i].operadora == 1)
                    result[i].operadoraDescription = 'CLARO'
                else
                    result[i].operadoraDescription = 'VIVO'

                if(result[i].idPhone == null)
                    result[i].PhoneText = 'Não'
                else
                    result[i].PhoneText = 'Sim'

            }

            vm.result = result

            vm.initialParams = {
                filter: { desativada: false },
                count: 1000 // initial page size
              };
            vm.initialSettings = {
            // page size buttons (right set of buttons in demo)
            counts: [50,100,500, 1000],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 10,
            paginationMinBlocks: 1,
             
            dataset: vm.result
            
            };

            vm.tableParams = new NgTableParams(vm.initialParams, vm.initialSettings)
            
        })

        $scope.$watch("vm.tableParams", function () {            
            // console.log('Works')
        });

        function changeFilterCliente(){
            // console.log('changeFilterCliente')
            vm.filtroCliente = !vm.filtroCliente;

            // remonta lista e atualiza componente

            //filtra direto na tabela
        }

        function onClickDesassociar(linha){
            
            var confirmation = confirm("Deseja desativar essa linha?");
            if (confirmation) {
                FoneclubeService.postDesassociarLinha(linha.idPhone).then(function(result){
                    if(result){
                        alert('Telefone desativado com sucesso')

                        linha.idPhone = null;
                        linha.txtName = ''
                        linha.txtNickname = ''
                        linha.intIdPerson = ''
                        linha.txtPlanoFoneclube = ''
                        linha.PhoneText = 'Não'
                        
                        // caso seja pra limpar
                        // linha.desativada = true;
                        // vm.tableParams.reload();
                    }
                    else{
                        alert('Não foi possível desativar essa linha do cliente')
                    }
                })
                .catch(function (error) {
                    alert('Não foi possível desativar essa linha do cliente')
                });
            }  
        }

        function changeSelectPlan(linha){
            // console.log('changeSelectPlan')
            
            var confirmation = confirm("Deseja trocar o plano da linha " + linha.linhaLivreOperadora + " para, " +  linha.selectedPlan.Description + ' ?');
            if (confirmation) {
                FoneclubeService.postUpdatePhonePlan({Id:linha.idPhone, IdPlanOption:linha.selectedPlan.Id}).then(function(result){
                    if(result)
                    {
                        alert('Plano alterado com sucesso')
                        linha.txtPlanoFoneclube = linha.selectedPlan.Description;
                        linha.editPlan = false; 
                        linha.divergente = 'Pendente Refresh';
                        FoneclubeService.getStatusDivergencia().then(function (result) {
                            
                            for(var i in result){
                                if(result[i].phone == linha.linhaLivreOperadora){
                                    // debugger;
                                    if(result[i].bitOperatorDivergent || result[i].bitPlanDivergent) {
                                        linha.divergente = 'Sim';
                                        linha.operatorDivergent = result[i].bitOperatorDivergent
                                        linha.planDivergent = result[i].bitOperatorDivergent
                                    }
                                    else{
                                        linha.divergente = 'Não';
                                        linha.operatorDivergent = result[i].bitOperatorDivergent
                                        linha.planDivergent = result[i].bitOperatorDivergent
                                    }
                                }
                            }
                        })
                    }
                    else{
                        alert('Não foi possível alterar o plano dessa linha')
                        linha.editPlan = false; 
                    }
                    
                })
                
            }
            else{
                linha.editPlan = false; 
            }
        }

        function onClickTrocaPlano(linha){
            // console.log("onClickTrocaPlano")
            // debugger
            if(linha.txtPlanoFoneclube == null)
            {
                alert('Essa linha não tem cliente associado por isso não é possível trocar plano foneclube')
            }
            else
                linha.editPlan = true;
        }

        $scope.$watch("vm.searchUser", function () {
            try{
                var search = vm.searchUser.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');
                var isnum = /^\d+$/.test(search.replace(' ', ''));
                
                if(isnum)
                    vm.searchIgnoreAccent = search.replace(' ', '');
                else    
                    vm.searchIgnoreAccent = search;
    
                vm.tableParams.filter({ $: vm.searchIgnoreAccent });
                vm.tableParams.reload();
            }
            catch(e){}
            
         });
        
        
      }
    })();
    
(function () {
    'use strict';
    
     angular.module('foneClub').controller('AddNewPhoneModalController', AddNewPhoneModalController);
    
     AddNewPhoneModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function AddNewPhoneModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            vm.chargeForm = {};
            vm.amounts = {};
            vm.chargeForm.Nome = "";
            vm.isCustomerSelected = true;
            vm.customerNames = [];
            vm.plans = [];
            vm.phones = [];
            vm.gridHeight = 300;
            
            vm.selectCustomerItem = selectCustomerItem;
            vm.setSelectedCustomerName = setSelectedCustomerName;
            vm.onTapSaveLine = onTapSaveLine;
            vm.updatePrice = updatePrice;
            
            vm.gridOptions = {
                columnDefs: [ 
                  { field: 'Contel', headerName:'Contel', width: 150 },
                  { field: 'Port', headerName:'Portar', width: 150 },
                  { field: 'ICCID', headerName:'ICCID', width: 150 },
                  { field: 'NickName', headerName:'Apelido', width: 150 },
                  { field: 'Active', headerName:'Ativo', width: 80  ,cellRenderer: function (params) {
    					var cellHtml ='<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/'+(params.value == true ? 'customeron.png' : 'customeroff.png') + '" /></a>';
    					return cellHtml;
    				}
                  },
                  { field: 'PrecoFC', headerName:'PrecoFC', width: 120 },
                  { field: 'VIPPrice', headerName:'R$ VIP', width: 100 }
                ],
                defaultColDef: {
                  //flex: 1,
                  sortable: true,
                  filter: true,
                  resizable: true
                },
                singleClickEdit:true,
                enableCellTextSelection: true,
                autoSizeColumns: true,
                rowHeight: 30,
                headerHeight: 120,
                onCellClicked: onCellClicked,
                onGridReady: function(params) {
                    this.gridApi = params.api;
                    this.gridColumnApi = params.columnApi;
                    bindAgGrid(vm.phones);
                }
            }

            init();

            function init(){
                FoneclubeService.getPlansById(4).then(function (result) {
                    vm.plans = result.filter(x=>x.IdOperator != 1).sort((a,b) => (a.IdOperator > b.IdOperator) ? -1 : ((b.IdOperator > a.IdOperator) ? 1 : 0));
                });

                FoneclubeService.getAllCustomersMinimal().then(function(result){
                    vm.customerNames = result;
                });
            }

            function selectCustomerItem(val){
              vm.isCustomerSelected = val;
            }

            function setSelectedCustomerName(item){
                vm.isCustomerSelected = true;
                vm.chargeForm.Id = item.Id;
                vm.chargeForm.Nome = item.Name;
                LoadUserLines(item.DocumentNumber);
            }

            function updatePrice(plano){
                vm.chargeForm.PlanId=plano;
                var amount = vm.plans.find(x=>x.Id == plano).Value / 100;
                vm.chargeForm.Price = "R$" + amount.toFixed(2);
            }

            function LoadUserLines(cpf){
                FoneclubeService.getCustomerByCPF(cpf).then(function (result) {
                    bindAgGrid(result.Phones);
                });
            }

            function onCellClicked(params) {
                UtilsService.clipBoardCopy(params.value);
            }

            function bindAgGrid(data) {
                var rowData = convertToViewModel(data);
                if (vm.gridOptions.api) {
                    vm.gridOptions.api.setRowData(rowData);
                } 
            }

            function convertToViewModel(data){
                var templateDataList = [];
                for (var i = 0; i < data.length; i++) {
                    var datamodel = data[i];
                    templateDataList.push({
                        'Contel': datamodel.DDD + "" + datamodel.Number,
                        'Port': datamodel.PortNumber,
                        'ICCID': datamodel.ICCID,
                        'Active': datamodel.LinhaAtiva,
                        'PrecoFC': vm.plans.find(x=>x.Id == datamodel.IdPlanOption) == undefined ? "" : vm.plans.find(x=>x.Id == datamodel.IdPlanOption).Description,
                        'VIPPrice': datamodel.AmmountPrecoVip,
                        'NickName': datamodel.NickName,
                    });
                }
                return templateDataList;
            }

            function onTapSaveLine(){
                var phone = UtilsService.clearPhoneNumber(vm.chargeForm.Contel);
                var phones = [];
                var data = {
                    intDDD : phone.substr(0,2),
                    intPhone : phone.substr(2),
                    intIdOperator : 4,
                    intIdPerson : vm.chargeForm.Id,
                    txtPortNumber :  UtilsService.clearPhoneNumber(vm.chargeForm.Port), 
                    txtICCID: vm.chargeForm.ICCID,
                    intIdPlan : vm.chargeForm.PlanId,
                    txtNickname : vm.chargeForm.Apelido,
                    intAmmoutPrecoVip : vm.chargeForm.Price.replace("R$","").replace(".","")
                }
                phones.push(data);
                FoneclubeService.saveInstaPhoneClient(phones).then(function (result) {
                    if(result)
                        DialogFactory.showMessageDialog({mensagem:'Linha salva com sucesso'});
                    else
                        DialogFactory.showMessageDialog({mensagem:'A linha já existe ou ocorreu um erro ao adicionar esta linha'});
                });
            }
    }
})();
angular
  .module("foneClub")
  .controller("AllPhoneLinesNewController", AllPhoneLinesNewController);

function AllPhoneLinesNewController(
  $scope,
  $interval,
  FoneclubeService,
  DialogFactory,
  UtilsService,
  ViewModelUtilsService,
  FlowManagerService,
  SessionStorageUtilsService
) {
  var vm = this;
  vm.isMobile = UtilsService.mobileCheck();
  vm.agGridStates = ["All"];
  vm.plans = [];
  vm.plansAll = [];
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.defaultGridState = {};
  vm.onQuickFilterChanged = onQuickFilterChanged;
  vm.clearFilter = clearFilter;
  vm.openChargeSummary = openChargeSummary;
  vm.openWhatsApp = openWhatsApp;
  vm.exportToExcel = exportToExcel;
  vm.getAgGridState = getAgGridState;
  vm.saveState = saveState;
  vm.deleteState = deleteState;
  vm.updateState = updateState;
  vm.refreshPage = refreshPage;
  vm.openTopupPopup = openTopupPopup;
  vm.openTopupHistory = openTopupHistory;
  vm.onClipBoardSuccess = onClipBoardSuccess;
  vm.pasteCliboardText = pasteCliboardText;
  vm.BlockUnlockLine = BlockUnlockLine;
  vm.addNewLine = addNewLine;
  vm.addContelLineManually = addContelLineManually;
  vm.importContelTopupHistory = importContelTopupHistory;
  vm.onlyActive = onlyActive;
  vm.toggleModal = toggleModal;
  vm.ResetESIM = ResetESIM;
  vm.isOpen = false;
  vm.loading = true;
  vm.clipBoardCopiedText = "";
  vm.isLoading = false
  vm.filterText = "";
  vm.gridWidth = mobileCheck() ? $(window).width() - 20 + "px" : "100%";
  vm.gridHeight = $(window).height() - 100;

  const customNumberComparator = (valueA, valueB) => {
    valueA = valueA != null ? valueA.toString() : null;
    valueB = valueB != null ? valueB.toString() : null;
    valueA =
      valueA == null || valueA == "" || valueA == "OFF"
        ? "-1"
        : valueA
          .replace(" GB", "")
          .replace(" gb", "")
          .replace(",", "")
          .replace("R$", "");
    valueB =
      valueB == null || valueB == "" || valueB == "OFF"
        ? "-1"
        : valueB
          .replace(" GB", "")
          .replace(" gb", "")
          .replace(",", "")
          .replace("R$", "");
    if (parseInt(valueA) == parseInt(valueB)) return 0;
    return parseInt(valueA) > parseInt(valueB) ? 1 : -1;
    FoneClube.Business.Commons.dll;
    FoneClube.WebAPI.dll;
    FoneClube.DataAccess.dll;
  };

  const filterParamsNumber = {
    filterOptions: [
      {
        displayKey: "largerThan",
        displayName: "Larger than",
        test: function (filterValue, cellValue) {
          cellValue =
            cellValue != null
              ? cellValue
                .replace(" GB", "")
                .replace(" gb", "")
                .replace("R$", "")
                .replace("OFF", "")
              : "-1";
          return parseInt(cellValue) > parseInt(filterValue);
        },
      },
      {
        displayKey: "smallerThan",
        displayName: "Smaller than",
        test: function (filterValue, cellValue) {
          cellValue =
            cellValue != null
              ? cellValue
                .replace(" GB", "")
                .replace(" gb", "")
                .replace("R$", "")
                .replace("OFF", "")
              : "-1";
          return parseInt(cellValue) < parseInt(filterValue);
        },
      },
      "equals",
      "notEqual",
    ],
  };
  // const filterOptions = [
  //   'empty',
  //   {
  //       displayKey: 'blanks',
  //       displayName: 'Blanks',
  //       filterParams: {
  //           suppressAndOrCondition: true
  //         },
  //       test: function (filterValue, cellValue) {
  //           return cellValue == "";
  //       },
  //       hideFilterInput: true,
  //   },
  //   'equals',
  //   'notEqual',
  //   'lessThan',
  //   'lessThanOrEqual',
  //   'greaterThan',
  //   'greaterThanOrEqual',
  //   'inRange'
  // ];
  var filterDateParams = {
    comparator: function (filterLocalDateAtMidnight, cellValue) {
      var dateAsString = new Date(cellValue);
      if (dateAsString == null) return -1;

      if (dateAsString < filterLocalDateAtMidnight) {
        return -1;
      }

      if (dateAsString > filterLocalDateAtMidnight) {
        return 1;
      }
    },
    browserDatePicker: true,
    minValidYear: 2000,
    filterOptions: [
      "lessThan",
      {
        displayKey: "lessThanWithNulls",
        displayName: "Less Than with Nulls",
        predicate: ([filterValue], cellValue) =>
          cellValue == null || cellValue < filterValue,
      },
      "greaterThan",
      {
        displayKey: "greaterThanWithNulls",
        displayName: "Greater Than with Nulls",
        predicate: ([filterValue], cellValue) =>
          cellValue == null || cellValue > filterValue,
      },
      {
        displayKey: "betweenExclusive",
        displayName: "Between (Exclusive)",
        predicate: ([fv1, fv2], cellValue) =>
          cellValue == null || (fv1 < cellValue && fv2 > cellValue),
        numberOfInputs: 2,
      },
    ],
  };

  vm.gridOptions = {
    columnDefs: [
      //rowGroup: true,
      { field: "Id", hide: true },
      // { field: 'IsContelLine', headerName: 'Contel',  width: 80 ,
      //   cellRenderer: function (params) {
      //     if(params.value){
      // 			var cellHtml ='<div class="circle_green"></div>';
      // 			return cellHtml;
      // 		}
      //     else{
      // 			var cellHtml ='<div class="circle_red"></div>';
      // 			return cellHtml;
      //     }
      //   },
      //   filterParams: {
      //     suppressAndOrCondition: true
      //   }
      // },
      {
        field: "TopUpHistory",
        headerName: "Top Up History",
        width: 80,
        cellRenderer: function (params) {
          var cellHtml =
            '<a ng-click="vm.openTopupPopup(' +
            params.node.data.PhoneNumber +
            ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup-history.png" /></a>';
          return cellHtml;
        },
      },
      {
        headerName: 'Reset',
        field: '',
        cellRenderer: function (params) {
          var cellHtml =
            '<a ng-click="vm.ResetESIM(' +
            params.node.data.PhoneNumber +
            ')" >Reset</a>';
          return cellHtml;
        },
      },
      {
        field: "TopUp",
        headerName: "Top Up",
        width: 80,
        cellRenderer: function (params) {
          var cellHtml =
            '<a ng-click="vm.openTopupPopup(' +
            params.node.data.PhoneNumber +
            ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup.png" /></a>';
          return cellHtml;
        },
      },
      {
        field: "Ativa",
        width: 80,
        headerName: "Linha",
        //headerCheckboxSelection: true,
        //headerCheckboxSelectionFilteredOnly: true,
        //checkboxSelection: true,
        cellRenderer: function (params) {
          var cellHtml =
            '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/' +
            (params.value == "T" ? "customeron.png" : "customeroff.png") +
            '" /></a>';
          return cellHtml;
        },
        editable: false,
        filterParams: {
          suppressAndOrCondition: true,
        },
        //filter: false
      },
      {
        field: "PhoneNumber",
        headerName: "Linha",
        width: 160,
        filterParams: filterParamsNumber,
      },
      {
        field: "DteRegistered",
        headerName: "Registro",
        width: 100,
        cellRenderer: function (params) {
           return moment(params.value).format("DD MMM YYYY");
        },
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
      },
      { field: "PortNumber", headerName: "Port/Line", width: 120 },
      {
        field: "Plano_Contel",
        headerName: "P. Contel",
        width: 100,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "Saldo",
        headerName: "Saldo GB",
        width: 80,
        filterParams: filterParamsNumber,
        cellRenderer: function (params) {
          if (params.value != null) {
            return params.value == null
              ? ""
              : params.value.replace(" GB", "").replace(" gb", "");
          }
        },
        comparator: customNumberComparator,
      },
      {
        field: "FimPlano",
        headerName: "Fim Plano",
        width: 80,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
      },
      {
        field: "Recarga_Automatica",
        headerName: "Auto Contel",
        width: 80,
        cellRenderer: function (params) {
          if (params.value != null) {
            var cellHtml =
              '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' +
              (params.value == 0 ? "customeroff.png" : "customeron.png") +
              '" /></a>';
            return cellHtml;
          }
        },
      },
      {
        field: "Cancelation_Date",
        headerName: "Perde Numero",
        width: 100,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
        cellStyle: function (params) {
          var dataAtual = new Date();
          var dataFimPlano = new Date(params.value);
          var diffEmDias = Math.floor(
            (dataFimPlano - dataAtual) / (1000 * 60 * 60 * 24)
          );

          if (diffEmDias <= 10 && diffEmDias >= 0) {
            return { "font-weight": "bold", color: "red" };
          }
          return null;
        },
      },
      {
        field: "Ativacao",
        headerName: "Ativação",
        width: 100,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
        cellRenderer: function (params) {
          // Verifica se a data está disponível
          if (params.value) {
            // Converte a data para o formato desejado
            const dataFormatada = convertDate(params.value);

            // Retorna a data formatada
            return dataFormatada;
          }
          return params.value; // Retorna o valor original se não houver data
        },
      },
      {
        field: "InicioPlano",
        headerName: "Plano Inicio",
        width: 100,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
      },
      {
        field: "AutoRec",
        headerName: "Auto-Rec",
        width: 100,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
      },
      {
        field: "ValorPago",
        width: 80,
        headerName: "$ Cob. Contel",
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "RecAutFCFlag",
        headerName: "Rec. FC",
        width: 100,
        cellRenderer: function (params) {
          if (params.value != null) {
            var cellHtml =
              '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' +
              (params.value == false ? "customeroff.png" : "customeron.png") +
              '" /></a>';
            return cellHtml;
          }
        },
      },
      {
        field: "RecAutFC",
        headerName: "Rec.Aut.FC",
        width: 100,
        filter: "agDateColumnFilter",
        filterParams: filterDateParams,
        comparator: DateComparator,
      },
      {
        field: "ContelBlockStatus",
        headerName: "Contel",
        width: 80,
        cellRenderer: function (params) {

          if (params.value == "A") {
            return (
              "<a ng-click=\"vm.BlockUnlockLine('" +
              params.value +
              "', " +
              params.node.data.IdPerson +
              ", " +
              params.node.id +
              ", '" +
              params.node.data.Nome_FC +
              '\')" title="Ativa"  href="javascript:void(0);"><img class="imgUsd link" style="max-width:16px; alt="Ativa" margin-top:10px" src="content/img/phone-green.png" /></a>'
            );
          } else if (params.value == "B") {
            return (
              "<a ng-click=\"vm.BlockUnlockLine('" +
              params.value +
              "', " +
              params.node.data.IdPerson +
              ", " +
              params.node.id +
              ",'" +
              params.node.data.Nome_FC +
              '\')" title="Bloqueada"  style=""><img class="imgUsd link" style="max-width:16px; margin-top:10px" src="content/img/phone-red.png" /></a>'
            );
          } else if (params.value == "C") {
            return (
              "<a ng-click=\"vm.BlockUnlockLine('" +
              params.value +
              "', " +
              params.node.data.IdPerson +
              ", " +
              params.node.id +
              ",'" +
              params.node.data.Nome_FC +
              '\')" title="Cancelada"  style=""><img class="imgUsd link" style="max-width:16px; alt="Cancelada" margin-top:10px" src="content/img/phone-black.png" /></a>'
            );
          } else {
            return (
              '<div class="circle_red"><a ng-click="vm.BlockUnlockLine(\'' +
              params.value +
              "', " +
              params.node.data.IdPerson +
              ", '" +
              params.node.data.Nome_FC +
              '\')" href="javascript:void(0);" title="Outras Operadoras" /></div>'
            );
          }
        },
      },
      {
        field: "ContelStatus",
        headerName: "Status",
        width: 100,
      },
      ,
      {
        field: "PortIn",
        headerName: "Port In",
        width: 100,
      },
      {
        field: "Bloqueada",
        headerName: "Bloq.",
        width: 100,
      },
      {
        field: "Esim",
        headerName: "Esim",
        width: 100,
        cellRenderer: function (params) {
          return params.value == "SIM" ? "Yes" : "No";
        },
      },
      {
        field: "UltPagDias",
        headerName: "Ult. $",
        width: 100,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "DaysSinceLastTopup",
        headerName: "Dias ult. Rec.",
        cellRenderer: function (params) {
          if (params.value >= 0) return "<div>" + params.value + "</div>";
          else return "<div>-</div>";
        },
        width: 100,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "LastPaidAmount",
        headerName: "Ult. Pago $",
        width: 100,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "StatusCob",
        headerName: "Status $",
        width: 100,
      },
      {
        field: "ChargeHistory",
        width: 40,
        cellRenderer: function (params) {
          return "<a><img class='imgUsd link' src='content/img/usd.jpeg' style='max-width:15px;margin:10px 0px;    '/></a>";
        },
      },
      {
        field: "WhatsApp",
        width: 40,
        cellRenderer: function (params) {
          return "<a><img class='imgUsd link' src='content/img/message-green.png' style='max-width:15px;   margin:10px 0' /></a>";
        },
      },
      {
        field: "ClienteAtivo_FC",
        headerName: "Cliente",
        width: 100,
        cellRenderer: function (params) {
          var cellHtml =
            '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' +
            (params.value == "T" ? "customeron.png" : "customeroff.png") +
            '" /></a>';
          return cellHtml;
        },
        filterParams: {
          suppressAndOrCondition: true,
        },
      },
      { field: "Nome_FC", editable: false, singleClickEdit: false, width: 250 },
      {
        field: "Apelido",
        editable: true,
        width: 150,
        cellEditor: "agLargeTextCellEditor",
      },
      { field: "ICCID", editable: true },
      { field: "Propriedade", headerName: "Dono", width: 120 },
      { field: "CPF_FC", headerName: "CPF FC", width: 120 },
      { field: "CPF_DR", headerName: "CPF Dr", width: 120 },
      { field: "DocContel", headerName: "Doc Contel", width: 120 },
      { field: "Nome_DR", headerName: "Nome Dr", width: 150 },
      { field: "LinhaSemUso", width: 120, headerName: "Sem Uso" },
      { field: "Linha_DR", width: 120 },
      {
        field: "Total_DR",
        headerName: "Total Dr",
        width: 80,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      { field: "PrecoUnico", headerName: "$ Unico", width: 80 },
      {
        field: "Total_FC",
        headerName: "Total FC",
        width: 80,
        filterParams: filterParamsNumber,
      },
      {
        field: "Preco_FC",
        headerName: "$ FC",
        width: 80,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "PrecoVIP",
        width: 80,
        headerName: "$ VIP",
        editable: true,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "VIPSum",
        width: 80,
        headerName: "VIP Sum",
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "FCSum",
        width: 80,
        headerName: "$ FC Sum",
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
      {
        field: "Plano_FC",
        headerName: "P. FC",
        width: 150,
        editable: true,
        filterParams: {
          includeBlanksInEquals: true,
          includeBlanksInLessThan: true,
          includeBlanksInGreaterThan: true,
          includeBlanksInRange: true,
        },
        cellEditor: "agSelectCellEditor",
        cellEditorParams: {
          values: vm.plans,
        },
      },
      { field: "Plugin_DR", headerName: "Plano Dr", width: 150 },
      { field: "Plano_DR", width: 150 },
      { field: "Roaming", width: 80 },
      {
        field: "Agendado",
        width: 80,
        filterParams: filterParamsNumber,
        comparator: customNumberComparator,
      },
    ],
    defaultColDef: {
      //flex: 1,
      sortable: true,
      filter: true,
      resizable: true,
      filterParams: {
        includeBlanksInEquals: true,
        includeBlanksInLessThan: true,
        includeBlanksInGreaterThan: true,
        includeBlanksInRange: true,
      },
    },
    stopEditingWhenCellsLoseFocus: true,
    copyHeadersToClipboard: true,
    suppressExcelExport: true,
    enableCellTextSelection: true,
    autoSizeColumns: true,
    singleClickEdit: true,
    onFilterChanged: function () {
      vm.resultText =
        vm.gridOptions.api.getDisplayedRowCount() +
        " of " +
        JSON.parse(LZString.decompress(sessionStorage.getItem("allphonelines")))
          .length +
        " items";
    },

    rowSelection: "multiple",
    headerHeight: 100,
    rowHeight: 30,
    onCellClicked: onCellClicked,
    // onSortChanged : function(params){
    //   alert('hi');
    //   params.api.forEachNode((rowNode,index)=>{ rowNode.rowIndex = index; });
    // },
    onCellValueChanged: function (event) {
      setSession(event.data["Id"]);
      if (event != null && event.data != null) {
        if (event.data[event.column.colId] != "Select") {
          console.log(event.column.colId);
          console.log(event.data[event.column.colId]);
          var data = {
            Id: event.data.Id,
            key: event.column.colId,
            value: event.data[event.column.colId],
          };
          FoneclubeService.postAllPhoneLinesAction(data).then(function (
            result
          ) { });
        } else {
          event.data[event.column.colId] = event.oldValue;
          event.api.refreshCells({ columns: ["Plano_FC"] });
        }
      }
      UpdateSession();
    },
  };

  function convertDate(dataString) {
    // Mapeamento de abreviações de meses para números
    const months = {
      Jan: "01",
      Feb: "02",
      Mar: "03",
      Apr: "04",
      May: "05",
      Jun: "06",
      Jul: "07",
      Aug: "08",
      Sep: "09",
      Oct: "10",
      Nov: "11",
      Dec: "12",
    };

    // Quebrar a string em partes (dia, mês, ano)
    const partes = dataString.split(" ");

    // Obter o ano, mês e dia
    const year = partes[2];
    const month = months[partes[1]];
    const day = partes[0];

    // Formar a data no formato "aaaa-mm-dd hh:mm"
    const finalDate = `${year}-${month}-${day} 00:00`;

    return finalDate;
  }

  init();

  function onlyActive() {
    rowData = vm.gridOptions.api.getModel().rowsToDisplay;

    const filterCheckbox = document.getElementById("filterCheckbox");

    console.log(filterCheckbox.checked);
    if (!filterCheckbox.checked) {
      const arr = LZString.decompress(sessionStorage.getItem("allphonelines"));
      const parsedArr = JSON.parse(arr);
      vm.gridOptions.api.setRowData(parsedArr);

      vm.resultText =
        vm.gridOptions.api.getDisplayedRowCount() +
        " of " +
        parsedArr
          .length +
        " items";

      return;


    }

    let arr = [];
    var phoneNumbers = {};

    for (var i = 0; i < rowData.length; i++) {
      var row = rowData[i];
      var phoneNumber = row.data.PhoneNumber;
      var ativa = row.data.Ativa;

      if (phoneNumbers.hasOwnProperty(phoneNumber)) {
        if (ativa !== "F") {
          phoneNumbers[phoneNumber] = row;
        }
      } else {
        phoneNumbers[phoneNumber] = row;
      }
    }

    for (var key in phoneNumbers) {
      arr.push(phoneNumbers[key].data);
    }

    vm.gridOptions.api.setRowData(arr);
    vm.resultText =
      vm.gridOptions.api.getDisplayedRowCount() +
      " of " +
      JSON.parse(LZString.decompress(sessionStorage.getItem("allphonelines")))
        .length +
      " items";

  }

  function refreshGridOptions() {
    vm.gridOptions.columnDefs.filter(
      (x) => x.field == "Plano_FC"
    )[0].cellEditorParams.values = vm.plans;
  }

  // function onCellDoubleClicked(params){
  //   //console.log(params);
  //   if(params.colDef.field != "PhoneNumber")
  //   {
  //     sessionStorage.setItem('lastClickedRow', params.node.data.PhoneNumber);
  //     openCustomerEdit(params.node.data.CPF_FC);
  //   }
  // }

  function openTopupPopup(phone) {
    var showLoader = DialogFactory.showLoader(
      "Aguarde enquanto buscamos as informações da linha."
    );
    FoneclubeService.getContelDetailByPhone(phone).then(
      function (result) {
        showLoader.close();
        if (result != null) {
           FoneclubeService.getContelPlans().then(function (result1) {
            sessionStorage.setItem('contelplans', JSON.stringify(result1));
     
            var resultData = {
              result: result,
              plans: JSON.parse(
                sessionStorage.getItem("contelplans") == null
                  ? null
                  : sessionStorage.getItem("contelplans")
                ),
            };
            ViewModelUtilsService.showModalPhoneTopUpTemplate(resultData);
           });
        } else {
          alert("Selected line is not available in Contel");
        }
      },
      function (error) {
        showLoader.close();
        DialogFactory.showMessageDialog({
          mensagem: "Error occured: " + error,
        });
      }
    );
  }

  function openTopupHistory(phone) {
    var showLoader = DialogFactory.showLoader(
      "Aguarde enquanto buscamos o histórico de recarga."
    );
    FoneclubeService.getTopupHistory(phone).then(
      function (result) {
        showLoader.close();
        if (result != null && result.Person != null) {
          ViewModelUtilsService.showModalPhoneTopUpHistoryTemplate(result);
        } else {
          alert("Information not available");
        }
      },
      function (error) {
        showLoader.close();
        DialogFactory.showMessageDialog({
          mensagem: "Error occured: " + error,
        });
      }
    );
  }

  function onCellClicked(params) {
    setSession(params.node.data.Id);
    switch (params.colDef.field) {
      case "PortNumber":
        ClipBoardCopy(params.value);
        break;
      case "CPF_FC":
        ClipBoardCopy(params.value);
        break;
      case "Saldo":
        {
          var showLoader = DialogFactory.showLoader(
            "Aguarde enquanto obtém o saldo mais recente"
          );
          FoneclubeService.getContelDetailBySaldoPhone(
            params.node.data.PhoneNumber
          ).then(
            function (result) {
              showLoader.close();
              if (result != null && result.data != null) {
                var saldo = parseFloat(
                  result.data.restante_dados / 1024
                ).toFixed(2);
                const itemsToUpdate = [];
                let rowData = [];
                vm.gridOptions.api.forEachNodeAfterFilterAndSort(function (
                  rowNode,
                  index
                ) {
                  if (rowNode.data.Id == params.node.data.Id) {
                    rowNode.data.Saldo = saldo;
                    rowNode.setSelected(true);
                    vm.gridOptions.api.refreshCells({ columns: ["Saldo"] });
                    vm.gridOptions.api.ensureIndexVisible(index, "middle");
                  }
                });
                // debugger;
                // vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));
                // vm.gridOptions.api.setRowData(rowData);
                // UpdateSession();
              }
            },
            function (error) {
              showLoader.close();
            }
          );
        }
        break;
      case "ChargeHistory":

        vm.openChargeSummary(params.node.data.CPF_FC);
        break;
      case "WhatsApp":
        vm.openWhatsApp(params.node.data.CPF_FC);
        break;
      case "TopUp":
        vm.openTopupPopup(params.node.data.PhoneNumber);
        break;
      case "TopUpHistory":

        vm.openTopupHistory(params.node.data.PhoneNumber);

        break;
      case "Ativa":
        {
          var title =
            params.node.data.Ativa == "T" ? "Desativar linha" : "Ativar linha";
          var msg =
            params.node.data.Ativa == "T"
              ? "Tem certeza que deseja desativar a linha "
              : "Tem certeza que deseja ativar a linha ";
          DialogFactory.dialogConfirm({
            titulo: title,
            mensagem: "<span>" + msg + params.node.data.PhoneNumber + "</span>",
            btn1: "SIM",
            btn2: "NÃO",
          }).then(function (result) {
            if (!result) {
              var data = {
                Id: params.node.data.Id,
                key: params.colDef.field,
                value: params.node.data.Ativa == "F" ? "true" : "false",
              };
              UpdateSelectedData(data, params.node.data.PhoneNumber);
            }
          });
        }
        break;
      case "RecAutFCFlag":
        {
          var data = {
            Id: params.node.data.Id,
            key: params.colDef.field,
            value: params.node.data.RecAutFCFlag == false ? "true" : "false",
          };
          UpdateSelectedData(data, params.node.data.PhoneNumber);
        }
        break;
      case "ClienteAtivo_FC":
        {
          var title =
            params.node.data.Ativa == "T"
              ? "Desativar cliente"
              : "Ativar cliente";
          var msg =
            params.node.data.Ativa == "T"
              ? "Tem certeza que deseja desativar a cliente "
              : "Tem certeza que deseja ativar a cliente ";
          DialogFactory.dialogConfirm({
            titulo: title,
            mensagem: "<span>" + msg + params.node.data.Nome_FC + "</span>",
            btn1: "SIM",
            btn2: "NÃO",
          }).then(function (result) {
            if (!result) {
              var data = {
                Id: params.node.data.Id,
                key: params.colDef.field,
                value:
                  params.node.data.ClienteAtivo_FC == "T" ? "true" : "false",
              };
              UpdateSelectedData(data, params.node.data.PhoneNumber);
            }
          });
        }
        break;
      case "PhoneNumber":
        {
          ClipBoardCopy(params.value);
          // FoneclubeService.syncContelLinesForUser(params.node.data.IdPerson).then(function (result) {
          //   if(result)
          //   {
          //     refreshPage();
          //   }
          // });
        }
        break;
      case "ContelBlockStatus":
        {
          if (params.node.data.ContelStatus != "CANCELADO") {
            vm.BlockUnlockLine(
              params.value,
              params.node.data.IdPerson,
              params.node.id,
              params.node.data.Nome_FC,
              params.node.data.PhoneNumber
            );
          }
        }
        break;
      case "Nome_FC":
        {
          var showLoader = DialogFactory.showLoader(
            "Aguarde enquanto obtém os dados do cliente"
          );

          {
            FoneclubeService.getCustomerByCPF(
              UtilsService.clearDocumentNumber(params.node.data.CPF_FC)
            ).then(function (result) {
              var data = {
                Id: result.Id,
                CPF: result.DocumentNumber,
                Nome: result.Name,
                Use2Prices: result.Use2Prices,
                IsVIP: result.IsVIP,
                Referral: result.Referral,
                Phones: result.Phones,
                Email: result.Email,
                Parent: result.Pai,
                SoftDelete: result.Desativo,
              };
              ViewModelUtilsService.showPlanSelectionModal(data);
              showLoader.close();

            });
          }
        }
        break;
      default:
        {
          ClipBoardCopy(params.value);
        }
        break;
    }
    //UpdateSession();
  }

  function setSession(id) {
    sessionStorage.setItem("lastClickedRow", id);
    SessionStorageUtilsService.setGridObject(
      "AllPhoneLines",
      vm.gridOptions,
      vm.filterText
    );
  }

  function ResetESIM(phone){
    FoneclubeService.resetESIM(phone).then(function (result) {
      DialogFactory.showMessageDialog({
          mensagem: "Resetted ICCID: " + result.iccid + " PDF: " + result.esim_pdf,
      });
    });
  }

  function toggleModal() {
    vm.isOpen = !vm.isOpen;
  }

  function UpdateSession() {
    var session = SessionStorageUtilsService.getSession("AllPhoneLines");
    if (session != null) {
      var ss = JSON.parse(session);
      vm.filterText = ss.FilterText;
      //vm.gridOptions.api.setSortModel(JSON.parse(ss.SortModel));
      vm.gridOptions.columnApi.applyColumnState({
        state: ss.ColumnState,
        applyOrder: true,
      });
    }
    let rowData = [];
    vm.gridOptions.api.forEachNode((node) => rowData.push(node.data));
    let IDofRowToSelect = sessionStorage.getItem("lastClickedRow");

    var index = rowData.findIndex((x) => x.Id == IDofRowToSelect);

    vm.gridOptions.api.getDisplayedRowAtIndex(index).setSelected(true);
    vm.gridOptions.api.ensureIndexVisible(index, "middle");
  }

  function UpdateSelectedData(data, phone) {
    FoneclubeService.postAllPhoneLinesAction(data).then(function (result) {
      let row = vm.gridOptions.api.getRowNode(data.Id);
      var allphonelines =
        sessionStorage.getItem("allphonelines") == null
          ? null
          : LZString.decompress(sessionStorage.getItem("allphonelines"));
      var data1 = JSON.parse(allphonelines);
      var index = data1.indexOf(data1.filter((v) => v.Id == data.Id)[0]);
      if (index >= 0) {
        switch (data.key) {
          case "ClienteAtivo_FC":
            data1[index].ClienteAtivo_FC = data.value == "false" ? "T" : "F";
            break;
          case "Ativa":
            data1[index].Ativa = data.value == "true" ? "T" : "F";
            break;
          case "RecAutFCFlag":
            data1[index].RecAutFCFlag = data.value == "true" ? true : false;
            break;
        }
      }
      var str = JSON.stringify(data1);
      sessionStorage.setItem("allphonelines", LZString.compress(str));
      vm.gridOptions.api.setRowData(data1);
      vm.gridOptions.api.setQuickFilter(vm.filterText);
      getAgGridState();
    });
  }

  function BlockUnlockLine(value, custId, nodeId, custName, linha) {
    if (value == "A") {
      DialogFactory.dialogConfirm({
        titulo: "Bloqueio de linhas",
        mensagem:
          "<span>Deseja bloquear <strong>TODAS</strong> as linhas do Cliente ou apenas a linha selecionada" +
          custName +
          "</span>",
        btn1: "TODAS",
        btn2: "Selecionado",
      }).then(function (result) {
        if (result == 0) {
          DialogFactory.dialogConfirm({
            titulo: "Bloqueio de linhas",
            mensagem:
              "<span>Deseja bloquear <strong>TODAS</strong> as linhas do " +
              custName +
              "</span>",
            btn1: "SIM",
            btn2: "Temporariamente",
          }).then(function (result) {
            if (!result) {
              DialogFactory.dialogConfirm({
                titulo: "Bloqueio de linhas",
                mensagem: "Tem Certeza",
                btn1: "SIM",
                btn2: "NÃO",
              }).then(function (result) {
                var showLoader = DialogFactory.showLoader(
                  "Um momento estamos bloqueando as linhas."
                );
                if (!result) {
                  var data = {
                    PersonId: custId,
                  };
                  FoneclubeService.permanentBlockLineForCustomer(data).then(
                    function (result) {
                      if (result != null) {
                        showLoader.close();
                        var resDisplay = "";
                        for (var ir = 0; ir < result.length; ir++) {
                          resDisplay +=
                            "Linha: " +
                            result[ir].Linha +
                            " Status: " +
                            result[ir].BlockLineResponse.mensagem +
                            "<br/>";
                        }

                        ViewModelUtilsService.showConfirmDialog(
                          "Success!",
                          resDisplay
                        ).then(function (confirm) {
                          if (confirm) {
                            refreshPage();
                          } else {
                          }
                        });
                      } else {
                        DialogFactory.showMessageDialog({
                          mensagem: "Error occured: " + result,
                        });
                      }
                    },
                    function (error) {
                      showLoader.close();
                      DialogFactory.showMessageDialog({
                        mensagem: "Error occured: " + error,
                      });
                    }
                  );
                } else showLoader.close();
              });
            }
          });
        } else {
          var showLoader = DialogFactory.showLoader(
            "Um momento estamos bloqueando as linhas."
          );
          var data = { numero: linha };
          FoneclubeService.permanentBlockLine(data).then(
            function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay =
                  "Linha: " + linha + " Status: " + result.mensagem + "<br/>";

                ViewModelUtilsService.showConfirmDialog(
                  "Success!",
                  resDisplay
                ).then(function (confirm) {
                  if (confirm) {
                    refreshPage();
                  } else {
                  }
                });
              } else {
                DialogFactory.showMessageDialog({
                  mensagem: "Error occured: " + result,
                });
              }
            },
            function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({
                mensagem: "Error occured: " + error,
              });
            }
          );
        }
      });
    } else {
      DialogFactory.dialogConfirm({
        titulo: "Desbloqueio de linha",
        mensagem:
          "<span>Deseja desbloquear <strong>TODAS</strong> as linhas de Cliente ou apenas a linha selecionada" +
          custName +
          "</span>",
        btn1: "TODAS",
        btn2: "Selecionado",
      }).then(function (result) {
        if (result == 0) {
          DialogFactory.dialogConfirm({
            titulo: "Desbloqueio de linha",
            mensagem:
              "<span>Deseja desbloquear <strong>TODOS</strong> de acordo com as linhas do " +
              custName +
              "</span>",
            btn1: "SIM",
            btn2: "Temporariamente",
          }).then(function (result) {
            if (!result) {
              DialogFactory.dialogConfirm({
                titulo: "Desbloqueio de linhas",
                mensagem: "Tem Certeza",
                btn1: "SIM",
                btn2: "NÃO",
              }).then(function (result) {
                if (!result) {
                  var showLoader = DialogFactory.showLoader(
                    "Um momento estamos desbloqueando as linhas."
                  );
                  var data = {
                    PersonId: custId,
                  };
                  FoneclubeService.permanentUnBlockLineForCustomer(data).then(
                    function (result) {
                      if (result != null) {
                        showLoader.close();
                        var resDisplay = "";
                        for (var ir = 0; ir < result.length; ir++) {
                          resDisplay +=
                            "Linha: " +
                            result[ir].Linha +
                            " Status: " +
                            result[ir].BlockLineResponse.mensagem +
                            "<br/>";
                        }

                        ViewModelUtilsService.showConfirmDialog(
                          "Success!",
                          resDisplay
                        ).then(function (confirm) {
                          if (confirm) {
                            refreshPage();
                          } else {
                          }
                        });
                      } else {
                        DialogFactory.showMessageDialog({
                          mensagem: "Error occured: " + result,
                        });
                      }
                    },
                    function (error) {
                      showLoader.close();
                      DialogFactory.showMessageDialog({
                        mensagem: "Error occured: " + error,
                      });
                    }
                  );
                }
              });
            }
          });
        } else {
          var showLoader = DialogFactory.showLoader(
            "Um momento estamos desbloqueando as linhas."
          );
          var data = { numero: linha };
          FoneclubeService.permanentUnBlockLine(data).then(
            function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay =
                  "Linha: " + linha + " Status: " + result.mensagem + "<br/>";

                ViewModelUtilsService.showConfirmDialog(
                  "Success!",
                  resDisplay
                ).then(function (confirm) {
                  if (confirm) {
                    refreshPage();
                  } else {
                  }
                });
              } else {
                DialogFactory.showMessageDialog({
                  mensagem: "Error occured: " + result,
                });
              }
            },
            function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({
                mensagem: "Error occured: " + error,
              });
            }
          );
        }
      });
    }
  }

  function StringComparator(valueA, valueB) {
    const valueALower = valueA ? valueA.toLowerCase().trim() : "";
    const valueBLower = valueB ? valueB.toLowerCase().trim() : "";
    return valueALower.localeCompare(valueBLower, "en", { numeric: true });
  }
  function DateComparator(valueA, valueB) {
    var defDate = new Date(1900, 01, 01);
    valueA = valueA == "" ? defDate : new Date(valueA);
    valueB = valueB == "" ? defDate : new Date(valueB);
    if (valueA == valueB) return 0;
    return valueA > valueB ? 1 : -1;
  }

  function openChargeSummary(cpf) {
    var showLoader = DialogFactory.showLoader(
      "Aguarde enquanto obtemos o histórico do cliente"
    );
    FoneclubeService.getCustomerByCPF(
      UtilsService.clearDocumentNumber(cpf)
    ).then(function (result) {
      ViewModelUtilsService.showModalCustomer(result);
      showLoader.close()
    });
    showLoader.close()
  }

  function openCustomerEdit(cpf) {
    FoneclubeService.getCustomerByCPF(
      UtilsService.clearDocumentNumber(cpf)
    ).then(function (result) {
      result.view = 2;
      FlowManagerService.changeEdicaoView(result);
    });
  }

  function openWhatsApp(cpf) {
    var showLoader = DialogFactory.showLoader(
      "Aguarde enquanto obtemos os dados do cliente"
    );
    FoneclubeService.getCustomerByCPF(
      UtilsService.clearDocumentNumber(cpf)
    ).then(function (result) {
      ViewModelUtilsService.showModalReport(result);
      showLoader.close()
    });
    showLoader.close()
  }


  function ClipBoardCopy(text_to_share) {
    // create temp element
    var copyElement = document.createElement("pre");
    copyElement.appendChild(document.createTextNode(text_to_share));
    copyElement.id = "tempCopyToClipboard";
    angular.element(document.body.append(copyElement));
    // select the text
    var range = document.createRange();
    range.selectNode(copyElement);
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range);
    // copy & cleanup
    document.execCommand("copy");
    window.getSelection().removeAllRanges();
    copyElement.remove();
  }

  function clearFilter() {
    vm.filterText = "";
    sessionStorage.setItem("searchText", vm.filterText);
    vm.gridOptions.api.setQuickFilter(null);
    vm.gridOptions.api.forEachNodeAfterFilter((node) => {
      // select the node
      node.setSelected(false);
    });
  }

  function CustomCombobox(params) {
    //Find RowIndex
    var rowIndex = params.rowIndex;
    //FindColoumn Name
    var Column = params.eGridCell.attributes.colId;
    //FindGridData
    var WeldGridData = $scope.gridOptions.rowData;
    //create select element using javascript
    var eSelect = document.createElement("select");
    //Set attributes
    eSelect.setAttribute("class", "custom-select form-control");
    eSelect.setAttribute("style", "padding:0px");
    eSelect.setAttribute("name", params.colDef.field);
    eSelect.setAttribute("id", params.colDef.field + "_" + rowIndex);
    //get the value of the select option
    var value = params.data.CompanyID;
    //create the default option of the select element
    var eOption = document.createElement("option");
    eOption.text = "Select";
    eOption.value = "";
    eSelect.appendChild(eOption);
    if (params.colDef.field == "Propriedade") {
      CompanyName = $scope.CompanyList;
      var companyid = params.data.CompanyID;
      var eOptionVal = document.createElement("option");
      //Statical set data in grid ComboBox
      eOptionVal.text = "Angra";
      eOptionVal.value = 1;
      eSelect.appendChild(eOptionVal);
      var eOption = document.createElement("option");
      eOption.text = "Navcreation";
      eOption.value = "2";
      eSelect.appendChild(eOption);
    }
    return eSelect;
  }


  function onQuickFilterChanged() {
    sessionStorage.setItem("searchText", vm.filterText);
    var filterText = vm.filterText
      .replace("(", "")
      .replace(")", "")
      .replaceAll(" ", "")
      .replace("-", "");
    vm.filterText = isNaN(filterText) ? vm.filterText : filterText;
    vm.gridOptions.api.setQuickFilter(vm.filterText);
    let IDofRowToSelect = sessionStorage.getItem("lastClickedRow");

    const allLines = JSON.parse(
      LZString.decompress(sessionStorage.getItem("allphonelines"))
    );

    vm.resultText =
      vm.gridOptions.api.getDisplayedRowCount() +
      " of " +
      allLines.length +
      " items";


    let rowData = [];
    vm.gridOptions.api.forEachNodeAfterFilterAndSort((node) =>
      rowData.push(node.data)
    );

    vm.gridOptions.api.forEachNode((node) => {
      node.setSelected(node.data.Id == IDofRowToSelect);
      if (node.data.Id == IDofRowToSelect) {
        vm.gridOptions.api.ensureIndexVisible(node.rowIndex, "middle");
      }
    });
  }

  function refreshPage() {
    vm.loading = true;
    init();
  }

  function onClipBoardSuccess(event) {
    //debugger;
    vm.clipBoardCopiedText = event.text;
  }

  function pasteCliboardText(event) {
    //debugger;
    vm.filterText = vm.clipBoardCopiedText;
    var $activeElement = angular.element(
      document.getElementById("quickFilter")
    );
    $activeElement.attr("focused", "yes"); // Example usage
    onQuickFilterChanged();
  }

  function addContelLineManually() {
    var filterText = vm.filterText
      .replace("(", "")
      .replace(")", "")
      .replaceAll(" ", "")
      .replace("-", "");
    if (!isNaN(filterText)) {
      FoneclubeService.addContelLineManual(filterText).then(function (result) {
        if (result != null) {
          DialogFactory.showMessageDialog({
            mensagem:
              "Line " + filterText + "added successfully to WebFC " + error,
          });
        } else {
          DialogFactory.showMessageDialog({
            mensagem: "Line " + filterText + "not exists in Contel" + error,
          });
        }
      });
    }
  }

  async function getFromSessionStorage(key) {
    let item = sessionStorage.getItem(key);
    return item == null ? null : LZString.decompress(item);
  }

  function setToSessionStorage(key, value) {
    let str = LZString.compress(JSON.stringify(value));
    sessionStorage.setItem(key, str);
  }

  async function init() {

    let customers = await getFromSessionStorage("customers");
    if (!customers) {
      LoadMainGridInBackground();
    }

    let agGridStates = await FoneclubeService.getAgGridStates("AllPhoneLines");
    if (agGridStates != null) {
      vm.agGridStates = agGridStates;
      let default1 = agGridStates.find((x) => x.IsDefault == true);
      if (default1) {
        vm.defaultGridState = default1;
      }
    }

    let plansById = await FoneclubeService.getPlansById(4);
    vm.plansAll = plansById;
    vm.plans = plansById.map((x) => x.Description);

    let allphonelines = await getFromSessionStorage("allphonelines");
    if (allphonelines) {
      let parsedData = JSON.parse(allphonelines);
      vm.resultText = `${parsedData.length} of ${parsedData.length} items`;
      vm.gridOptions.api.setRowData(parsedData);
      getAgGridState();
      refreshGridOptions();
      let IDofRowToSelect = sessionStorage.getItem("lastClickedRow");
      vm.gridOptions.api.forEachNode((node) => {
        node.setSelected(node.data.Id == IDofRowToSelect);
        if (node.data.Id == IDofRowToSelect) {
          vm.gridOptions.api.ensureIndexVisible(node.rowIndex, "middle");
        }
      });
    }

    let newData = await FoneclubeService.getAllPhoneLinesNew();

    let oldData = await getFromSessionStorage("allphonelines");
    if (JSON.stringify(oldData) !== JSON.stringify(newData)) {
      setToSessionStorage("allphonelines", newData);
      vm.gridOptions.api.setRowData(newData);
      vm.resultText = `${newData.length} of ${newData.length} items`;
      getAgGridState();
      refreshGridOptions();

      vm.loading = false;
    }
    vm.loading = false;
    onlyActive();

  }

  function LoadMainGridInBackground() {
    FoneclubeService.getClientDashboardData(vm.month, vm.year, 0).then(
      function (res) {
        var data = res[0];
        var result = res[1];

        var vmcustomers = [];
        for (var i in result) {
          let c = result[i];
          const customer = data.find((d) => d.Id == c.Id);
          if (customer) {
            c.fullData = customer;
            // if(customer.Desativo == undefined) {
            //     vm.customers[i].fullData.Desativo = false;
            // }
            c.allChargingsCanceled = false;

            for (var o in c.ChargingValidity) {
              c.ChargingValidity[o].display = true;
            }
            vmcustomers.push(c);
          } else {
            //c.fullData = {};
          }
        }
        var str = JSON.stringify(vmcustomers);
        sessionStorage.setItem("customers", LZString.compress(str));
      }
    );


  }

  function exportToExcel() {
    var params = {
      skipHeader: false,
      skipFooters: true,
      skipGroups: true,
      fileName: "export.csv",
    };
    var csvContent = vm.gridOptions.api.getDataAsCsv(params);
    let hiddenElement = document.createElement("a");
    let csvData = new Blob([csvContent], { type: "text/csv" });
    let csvUrl = URL.createObjectURL(csvData);
    hiddenElement.href = csvUrl;
    hiddenElement.target = "_blank";
    hiddenElement.download = "AllPhoneLines.csv";
    hiddenElement.click();
  }

  function saveState() {
    var retVal = prompt("Enter save state name : ", "state name here");
    var saveStateData = {
      intId: -1,
      txtStateName: retVal,
      txtAgidName: "AllPhoneLines",
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel()),
    };

    if (retVal != "null" && retVal != null) {
      FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
        alert("Saved successfully");
        FoneclubeService.getAgGridStates("AllPhoneLines").then(function (
          result
        ) {
          if (result != null) vm.agGridStates = result;
          var default1 = result.find((x) => x.IsDefault == true);
          if (default1) {
            vm.defaultGridState = default1;
          }
        });
      });
    }
  }

  function updateState() {
    var retVal = prompt(
      "Enter save state name to update: ",
      vm.defaultGridState.txtStateName
    );
    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtStateName: retVal,
      txtAgidName: "AllPhoneLines",
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel()),
    };
    FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
      alert("Updated successfully");
    });
  }

  function deleteState() {
    ViewModelUtilsService.showConfirmDialog(
      "Atenção!",
      "Are you sure, you want to delete?"
    ).then(function (confirm) {
      if (confirm) {
        var deleteStateData = {
          intId: vm.defaultGridState.intId,
          txtAgidName: "AllPhoneLines",
        };
        FoneclubeService.deleteAgGridState(deleteStateData).then(function (
          result
        ) {
          alert("Deleted successfully");
        });
      }
    });
  }

  function getAgGridState(stateName) {
    var res = vm.agGridStates.find(
      (x) => x.txtStateName == vm.defaultGridState.txtStateName
    );
    if (
      res != null &&
      res.txtFilterModel != undefined &&
      res.txtColumnState != undefined
    ) {
      vm.gridOptions.api.setFilterModel(JSON.parse(res.txtFilterModel));
      vm.gridOptions.columnApi.setColumnState(JSON.parse(res.txtColumnState));
      if (res.txtSortModel != "{}")
        vm.gridOptions.api.setSortModel(JSON.parse(res.txtSortModel));
    }
    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtAgidName: "AllPhoneLines",
    };
    FoneclubeService.updateDefaultGridState(saveStateData).then(function (
      result
    ) { });
  }

  function addNewLine() {
    ViewModelUtilsService.showModalAddNewPhoneLinePopup();
  }

  function importContelTopupHistory() {
    ViewModelUtilsService.showContelTopupHistorTemplate();
  }

  function mobileCheck() {
    let check = false;
    (function (a) {
      if (
        /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
          a
        ) ||
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
          a.substr(0, 4)
        )
      )
        check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  }
}

AllPhoneLinesNewController.$inject = [
  "$scope",
  "$interval",
  "FoneclubeService",
  "DialogFactory",
  "UtilsService",
  "ViewModelUtilsService",
  "FlowManagerService",
  "SessionStorageUtilsService",
];

(function () {
  'use strict';

  angular.module('foneClub').controller('TopupHistoryModalController', TopupHistoryModalController);

  TopupHistoryModalController.inject = ['ViewModelUtilsService',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService',
    '$stateParams', '$filter'];

  function TopupHistoryModalController(ViewModelUtilsService,
    FoneclubeService,
    DialogFactory,
    UtilsService,
    $stateParams, $filter) {
    var vm = this;
    vm.getSaldo = getSaldo;
    vm.OpenChargeHistory = OpenChargeHistory;
    vm.OpenWhatsApp = OpenWhatsApp;
    vm.showAllCheck = showAllCheck;

    vm.personName = "";
    vm.currentSaldo = 0;
    vm.personCPF = "";
    vm.personTitle = "";
    vm.personDoc = "";
    vm.contelLine = {};
    vm.blockedColor = false;
    vm.fimColor = false;
    vm.cancelColor = false;
    vm.history = {};
    vm.history1 = {};
    vm.gridWidth = ($(window).width() - 20) + "px";
    vm.gridHeight = 300;
    vm.selectedLine = ViewModelUtilsService.modalData;
    vm.showAll = false;




    vm.gridOptions = {
      columnDefs: [
        {
          field: 'DataRecarga', headerName: 'DATA RECARGA', width: 200, filterParams: filterDateParams, comparator: DateComparatorHistory, filter: "agDateColumnFilter",
          cellRenderer: function (params) {
            return new Date(params.value).toLocaleDateString('pt-Br', { day: '2-digit', month: 'short', year: "numeric" });
          }
        },
        { field: 'Plano', headerName: 'PLANO', width: 200 },
        { field: 'FormaPagto', headerName: 'FORMA PAGAMENTO', width: 250 },
        { field: 'Solicitante', headerName: 'Solicitante', width: 250 }
      ],
      defaultColDef: {
        //flex: 1,
        sortable: true,
        filter: true,
        resizable: true
      },
      singleClickEdit: true,
      enableCellTextSelection: true,
      autoSizeColumns: true,
      rowHeight: 30,
      headerHeight: 120,
      onCellClicked: onCellClicked,
      onGridReady: function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        bindAgGrid(vm.history);
      }
    }




    vm.gridOptions1 = {
      columnDefs: [
        {
          field: 'DeductedDate', headerName: 'DATA', width: 200,
          filterParams: filterDateParams, comparator: DateComparatorHistory, filter: "agDateColumnFilter",

        },
        { field: 'Category', headerName: 'Categoria', width: 200 },
        { field: 'AmountDeducted', headerName: 'VALOR', width: 250 },
        { field: 'Phone', headerName: 'Linha', width: 250 },
        { field: 'Plan', headerName: 'Plano', width: 250 }
      ],
      defaultColDef: {
        //flex: 1,
        sortable: true,
        filter: true,
        resizable: true
      },
      singleClickEdit: true,
      enableCellTextSelection: true,
      autoSizeColumns: true,
      rowHeight: 30,
      headerHeight: 120,
      onCellClicked: onCellClicked,
      onGridReady: function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        bindAgGrid1(vm.history1);
      }
    }

    function bindAgGrid(data) {
      var rowData = convertToViewModel(data);
      if (vm.gridOptions.api) {
        vm.gridOptions.api.setRowData(rowData);
      }
    }

    function convertToViewModel(data) {
      var templateDataList = [];
      for (var i = 0; i < data.length; i++) {
        var datamodel = data[i];
        templateDataList.push({
          'DataRecarga': datamodel.data_recarga,
          'Plano': datamodel.plano,
          'FormaPagto': datamodel.formaPagto,
          'Solicitante': datamodel.solicitado_por
        });
      }
      return templateDataList;
    }

    function bindAgGrid1(data) {
      FoneclubeService.getMMHistory().then(function (result) {
        if (result.Status) {
          vm.currentSaldo = result.Saldo;
          var rowData = convertToViewModel1(result.History);
          if (vm.gridOptions1.api) {
            vm.gridOptions1.api.setRowData(rowData);
          }
        }
      });
    }

    function convertToViewModel1(data) {
      var templateDataList = [];
      for (var i = 0; i < data.length; i++) {
        var datamodel = data[i];
        templateDataList.push({
          'AmountDeducted': datamodel.AmountDeducted,
          'Category': datamodel.Category,
          'DeductedDate': datamodel.DeductedDate,
          'Phone': datamodel.Phone,
          'Plan': datamodel.Plan
        });
      }
      return templateDataList;
    }
    init();


    function init() {
      vm.personName = vm.selectedLine.Person.Name;
      vm.personCPF = vm.selectedLine.Person.DocumentNumber;
      if (vm.selectedLine.ContelLineData != null) {
        vm.selectedLine.ContelLineData.data_ativacao = vm.selectedLine.ContelLineData.data_ativacao == null ? "-" : moment(vm.selectedLine.ContelLineData.data_ativacao, "YY.MM.DD 00:00:00").format("YYYY.MM.DD 00:00:00");
        vm.selectedLine.ContelLineData.bloqueada = vm.selectedLine.ContelLineData.bloqueada != null && vm.selectedLine.ContelLineData.bloqueada.length > 10 ? moment(vm.selectedLine.ContelLineData.bloqueada, "YY.MM.DD 00:00:00").toDate().toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: "numeric" }) : vm.selectedLine.ContelLineData.bloqueada;
        vm.selectedLine.ContelLineData.data_renovacao = vm.selectedLine.ContelLineData.data_renovacao == null ? "-" : moment(vm.selectedLine.ContelLineData.data_renovacao, "DD/MM/YYYY").format("YY.MM.DD 00:00:00")
        vm.selectedLine.ContelLineData.data_cancelamento_linha = vm.selectedLine.ContelLineData.data_cancelamento_linha == null ? "-" : moment(vm.selectedLine.ContelLineData.data_cancelamento_linha, "YY.MM.DD 00:00:00").format("YY.MM.DD 00:00:00");
        vm.selectedLine.ContelLineData.data_fim_plano = vm.selectedLine.ContelLineData.data_fim_plano == null ? "-" : moment(vm.selectedLine.ContelLineData.data_fim_plano, "YY.MM.DD 00:00:00").format("YY.MM.DD 00:00:00");
        vm.contelLine = vm.selectedLine.ContelLineData;
        vm.personTitle = vm.selectedLine.ContelLineData.titular;
        vm.personDoc = vm.selectedLine.ContelLineData.documento_titular;
        vm.blockedColor = vm.selectedLine.ContelLineData.bloqueada != null && vm.selectedLine.ContelLineData.bloqueada.length > 10 ? true : false;
        var fimdate = vm.selectedLine.ContelLineData.data_fim_plano != null ? moment(vm.selectedLine.ContelLineData.data_fim_plano) : null;
        var canceldate = vm.selectedLine.ContelLineData.data_cancelamento_linha != null ? moment(vm.selectedLine.ContelLineData.data_cancelamento_linha, "YY.MM.DD 00:00:00") : null;

        vm.fimColor = fimdate != null ? fimdate.diff(moment(new Date(), "DD/MM/YYYY"), 'days') <= 5 ? true : false : false;
        vm.cancelColor = canceldate != null ? canceldate.diff(moment(new Date(), "DD/MM/YYYY"), 'days') <= 30 ? true : false : false;

      }
      if (vm.selectedLine.TopUpHistoryData != null && vm.selectedLine.TopUpHistoryData.historico != null && vm.selectedLine.TopUpHistoryData.historico.length > 0) {
        vm.history = vm.selectedLine.TopUpHistoryData.historico;
      }
      else {
        vm.history = [];
      }
    }

    function onCellClicked(params) {
      UtilsService.clipBoardCopy(params.value);
    }

    function getSaldo(data) {
      if (data == undefined)
        return "";
      return parseFloat(data / 1024).toFixed(1)
    }

    function OpenChargeHistory(cpf) {
      vm.showAlert = DialogFactory.showLoader("Por favor, aguarde...");
      FoneclubeService.getCustomerByCPF(cpf).then(function (result) {
        vm.showAlert.close();
        ViewModelUtilsService.showModalCustomer(result);
      });
    }

    function OpenWhatsApp(cpf) {
      vm.showAlert = DialogFactory.showLoader("Por favor, aguarde...");
      FoneclubeService.getCustomerByCPF(cpf).then(function (result) {
        vm.showAlert.close();
        ViewModelUtilsService.showModalReport(result);
      });
    }

    function DateComparatorHistory(valueA, valueB) {
      var defDate = new Date(1900, 0o1, 0o1);
      valueA = valueA == "" ? defDate : new Date(valueA);
      valueB = valueB == "" ? defDate : new Date(valueB);
      if (valueA == valueB) {
        return 0;
      }
      return valueA > valueB ? 1 : -1;
    }

    var filterDateParams = {
      comparator: function (filterLocalDateAtMidnight, cellValue) {
        var dateAsString = new Date(cellValue);
        if (dateAsString == null) return -1;

        if (dateAsString < filterLocalDateAtMidnight) {
          return -1;
        }

        if (dateAsString > filterLocalDateAtMidnight) {
          return 1;
        }
      },
      browserDatePicker: true,
      minValidYear: 2000,
      filterOptions: [
        "lessThan",
        {
          displayKey: "lessThanWithNulls",
          displayName: "Less Than with Nulls",
          predicate: ([filterValue], cellValue) =>
            cellValue == null || cellValue < filterValue,
        },
        "greaterThan",
        {
          displayKey: "greaterThanWithNulls",
          displayName: "Greater Than with Nulls",
          predicate: ([filterValue], cellValue) =>
            cellValue == null || cellValue > filterValue,
        },
        {
          displayKey: "betweenExclusive",
          displayName: "Between (Exclusive)",
          predicate: ([fv1, fv2], cellValue) =>
            cellValue == null || (fv1 < cellValue && fv2 > cellValue),
          numberOfInputs: 2,
        },
      ],
    };


    function showAllCheck() {

    }
  }
})();

(function () {
    'use strict';
    
     angular.module('foneClub').controller('PhoneTopupModalController', PhoneTopupModalController);
    
     PhoneTopupModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function PhoneTopupModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            vm.plans = [];
            vm.gridWidth = ($(window).width() -  20) + "px";
            vm.gridHeight = 200;
            vm.selectedRecord = ViewModelUtilsService.modalData;
            const arr1 = ["Selecione Plano"];
            const arr2 = vm.selectedRecord.plans.data.map(x=> x.plano);
            vm.selectedRecord.plans = vm.selectedRecord.plans.data;
            vm.plansDesc = [...arr1,...arr2];
            vm.ExtraClick = false;

            vm.gridOptions = {
            columnDefs: [
              { field: 'linha', width: 120, pinned:'left' },
              { field: 'Recarregar', width:120, 
                editable:true,
                cellEditor: 'agSelectCellEditor',
                cellEditorParams: {
                  values: vm.plansDesc
                } 
              },
              { field: 'plano', width: 80 },
              { field: 'recarga_automatica', width: 130 },
              { field: 'portin', width:80 },
              { field: 'status', width: 100 },
              { field: 'bloqueada', width:100},
              { field: 'restante_dados', width:140 
                ,cellRenderer: function (params) {
                    var dados = Math.ceil(params.value/1024) + " GB";
                    return dados;
                }  
              },
              { field: 'restante_minutos', width:150 },
              { field: 'restante_sms', width:120 },
              { field: 'data_fim_plano', width:120 },
              { field: 'data_renovacao', width:120 },
              { field: 'data_cancelamento_linha', width:120 }
            ],
            defaultColDef: {
              //flex: 1,
              sortable: true,
              filter: true,
              resizable: true
            },
            singleClickEdit:true,
            enableCellTextSelection: true,
            autoSizeColumns: true,
            rowHeight: 50,
            headerHeight: 100,
            onGridReady: function (params) {
			    this.gridApi = params.api;
    		    this.gridColumnApi = params.columnApi;
                init();
            },
            onCellValueChanged: function(event) {
            	if(event!=null && event.data!=null)
                {
                   if(event.data[event.column.colId] != "Select" || event.data[event.column.colId] != "Selecione Plano")
                   {
                        var showLoaderMain = DialogFactory.showLoader("Aguarde enquanto buscamos as informações do contel para a linha que você recarregou");
                        FoneclubeService.getContelDetailByPhone(event.node.data.linha).then(function (result) {
                            showLoaderMain.close();
                            if(result!=null)
                            {
                                DialogFactory.dialogConfirmCustom({ titulo: 'Realizar Recarga?', mensagem: '<span>Linha: <strong>' +event.node.data.linha+ '</strong> <br/> Saldo Atual: <strong>'+ parseFloat(result.restante_dados/1024).toFixed(1) + ' GB</strong><br/>  Plano Atual:<strong>' + event.data[event.column.colId] + '</strong><br/>Data Renovação:<strong>'+result.data_renovacao+'</strong><br/> Fim Plano:<strong>'+result.data_fim_plano+'</strong><br/>Recarga Automatica: <strong>' + (result.recarga_automatica == 'INATIVA' ? 'Desativada' :  result.recarga_automatica_plano )+ '</strong><br/><br/> <strong>Recarregar Plano: '+event.data[event.column.colId] + '?</strong></span>', additionalAction: '<div><input type="checkbox" id="extra" name="extra" ng-click="vm.ExtraClick(this)"/><label for="extra" style="margin:0 0 0 10px"> Extra</label></div><br/><div style="color:red; padding:0 80px 20px">Aviso: so use "extra" se é uma recarga adicional alem do plano mensal e o cliente quer tambem manter a recarga mensal!</div>', btn1: 'Saldo', btn2: 'Link' })
                                .then(function (saldo) {
                                    var extra = document.getElementById("extra").checked;
                                    if(!saldo)
                                    {
                                        if(extra)
                                        {
                                            DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: 'Se marcar como extra será feita tambem a recarga automatica configurada mensalmente. <br/><br/> So clicar em EXTRA se o cliente especificamente relatou que quer dados extra este mês e quer manter o plano recorrente mensal!', btn1: 'Sim', btn2: 'Não' })
                                            .then(function (res) {
                                            if(!res)
                                            {
                                                DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: 'Isso é irreversivel. Tem certeza? ', btn1: 'Sim', btn2: 'Não' })
                                                .then(function (res) {
                                                    if(!res)
                                                    {
                                                        var selectedplan = event.data[event.column.colId];
                                                        debugger;
                                                        var planId = vm.selectedRecord.plans.find(x=>x.plano == selectedplan).id;
                                                        var data = {
                                                            extra: extra,
                                                            planGB: parseInt(event.data[event.column.colId].replace(" GB", "")),
	                                                        metodo_pagamento: "SALDO",
	                                                        numeros: [
                                                                {
                                                                    numero: event.node.data.linha,
                                                                    id_plano: planId
                                                                }
	                                                        ]
                                                        };
                                                        var showLoader = DialogFactory.showLoader("Aguarde, a recarga está em andamento");
                                                        FoneclubeService.addTopupPlan(data).then(function (respo) 
                                                        {
                                                            showLoader.close();
                                                            if(respo != null)
                                                            {
                                                                if(respo.bitWarning)
                                                                {
                                                                    DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Aviso, ja foi feito uma recarga nos ultimos 30.  Por bug da contel, é possivel que não apareça a data da recarga na contel e no historico de recarga mas foi feito recarga no dia '+ moment(respo.LastTopup).format('DD/MMM HH:mm') }); 
                                                                }
                                                                else
                                                                {
                                                                    var title = GetTitleByStatus(respo.Status);
                                                                    var titleColor = GetTitleColorByStatus(respo.Status);
                                                                    var body = GetBodyByStatus(respo);

                                                                    DialogFactory.dialogConfirm(
                                                                    { 
                                                                        title:'<span style="color:'+titleColor+'">' + title + '</span>', mensagem: body, btn1: 'OK', btn2:'exit'
                                                                    }).then(function (link) {
                                                                        sessionStorage.setItem('allphonelines', LZString.compress('none'));
		                                                                location.reload();
                                                                        Utils.clipBoardCopy('topupInfo');
                                                                    });
                                                                }
                                                            }
                                                            else{
                                                                DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Ocorreu um erro recarregar o plano selecionado' }); 
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    else
                                    {
                                        DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: 'Isso é irreversivel. Tem certeza? ', btn1: 'Sim', btn2: 'Não' })
                                        .then(function (res) {
                                        if(!res)
                                        {
                                            var selectedplan = event.data[event.column.colId];
                                            debugger;
                                            var planId = vm.selectedRecord.plans.find(x=>x.plano == selectedplan).id;
                                            var data = {
                                                extra: extra,
                                                planGB: parseInt(event.data[event.column.colId].replace(" GB", "")),
	                                            metodo_pagamento: "SALDO",
	                                            numeros: [
                                                    {
                                                        numero: event.node.data.linha,
                                                        id_plano: planId
                                                    }
	                                            ]
                                            };
                                            var showLoader = DialogFactory.showLoader("Aguarde, a recarga está em andamento");
                                            FoneclubeService.addTopupPlan(data).then(function (respo) 
                                            {
                                                if(respo != null)
                                                {
                                                    showLoader.close();
                                                    if(respo.bitWarning)
                                                    {
                                                        DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Aviso, ja foi feito uma recarga nos ultimos 30.  Por bug da contel, é possivel que não apareça a data da recarga na contel e no historico de recarga mas foi feito recarga no dia '+ moment(respo.LastTopup).format('DD/MMM HH:mm') }); 
                                                    }
                                                    else{
                                                        var title = GetTitleByStatus(respo.Status);
                                                        var titleColor = GetTitleColorByStatus(respo.Status);
                                                        var body = GetBodyByStatus(respo);

                                                        DialogFactory.dialogConfirm(
                                                        { 
                                                            title:'<span style="color:'+titleColor+'">' + title + '</span>', mensagem: body, btn1: 'OK', btn2:'exit'
                                                        }).then(function (link) {
                                                            sessionStorage.setItem('allphonelines', LZString.compress('none'));
		                                                    location.reload();
                                                            Utils.clipBoardCopy('topupInfo');
                                                        });
                                                    }
                                                   
                                                }
                                                else{
                                                    DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Ocorreu um erro recarregar o plano selecionado' }); 
                                                }
                                            }, function(error){
                                                showLoader.close();
                                            });
                                        }
                                        });
                                    }
                                }
                                else
                                {
                                    if(extra)
                                    {
                                        DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: 'Se marcar como extra será feita tambem a recarga automatica configurada mensalmente. <br/><br/> So clicar em EXTRA se o cliente especificamente relatou que quer dados extra este mês e quer manter o plano recorrente mensal!', btn1: 'Sim', btn2: 'Não' })
                                        .then(function (res) {
                                        if(!res)
                                        {
                                            DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: '<span>Deseja criar link de cobrança para acrescentar <br/> plano de dados de <strong>' + event.data[event.column.colId]+ '</strong> <br/>Na linha <strong>'+ event.node.data.linha + '</strong>?</span>', btn1: 'Sim', btn2: 'Não' })
                                            .then(function (link) {
                                            if(!link)
                                            {
                                                var selectedplan = event.data[event.column.colId];
                                                debugger;
                                                var planId = vm.selectedRecord.plans.find(x=>x.plano == selectedplan).id;
                                                var data = {
	                                                metodo_pagamento: "LINK",
                                                    extra: extra,
                                                    planGB: parseInt(event.data[event.column.colId].replace(" GB", "")),
	                                                numeros: [
                                                        {
                                                            numero: event.node.data.linha,
                                                            id_plano: planId
                                                        }
	                                                ]
                                                };
                                                var showLoader = DialogFactory.showLoader("Aguarde, a recarga está em andamento");
                                                FoneclubeService.addTopupPlan(data).then(function (respo) 
                                                {
                                                    if(respo != null)
                                                    {
                                                        showLoader.close();
                                                        if(respo.bitWarning)
                                                        {
                                                            DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Aviso, ja foi feito uma recarga nos ultimos 30.  Por bug da contel, é possivel que não apareça a data da recarga na contel e no historico de recarga mas foi feito recarga no dia '+ moment(respo.LastTopup).format('DD/MMM HH:mm') }); 
                                                        }
                                                        else{
                                                            var title = GetTitleByStatus(respo.Status);
                                                            var titleColor = GetTitleColorByStatus(respo.Status);
                                                            var body = GetBodyByStatus(respo);

                                                            DialogFactory.dialogConfirm(
                                                            { 
                                                                title:'<span style="color:'+titleColor+'">' + title + '</span>', mensagem: body, btn1: 'OK', btn2:'exit'
                                                            }).then(function (link) {
                                                                sessionStorage.setItem('allphonelines', LZString.compress('none'));
		                                                        location.reload();
                                                                Utils.clipBoardCopy('topupInfo');
                                                            });
                                                        }
                                                   
                                                    }
                                                    else{
                                                        DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Ocorreu um erro recarregar o plano selecionado' }); 
                                                    }
                                                }, function(error){
                                                        showLoader.close();
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                            else
                            {
                                DialogFactory.dialogConfirm({ titulo: 'Realizar recarga?', mensagem: '<span>Deseja criar link de cobrança para acrescentar <br/> plano de dados de <strong>' + event.data[event.column.colId]+ '</strong> <br/>Na linha <strong>'+ event.node.data.linha + '</strong>?</span>', btn1: 'Sim', btn2: 'Não' })
                                .then(function (link) {
                                if(!link)
                                {
                                    var selectedplan = event.data[event.column.colId];
                                    debugger;
                                    var planId = vm.selectedRecord.plans.find(x=>x.plano == selectedplan).id;
                                    var data = {
	                                    metodo_pagamento: "LINK",
                                        extra: extra,
                                        planGB: parseInt(event.data[event.column.colId].replace(" GB", "")),
	                                    numeros: [
                                            {
                                                numero: event.node.data.linha,
                                                id_plano: planId
                                            }
	                                    ]
                                    };
                                    FoneclubeService.addTopupPlan(data).then(function (respo) 
                                    {
                                        if(respo != null)
                                        {
                                            showLoader.close();
                                            if(respo.bitWarning)
                                            {
                                                DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Aviso, ja foi feito uma recarga nos ultimos 30.  Por bug da contel, é possivel que não apareça a data da recarga na contel e no historico de recarga mas foi feito recarga no dia '+ moment(respo.LastTopup).format('DD/MMM HH:mm') }); 
                                            }
                                            else{
                                                var title = GetTitleByStatus(respo.Status);
                                                var titleColor = GetTitleColorByStatus(respo.Status);
                                                var body = GetBodyByStatus(respo);

                                                DialogFactory.dialogConfirm(
                                                { 
                                                    title:'<span style="color:'+titleColor+'">' + title + '</span>', mensagem: body, btn1: 'OK', btn2:'exit'
                                                }).then(function (link) {
                                                    sessionStorage.setItem('allphonelines', LZString.compress('none'));
		                                            location.reload();
                                                    Utils.clipBoardCopy('topupInfo');
                                                });
                                            }
                                                   
                                        }
                                        else{
                                            DialogFactory.showMessageDialog({ title:'Falha ao recarregar', mensagem: 'Ocorreu um erro recarregar o plano selecionado' }); 
                                        }
                                    });
                                }
                            });
                            }
                        }
                    });
                    }
                }, function(error){
                    showLoader.close();
                });
            }
            else{
                        
            }
        }
        }
        };
        //init(); 
            
        function init()
        {
            sessionStorage.setItem("ExtraClickOnTopup", null);
             vm.arrData = [vm.selectedRecord.result];
             if (vm.gridOptions.api) {
                vm.gridOptions.api.setRowData(vm.arrData);
             } 
        }

        function GetTitleByStatus(id)
        {
            var title = "";
            switch(id)
            {
                case 1:
                    title = "Recarga realizada com sucesso!";
                    break;
                case 2:
                    title = "Recarga realizada com resalvas!";
                    break;
                case 3:
                    title = "Recarga realizada com resalvas!";
                    break;
                case 4:
                    title = "Recarga realizada com PENDENCIAS!";
                    break;
            }
            return title;
        }

        function GetTitleColorByStatus(id)
        {
            var title = "";
            switch(id)
            {
                case 1:
                    title = "green";
                    break;
                case 2:
                    title = "blue";
                    break;
                case 3:
                    title = "blue";
                    break;
                case 4:
                    title = "red";
                    break;
            }
            return title;
        }

        function GetBodyByStatus(response)
        {
            var statusGB = "";
            var dataFimPlano = "";
            var port = "";
            var topuphtml = "";
            if(response.bitTopupDone)
                topuphtml = "<span style='color:green'>Recarga concluida<strong></span>";
            else
                topuphtml = "<span style='color:red'>Falha na recarga<strong></span>";

            switch(response.Status)
            {
                case 1:
                    {
                        statusGB = '<span>' + response.StatusGB + '</span>';
                        dataFimPlano = '<span>' + response.DataFimPlano + '</span>';
                        port = '<span>' + response.StatusPortabilidade + '</span>';
                    }
                    break;
                case 2:
                case 3:
                case 4:
                    {
                        statusGB = '<span style="color:red;font-weight:bold">' + response.StatusGB + '</span>';
                        dataFimPlano = '<span style="color:red;font-weight:bold">' + response.DataFimPlano + '</span>';
                        port = '<span style="color:red;font-weight:bold">' + response.StatusPortabilidade + '</span>';
                    }
                    break;
            }

            return '<p id="topupInfo">' +topuphtml +' <br/><strong>Linha:</strong>' + response.Linha + '<br/><br/>'+
                '<strong>Fim Plano Pre Recarga:</strong>' + moment(response.PreFimPlano).format('DD/MMM') + '<br/>'+
                '<strong>Fim Plano Pos Recarga:</strong>' + moment(response.PostFimPlano).format('DD/MMM') + '<br/>'+
                '<strong>Status Fim do Plano:</strong>' + dataFimPlano + '<br/><br/>'+
                '<strong>Saldo Pre:</strong>' + response.PreSaldo + '<br/>'+
                '<strong>Saldo Pos:</strong>' + response.PostSaldo + '<br/>'+
                '<strong>GB Adicionados:</strong>' + response.SaldoGBAdded + '<br/>'+
                '<strong>Status GB:</strong>' + statusGB + '<br/><br/>'+
                '<strong>Portabilidade:</strong>' + response.PortIn + '<br/>'+
                '<strong>Status Bonus Portabilidade:</strong>' + port + '<br/></p>';
        }
    }
})();
    
/**
CAUTION, IMPORTANT

All this code is not following patterns. The pattern we trying to follow is: 
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

Please do not reaply any of pattern or the this code, structure or techniques 
used here in this file or the code will not be aproved. 

This page will be organized and refactored but we can not do it now. 
This page represent all that we do not want in code technique and pattern.

For example: 
1. We do not use jquery approach, we use angularJS .
2. We do not need use ajax, we have http service on foneclube.service
3. Avoid use Scope, use vm.

Maybe you will find other pages that are not following fully the desired patterns 
But we have the a lot of samples in the project and especially the guide:
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

 */

angular
  .module('foneClub')
  .controller('AllPhoneNewController', AllPhoneNewController);


function AllPhoneNewController($scope, $interval, FoneclubeService, PagarmeService) {

  var vm = this;
  vm.planOptions;
  vm.result;
  vm.filtroCliente = false;

  $scope.initPageLoad = function () {
    this.AllPhoneData();

    this.BindDropDowns();
  }

  $scope.RemoveService = function (serviceId, phoneId) {
    // 
    var removeUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/service/insert/deactive';
    $.ajax({
      url: removeUrl,
      type: 'POST',
      data: {
        'Id': phoneId,
        'Servicos[0].Id': serviceId
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Service Removed Successfully!');

        $("#phoneService").data("kendoGrid").dataSource.read();
        $("#phoneService").data("kendoGrid").refresh();

        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();


        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $scope.MonthlySubscription();
      }
    });
  }

  $scope.AddNewService = function (personPhoneId) {
    $('#accountServicesModel').modal('show');
    $('#hdnPersonPhoneId').val(personPhoneId);

    var readUrl = FoneclubeService.getAPIUrl() + '/manager/phones/Service/ByPerson?personId=' + personPhoneId;
    $scope.phoneServiceDataSource = new kendo.data.DataSource({
      type: "json",
      transport: { read: readUrl },
      serverPaging: false,
      serverSorting: false
    });
    $scope.phoneServiceGridOptions = {
      dataSource: $scope.phoneServiceDataSource,
      columns: [
        { field: "ServiceName", width: "180px", title: "Service" },
        { field: "ActiveDate", width: "180px", title: "Active Date" },
      ]
    }
  }

  $scope.AllPhoneData = function () {
    SetGridProperties();

    var allServicesUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/services';
    $("#phoneServices").kendoDropDownList({
      dataTextField: "Descricao",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: allServicesUrl,
          }
        }
      }
    });


  }

  $scope.closeCustomers = function () {
    $('#allCustomerModel').hide();
    $('#hdnPhoneNumber').val('');
  }

  $scope.ShowAllCustomers = function (phoneNumber) {
    $('#allCustomerModel').show();
    $('#hdnPhoneNumber').val(phoneNumber);
  }

  $scope.CCID = function (value) {
    debugger
  }

  $scope.showtabInfo = function (tabNumber) {
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');

    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').hide();

    if (tabNumber == 1) {
      $('#btnCustomerTab').addClass('btn-info');
      $('#btnPhoneTab').addClass('btn-default');
      $('#CustomerDetail-Container').show();
    }
    else {
      $('#btnCustomerTab').addClass('btn-default');
      $('#btnPhoneTab').addClass('btn-info');
      $('#PhoneDetail-Container').show();


      $('#hdnRecordId').val(0);
      $('#hdnPersonPhoneId').val(0);
      $('#hdnIsPrecoVip').val();
      $('#hdnEditPhoneNumber').val('');

      $('#phoneDetailTitle').html('Add New Phone');
      $("#AmoutPrecoVip").kendoNumericTextBox({
        value: 0.00
      });

      var url = FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=';
      $("#PhoneNumber").kendoDropDownList({
        optionLabel: "Select",
        dataTextField: "DisplayPhone",
        dataValueField: "CompletePhone",
        dataSource: {
          transport: {
            read: {
              dataType: "json",
              url: url
            }
          }
        }
      });

    }

  }

  $scope.ShowMessage = function (personId) {
    $('#ShowMessageModel').show();
    $('#hdnPersonPhoneId').val(personId);
  }

  $scope.CancelPhone = function () {
    $('#hdnPersonPhoneId').val(0);
    $('#ShowMessageModel').hide();
  }

  $scope.DeactivePhone = function () {

    var personId = $('#hdnPersonPhoneId').val();
    $scope.ActivateDeactivePhone(personId, false);
    $('#ShowMessageModel').hide();
  }

  $scope.ActivateDeactivePhone = function (personId, activate) {
    var url = FoneclubeService.getAPIUrl() + '/profile/Phone/Activate/Deactive?personPhoneId=' + personId + '&activate=' + activate;
    $.ajax({
      url: url,
      type: 'GET',
      dataType: 'json',
      success: function (data) {
        $('#hdnPersonPhoneId').val(0);
        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();
      }
    });
  }

  //---------------------------------------------------------------------------------


  $scope.BindDropDowns = function () {

    //Phone Plans


    $("#CustomerPhonePlanId").kendoDropDownList({
      dataTextField: "Description",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/plans'
          }
        }
      }
    });

    $("#PhonePlanId").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Description",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/plans'
          }
        }
      }
    });
    // All Availabl Phone Numbers
    $("#PhoneNumber").kendoDropDownList({
      optionLabel: "Select",

      dataTextField: "DisplayPhone",
      dataValueField: "CompletePhone",

      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=' + $('#hdnEditPhoneNumber').val()
          }
        }
      }
    });
    //All Phone Plan Extra Services
    //$("#newPhoneOptionId").kendoDropDownList({
    //  optionLabel: "Select",
    //  dataTextField: "Descricao",
    //  dataValueField: "Id",
    //  dataSource: {
    //    transport: {
    //      read: {
    //        dataType: "json",
    //        url: FoneclubeService.getAPIUrl() + '/manager/phones/extra/services',
    //      }
    //    }
    //  }
    //});

    $("#PhoneOperatorId").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Name",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/account/operators',
          }
        }
      }
    });
  }


  $scope.editParentRef = function () {


    $('#parentRefDisplay-container').hide();
    $('#parentRefEdit-container').show();

    $('#editRefButton').hide();
    $('#cancelRefButton').show();
    $('#saveRefButton').show();

    $("#RefParentList").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Name",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/profile/active/customers/parents',
          }
        }
      }
    });

    var parentId = $('#ParentId').html();
    var dropdownlist = $("#RefParentList").data("kendoDropDownList");
    dropdownlist.value(parentId);

  }
  $scope.cancelParentRef = function () {
    $('#parentRefDisplay-container').show();
    $('#parentRefEdit-container').hide();

    $('#editRefButton').show();
    $('#cancelRefButton').hide();
    $('#saveRefButton').hide();

  }
  $scope.saveParentRef = function () {

    var ddParentReference = $("#RefParentList").data("kendoDropDownList");


    var parentId = ddParentReference.value();
    var parentName = ddParentReference.text();
    $.ajax({
      url: FoneclubeService.getAPIUrl() + '/profile/customer/parent/id/insert',
      type: 'Post',
      data: {
        'Id': $('#hdnPersonId').val(),
        'Pai.Id': parentId,
        'Pai.Name': parentName,
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Reference Updated Successfully!');
        $('#ParentName').html(parentName);
        $('#ParentId').html(parentId);
        $scope.cancelParentRef();
      }
    });


  }

  //---------------------------------------------------------------------------------
  $scope.SaveCustomerBasicInfo = function () {
    var url = FoneclubeService.getAPIUrl() + '/profile/customer/SaveBasicInfo';
    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Name': $('#CustomerName').val(),
        'PersonName': $('#CustomerName').val(),
        'Email': $('#CustomerEmail').val(),
        'DocumentNumber': $('#CustomerDocumentNumber').val(),
        'NickName': $('#CustomerNickName').val(),
        'PersonId': $('#hdnPersonId').val(),
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Customer Information Saved Successfully!');
      }
    });

  }

  $scope.SaveService = function (serviceId) {
    /// manager/phones/ 
    var saveUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/service/insert';
    var phoneId = $('#hdnPersonPhoneId').val();
    var serviceId = $('#phoneServices').val();
    $.ajax({
      url: saveUrl,
      type: 'POST',
      data: {
        'Id': phoneId,
        'Servicos[0].Id': serviceId
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Service Successfully Added!');

        $("#phoneService").data("kendoGrid").dataSource.read();
        $("#phoneService").data("kendoGrid").refresh();

        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();


        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $scope.MonthlySubscription();
      }
    });
  }

  $scope.SavePersonPhone = function () {

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Save/PersonPhone';
    var Id = $('#hdnRecordId').val();
    var PersonPhoneId = $('#hdnPersonPhoneId').val();
    var PersonId = $('#hdnPersonId').val();
    var DDNumber;
    var PhoneNumber = $('#PhoneNumber').val();
    var PlanId = $('#PhonePlanId').val();
    var OperatorId = $('#PhoneOperatorId').val();
    //var PlanOptionId = $('#newPhoneOptionId').val();
    var StatusId = $('#hdnStatusId').val();
     
    var AmoutPrecoVip = $('#AmoutPrecoVip').val();

    var newAmoutPrecoVip = 0;

    if (parseInt(AmoutPrecoVip) > 0)
    {
      newAmoutPrecoVip = AmoutPrecoVip * 100;
    }

    var Nickname = $('#PhoneNickName').val();
    var IsActive = true;
    var IsPhoneClube = true;
    var IsPortability = false;
    var IsPrecoVip = $('#hdnIsPrecoVip').val();

    DDNumber = PhoneNumber.substring(0, 2);
    PhoneNumber = PhoneNumber.substring(2, 11);

    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': Id,
        'PersonId': PersonId,
        'PersonPhoneId': PersonPhoneId,
        'DDNumber': DDNumber,
        'PhoneNumber': PhoneNumber,
        'OperatorId': OperatorId,
        'PlanId': PlanId,
        'StatusId': StatusId,
        'AmoutPrecoVip': newAmoutPrecoVip,
        //'PlanOptionId': PlanOptionId,
        'Nickname': Nickname,
        'IsActive': IsActive,
        'IsPhoneClube': IsPhoneClube,
        'IsPortability': IsPortability,
        'IsPrecoVip': IsPrecoVip
      },
      dataType: 'json',
      success: function (data) {
        //Once Record is Saved refresh the Grid
        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $('#PhonePlanId').val("");
        $('#PhoneNumber').val(""); 
        $('#PhoneOperatorId').val("");
        $('#hdnPersonPhoneId').val('');
        $('#PhoneNickName').val(""); 
        $('#AmoutPrecoVip').val("0")
        $scope.BindDropDowns();
        $scope.ShowSystemAlert('Record Saved Successfully!');
      }
    });
  }

  $scope.SaveCustomerToPhone = function (personId) {
     

    var phone = $('#hdnPhoneNumber').val();
    var DDNumber = phone.substring(0, 2);
    var PhoneNumber = phone.substring(2, 11);

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Save/PersonPhone';
    var Id = $('#hdnRecordId').val();
    var PlanId = $('#CustomerPhonePlanId').val();
    var OperatorId = $('#PhoneOperatorId').val();
    //var PlanOptionId = $('#newPhoneOptionId').val();
    var StatusId = $('#hdnStatusId').val();
    var AmoutPrecoVip = $('#AmoutPrecoVip').val();
    var Nickname = $('#PhoneNickName').val();
    var IsActive = true;
    var IsPhoneClube = true;
    var IsPortability = false;
    var IsPrecoVip = $('#hdnIsPrecoVip').val();



    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': Id,
        'PersonId': personId,
        'DDNumber': DDNumber,
        'PhoneNumber': PhoneNumber,
        'OperatorId': OperatorId,
        'PlanId': PlanId,
        'StatusId': StatusId,
        'AmoutPrecoVip': AmoutPrecoVip,
        'PlanOptionId': PlanOptionId,
        'Nickname': Nickname,
        'IsActive': IsActive,
        'IsPhoneClube': IsPhoneClube,
        'IsPortability': IsPortability,
        'IsPrecoVip': IsPrecoVip
      },
      dataType: 'json',
      success: function (data) {
        //Once Record is Saved refresh the Grid
        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();

        $('#allCustomerModel').hide();
        $scope.ShowSystemAlert('Record Saved Successfully!');
      }
    });
  }

  $scope.EditPhoneRecord = function (personPhoneId, phoneNumber, phonePlanId, phoneNickName, phoneOperatorId, amoutPrecoVip) {

    $('#phoneDetailTitle').html('Edit Phone Detail');
    var newAmoutPrecoVip = amoutPrecoVip / 100;

    $("#AmoutPrecoVip").kendoNumericTextBox({
      value: newAmoutPrecoVip
    });

    
    $('#hdnPersonPhoneId').val(personPhoneId); 
    $('#PhoneNickName').val(phoneNickName); 
    $('#hdnEditPhoneNumber').val(phoneNumber);

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=' + phoneNumber;
    $("#PhoneNumber").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "DisplayPhone",
      dataValueField: "CompletePhone",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: url
          }
        }
      }
    });


    var ddPhoneNumber = $("#PhoneNumber").data("kendoDropDownList");
    ddPhoneNumber.value(phoneNumber);

    var ddPhonePlan = $("#PhonePlanId").data("kendoDropDownList");
    ddPhonePlan.value(phonePlanId);


    var ddOperator = $("#PhoneOperatorId").data("kendoDropDownList");
    ddOperator.value(phoneOperatorId);

    //------------------------------------------------------------------------
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');
    $('#btnCustomerTab').addClass('btn-default');
    $('#btnPhoneTab').addClass('btn-info');
    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').show();
    //------------------------------------------------------------------------

  }

  $scope.UpdatePhonePrice = function () {

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Update/Phone/Price';

    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': $('#hdnPersonId').val(),
        'SinglePrice': $('#payableMontlyPrice').val(),
        'DescriptionSinglePrice': $('#lblMonthlySubscription').html(),
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Price has been updated Successfully!');
      }
    });
  }



  //-------------------------------------------------------------------------------------------- 
  $scope.customerGridDataSource = new kendo.data.DataSource({
    type: "json",
    transport: { read: FoneclubeService.getAPIUrl() + '/profile/all/customers?minimal=true' },
    serverPaging: false,
    serverSorting: false
  });
  $scope.customerGridOptions = {
    dataSource: $scope.phoneServiceDataSource,
    sortable: true,
    scrollable: true,
    filterable: {
      mode: "row",
      extra: false,
      operators: {
        string: {
          contains: "Contains",
          startswith: "Starts with",
          eq: "Is equal to",
          neq: "Is not equal to"
        },
        number: {
          eq: "Equal to",
          neq: "Not equal to",
          gte: "Greater Than",
          lte: "Less Than"
        }
      }
    },
    columns: [
      {
        field: "Id", width: "50px", title: '-'
        , template: "<button type='button' ng-click=\"SaveCustomerToPhone('#=Id#')\" class='btn btn-info btn-xs'><i class='fa fa-plus'></i></button>"
        , filterable: { cell: { showOperators: false } }
      },
      { field: "Name", width: "180px", title: "Name", filterable: { cell: { showOperators: false } } },
      { field: "NickName", width: "180px", title: "Nick Name", filterable: { cell: { showOperators: false } } },
      { field: "DocumentNumber", width: "180px", title: "Document Number", filterable: { cell: { showOperators: false } } },
      { field: "Email", width: "180px", title: "Email", filterable: { cell: { showOperators: false } } }
    ]
  }
  //--------------------------------------------------------------------------------------------

  $scope.showCustomerDetail = function (personId) {
    $('#CustomerDetailModel').show();
    $('#hdnPersonId').val(personId);

    //---------------------------------------------------
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');
    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').hide();
    $('#btnCustomerTab').addClass('btn-info');
    $('#btnPhoneTab').addClass('btn-default');
    $('#CustomerDetail-Container').show();

    $('#ParentName').html('');
    $('#CustomerNickName').val('');
    $('#CustomerDocumentNumber').val('');
    $('#CustomerEmail').val('');
    $('#CustomerName').val('');

    //-----------------------------------------------------

    $scope.customerSummary();
    $scope.MonthlySubscription();


    debugger;

    $scope.customerAllPhoneGridGridOptions = {
      dataSource: $scope.customerAllPhoneGridDataSource,
      sortable: true,
      scrollable: true,
      height: 300,
      columns: [

        {
          field: "UsoLinha", width: "50px", title: "-"

          , template: "<button type='button' ng-click=\"EditPhoneRecord('#=PersonPhoneId#','#=CompletePhone#', '#=PlanId#', '#=NickName#','#=OperatorId#', '#=AmoutPrecoVip#')\" class='btn btn-info btn-xs'><i class='fa fa-pencil-square-o'></i></button>"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "UsoLinha", width: "80px", title: "Linha em Uso"
          , template: " # if (UsoLinha == 1) {#  <button class='btn btn-success btn-xs'>sim</button> #}else{# <button class='btn btn-warning btn-xs'>não</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "OperatorId", width: "80px", title: "Operadora Divergente"
          , template: " # if (OperatorId == 1) {#  <button class='btn btn-success btn-xs'>A</button> #}else{# <button class='btn btn-danger btn-xs'>E</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "OperatorName", width: "180px", title: "Plano Operadora 1"
          , template: "#:OperatorName# #:MasterOperatorName#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: true } }
        },
        {
          field: "DisplayPhone", width: "180px", title: "Telefone"
          , template: "#:DisplayPhone#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PhoneServices"
          , width: "180px"
          , title: "Servico da linha"

          , template: function (dataItem) {
            var personPhoneId = dataItem.PersonPhoneId;
            var temp = "<ul class='activeServicesContainer'>";
            if (dataItem.PhoneServices != undefined) {
              for (var i = 0; i < dataItem.PhoneServices.length; i++) {
                var item = dataItem.PhoneServices[i];
                var serviceName = item.ServiceName;
                var serviceId = item.ServiceId;
                temp = temp + "<li class='activeService'>"
                  + "<button class='btn btn-info btn-xs' ng-click='RemoveService(" + serviceId + "," + personPhoneId + ")'>"
                  + serviceName
                  + "<i class='fa fa-times'></i>"
                  + "</button ></li > ";
              }
            }
            temp = temp + "<li class='activeService '><button class='btn btn-success btn-xs'  ng-click='AddNewService(" + personPhoneId + ")'><i class='fa fa-plus'></i></button></li>";
            temp = temp + "</ul>";
            return temp;
          }
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "IsActive", width: "80px", title: "Ativa"
          , template: " # if (IsActive == 1) {#  <button type='button' ng-click='ShowMessage(#=PersonPhoneId#)' class='btn btn-success btn-xs'>On</button> #}else{# <button type='button' ng-click='ActivateDeactivePhone(#=PersonPhoneId#,true)' class='btn btn-danger btn-xs'>Off</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanDescription", width: "120px", title: "Plano Fc"
          , template: "#:PlanDescription#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanCost", width: "120px", title: "Preco Fc"
          , template: "#:DisplayPlanCost#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "AmoutPrecoVip", width: "80px", title: "Preco VIP"
          , template: "#:DisplayAmoutPrecoVip#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "NickName", width: "180px", title: "Apelido"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
      ]

    }
  }



  $scope.hideCustomerDetail = function () {
    $('#CustomerDetailModel').hide();
    $('#hdnPersonId').val(0);
  }
  //--------------------------------------------------------------------------------------------

  $scope.customerSummary = function () {
    // 
    var url = FoneclubeService.getAPIUrl() + '/profile/cliente/id/' + $('#hdnPersonId').val()
    $.ajax({
      url: url,
      type: 'Get',
      dataType: 'json',
      success: function (data) {

        $('#ParentName').html(data.Pai.Name);
        $('#ParentId').html(data.Pai.Id);

        $('#CustomerNickName').val(data.NickName);
        $('#CustomerDocumentNumber').val(data.DocumentNumber);
        $('#CustomerEmail').val(data.Email);
        $('#CustomerName').val(data.Name);
      }
    });
  }

  $scope.ShowSystemAlert = function (msg) {
    $('#Content-Alert').show();
    $('#Content-AlertMessage').html(msg);
    var target = $('#Content-Alert');
    if (target.length) {
      $('html, body').stop().animate({ scrollTop: target.offset().top }, 1000);
    }
    $("#Content-Alert").delay(2000).fadeOut(2000);
  }

  $scope.MonthlySubscription = function () {

    if (parseInt($('#hdnPersonId').val()) == 0)
      return;


    var url = FoneclubeService.getAPIUrl() + '/manager/phones/GetMonthly/Subscription?personId=' + $('#hdnPersonId').val()
    $.ajax({
      url: url,
      type: 'Get',
      dataType: 'json',
      success: function (data) {
        $('#lblMonthlySubscription').html('R$ ' + data);
        $('#hdnMonthlySubscription').html('R$ ' + data);
      }
    });
  }

  function SetGridProperties() {
    var pageHeight = $(window).height() - 110;
    var readUrl = FoneclubeService.getAPIUrl() + '/manager/phones/All/Phones';

    $scope.allphoneDataSource = new kendo.data.DataSource({
      type: "json",
      transport: { 
        read: {
          dataType: "json",
          url: readUrl,
        }
      },
      serverPaging: false,
      serverSorting: false,
      schema: {
        model: {
          fields: {
            // PlanCost: { type: "number" },
            // AmoutPrecoVip: { type: "number" },
            // CalculateAmoutPrecoVip: { type: "number" },
            // CalculatePlanCost: { type: "number" }
            // ,CCID: { type: "string" }
          }
        }
      },

    });

    // console.log('works')
    // debugger;
    //  console.log($scope.allphoneDataSource)

    $scope.allphoneGridOptions = {
      dataSource: $scope.allphoneDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "phone Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false
      },
      reorderable: true,
      resizable: true,
      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: { contains: "Contains" },
          number: { gte: "Greater Than" }

        }
      },
      columns: [
        {
          field: "DisplayUsoLinha", width: "80px", title: "Linha em Uso"
          , template: " # if (UsoLinha == 1) {#  <button class='btn btn-success btn-xs'>sim</button> #}else{# <button class='btn btn-warning btn-xs'>não</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "DisplayOperator", width: "80px", title: "Operadora Divergente"
          , template: " # if (OperatorId == 1) {#  <button class='btn btn-success btn-xs'>A</button> #}else{# <button class='btn btn-danger btn-xs'>E</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "DisplayPlanoOperador", width: "180px", title: "Plano Operadora 3"
          , template: "#:DisplayPlanoOperador#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "CompletePhone", width: "180px", title: "Telefone"
          , template: "#:DisplayPhone#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "CCID", width: "180px", title: "CCID"
          , template: "#:CCID#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "CodigoCliente", width: "180px", title: "Cod. Cliente"
          , template: "#:CodigoCliente#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "RazaoSocial", width: "180px", title: "Razao Social"
          , template: "#:RazaoSocial#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PersonName", width: "180px", title: "Cliente 2"
          , template: "# if( PersonName == '~') {#  <button class='btn btn-success btn-xs' ng-click='ShowAllCustomers(#:CompletePhone#)'><i class='fa fa-plus'></i></button>   #} else {# <div><a ng-click='showCustomerDetail(#:PersonId#)'> #=PersonName# </a></div>  #}# "
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "PhoneServices", width: "180px", title: "Servico da linha"
          , template: function (dataItem) {
            var personPhoneId = dataItem.PersonPhoneId;
            var temp = "<ul class='activeServicesContainer'>";
            if (dataItem.PhoneServices != undefined) {
              for (var i = 0; i < dataItem.PhoneServices.length; i++) {
                var item = dataItem.PhoneServices[i];
                var serviceName = item.ServiceName;
                var serviceId = item.ServiceId;
                temp = temp + "<li class='activeService'>"
                  + "<button class='btn btn-info btn-xs' ng-click='RemoveService(" + serviceId + "," + personPhoneId + ")'>"
                  + serviceName
                  + "<i class='fa fa-times'></i>"
                  + "</button ></li > ";
              }
            }
            temp = temp + "<li class='activeService '><button class='btn btn-success btn-xs'  ng-click='AddNewService(" + personPhoneId + ")'><i class='fa fa-plus'></i></button></li>";
            temp = temp + "</ul>";
            return temp;
          }
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: false
        },


        {
          field: "IsActive", width: "80px", title: "Ativa"
          , template: " # if (IsActive == 1) {#  <button type='button' ng-click='ShowMessage(#=PersonPhoneId#)' class='btn btn-success btn-xs'>On</button> #}else{# <button type='button' ng-click='ActivateDeactivePhone(#=PersonPhoneId#,true)' class='btn btn-danger btn-xs'>Off</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanDescription", width: "120px", title: "Plano Fc"
          , template: "#:PlanDescription#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

        {
          field: "CalculatePlanCost", width: "120px", title: "Preco Fc"
          , template: "#:DisplayPlanCost#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

        {
          field: "CalculateAmoutPrecoVip", width: "80px", title: "Preco VIP"
          , template: "#:DisplayAmoutPrecoVip#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "NickName", width: "180px", title: "Apelido"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
      ]
    }

  }
};

AllPhoneNewController.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

/**
CAUTION, IMPORTANT

All this code is not following patterns. The pattern we trying to follow is: 
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

Please do not reaply any of pattern or the this code, structure or techniques 
used here in this file or the code will not be aproved. 

This page will be organized and refactored but we can not do it now. 
This page represent all that we do not want in code technique and pattern.

For example: 
1. We do not use jquery approach, we use angularJS .
2. We do not need use ajax, we have http service on foneclube.service
3. Avoid use Scope, use vm.

Maybe you will find other pages that are not following fully the desired patterns 
But we have the a lot of samples in the project and especially the guide:
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

 */

angular
  .module('foneClub')
  .controller('AllPhoneLines2NewController', AllPhoneLines2NewController);


function AllPhoneLines2NewController($scope, $interval, FoneclubeService, DialogFactory, UtilsService, ViewModelUtilsService, FlowManagerService, SessionStorageUtilsService) {

  var vm = this;
  vm.isMobile = UtilsService.mobileCheck();
  vm.agGridStates = ["All"];
  vm.filterRenevacode = moment().subtract(1, 'day').format("DD MMMM YYYY");
  vm.filterRenevacoAte = moment().add(30, 'day').format("DD MMMM YYYY");
  vm.filterLinha = "";
  vm.filterClient = "";
  vm.TotalLines = 0;
  vm.TotalValor = "0.00";
  vm.TotalSaldo = "0.00";
  vm.plans = [];
  vm.plansAll = [];
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.defaultGridState = {};
  vm.onQuickFilterChanged = onQuickFilterChanged;
  vm.clearFilter = clearFilter;
  vm.openChargeSummary = openChargeSummary;
  vm.openWhatsApp = openWhatsApp;
  vm.exportToExcel = exportToExcel;
  vm.getAgGridState = getAgGridState;
  vm.saveState = saveState;
  vm.deleteState = deleteState;
  vm.updateState = updateState;
  vm.refreshPage = refreshPage;
  vm.openTopupPopup = openTopupPopup;
  vm.openTopupHistory = openTopupHistory;
  vm.onClipBoardSuccess = onClipBoardSuccess;
  vm.pasteCliboardText = pasteCliboardText;
  vm.BlockUnlockLine = BlockUnlockLine;
  vm.addNewLine = addNewLine;
  vm.filterRecords = filterRecords;

  vm.loading = true;
  vm.clipBoardCopiedText = "";
  vm.filterText = "";
  vm.gridWidth = mobileCheck() ? ($(window).width() - 20) + "px" : "100%";
  vm.gridHeight = $(window).height() - 220;

  const customNumberComparator = (valueA, valueB) => {
    valueA = valueA != null ? valueA.toString() : null;
    valueB = valueB != null ? valueB.toString() : null;
    valueA = (valueA == null || valueA == "" || valueA == "OFF") ? "-1" : valueA.replace(" GB", "").replace(" gb", "").replace(",", "").replace("R$", "");
    valueB = (valueB == null || valueB == "" || valueB == "OFF") ? "-1" : valueB.replace(" GB", "").replace(" gb", "").replace(",", "").replace("R$", "");
    if (parseInt(valueA) == parseInt(valueB)) return 0;
    return (parseInt(valueA) > parseInt(valueB)) ? 1 : -1;
  };

  const filterParamsNumber = {
    filterOptions: [
      {
        displayKey: 'largerThan',
        displayName: 'Larger than',
        test: function (filterValue, cellValue) {
          cellValue = cellValue != null ? cellValue.replace(" GB", "").replace(" gb", "").replace("R$", "").replace("OFF", "") : "-1";
          return parseInt(cellValue) > parseInt(filterValue);
        }
      },
      {
        displayKey: 'smallerThan',
        displayName: 'Smaller than',
        test: function (filterValue, cellValue) {
          cellValue = cellValue != null ? cellValue.replace(" GB", "").replace(" gb", "").replace("R$", "").replace("OFF", "") : "-1"
          return parseInt(cellValue) < parseInt(filterValue);
        }
      },
      'equals',
      'notEqual'
    ]
  };
  // const filterOptions = [
  //   'empty',
  //   {
  //       displayKey: 'blanks',
  //       displayName: 'Blanks',
  //       filterParams: {
  //           suppressAndOrCondition: true
  //         },
  //       test: function (filterValue, cellValue) {
  //           return cellValue == "";
  //       },
  //       hideFilterInput: true,
  //   },
  //   'equals',
  //   'notEqual',
  //   'lessThan',
  //   'lessThanOrEqual',
  //   'greaterThan',
  //   'greaterThanOrEqual',
  //   'inRange'
  // ];
  var filterDateParams = {
    comparator: function (filterLocalDateAtMidnight, cellValue) {
      var dateAsString = new Date(cellValue);
      if (dateAsString == null) return -1;

      if (dateAsString < filterLocalDateAtMidnight) {
        return -1;
      }

      if (dateAsString > filterLocalDateAtMidnight) {
        return 1;
      }
    },
    browserDatePicker: true,
    minValidYear: 2000,
    filterOptions: [
      'lessThan',
      {
        displayKey: 'lessThanWithNulls',
        displayName: 'Less Than with Nulls',
        predicate: ([filterValue], cellValue) => cellValue == null || cellValue < filterValue,
      },
      'greaterThan',
      {
        displayKey: 'greaterThanWithNulls',
        displayName: 'Greater Than with Nulls',
        predicate: ([filterValue], cellValue) => cellValue == null || cellValue > filterValue,
      },
      {
        displayKey: 'betweenExclusive',
        displayName: 'Between (Exclusive)',
        predicate: ([fv1, fv2], cellValue) => cellValue == null || fv1 < cellValue && fv2 > cellValue,
        numberOfInputs: 2,
      }
    ]
  };

  vm.gridOptions = {
    columnDefs: [
      //rowGroup: true,
      { field: 'Id', hide: true },
      // { field: 'IsContelLine', headerName: 'Contel',  width: 80 ,
      //   cellRenderer: function (params) {
      //     if(params.value){
      // 			var cellHtml ='<div class="circle_green"></div>';
      // 			return cellHtml;
      // 		}
      //     else{
      // 			var cellHtml ='<div class="circle_red"></div>';
      // 			return cellHtml;
      //     }
      //   },
      //   filterParams: {
      //     suppressAndOrCondition: true
      //   }
      // },
      {
        field: 'TopUpHistory',
        headerName: 'Top Up History', width: 80,
        cellRenderer: function (params) {
          var cellHtml = '<a ng-click="vm.openTopupPopup(' + params.node.data.PhoneNumber + ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup-history.png" /></a>';
          return cellHtml;
        },
      },
      {
        field: 'TopUp',
        headerName: 'Top Up', width: 80,
        cellRenderer: function (params) {
          var cellHtml = '<a ng-click="vm.openTopupPopup(' + params.node.data.PhoneNumber + ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup.png" /></a>';
          return cellHtml;
        },
      },
      {
        field: 'Ativa',
        width: 80,
        headerName: 'Linha',
        //headerCheckboxSelection: true,
        //headerCheckboxSelectionFilteredOnly: true,
        //checkboxSelection: true,
        cellRenderer: function (params) {
          var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/' + (params.value == "T" ? 'customeron.png' : 'customeroff.png') + '" /></a>';
          return cellHtml;
        },
        editable: false,
        filterParams: {
          suppressAndOrCondition: true
        }
        //filter: false
      },
      {
        field: 'PhoneNumber',
        headerName: 'Linha',
        width: 160,
        filterParams: filterParamsNumber
      },
      { field: 'PortNumber', headerName: 'Port/Line', width: 120 },
      { field: 'Plano_Contel', headerName: 'P. Contel', width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator },
      {
        field: 'Saldo', headerName: 'Saldo GB', width: 80,
        filterParams: filterParamsNumber,
        cellRenderer: function (params) {
          if (params.value != null) {
            return params.value == null ? "" : params.value.replace(" GB", "").replace(" gb", "");
          }
        },
        comparator: customNumberComparator
      },
      {
        field: 'FimPlano', headerName: 'Fim Plano', width: 80, filter: 'agDateColumnFilter', filterParams: filterDateParams,
        comparator: DateComparator
      },
      {
        field: 'Recarga_Automatica', headerName: 'Auto Contel', width: 80,
        cellRenderer: function (params) {
          if (params.value != null) {
            var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' + (params.value == 0 ? 'customeroff.png' : 'customeron.png') + '" /></a>';
            return cellHtml;
          }
        },
      },
      {
        field: 'Cancelation_Date',
        headerName: 'Perde Numero',
        width: 100,
        filter: 'agDateColumnFilter',
        filterParams: filterDateParams,
        comparator: DateComparator,
        cellStyle: function (params) {
          var dataAtual = new Date();
          var dataFimPlano = new Date(params.value);
          var diffEmDias = Math.floor((dataFimPlano - dataAtual) / (1000 * 60 * 60 * 24));

          if (diffEmDias <= 10 && diffEmDias >= 0) {
            return { 'font-weight': 'bold', 'color': 'red' };
          }
          return null;
        },
      },
      {
        field: 'Ativacao',
        headerName: 'Ativação',
        width: 100,
        filter: 'agDateColumnFilter',
        filterParams: filterDateParams,
        comparator: DateComparator,
        cellRenderer: function (params) {
          // Verifica se a data está disponível
          if (params.value) {
            // Converte a data para o formato desejado
            const dataFormatada = convertDate(params.value);

            // Retorna a data formatada
            return dataFormatada;
          }
          return params.value; // Retorna o valor original se não houver data
        },
      },
      {
        field: 'InicioPlano',
        headerName: 'Plano Inicio',
        width: 100,
        filter: 'agDateColumnFilter',
        filterParams: filterDateParams,
        comparator: DateComparator
      },
      {
        field: 'AutoRec',
        headerName: 'Auto-Rec',
        width: 100,
        filter: 'agDateColumnFilter',
        filterParams: filterDateParams,
        comparator: DateComparator
      },
      { field: 'ValorPago', width: 80, headerName: '$ Cob. Contel', filterParams: filterParamsNumber, comparator: customNumberComparator },
      {
        field: 'RecAutFCFlag',
        headerName: 'Rec. FC',
        width: 100,
        cellRenderer: function (params) {
          if (params.value != null) {
            var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' + (params.value == false ? 'customeroff.png' : 'customeron.png') + '" /></a>';
            return cellHtml;
          }
        },
      },
      {
        field: 'RecAutFC',
        headerName: 'Rec. FC Data',
        width: 100,
        filter: 'agDateColumnFilter',
        filterParams: filterDateParams,
        comparator: DateComparator
      },
      {
        field: 'ContelBlockStatus',
        headerName: 'Contel',
        width: 80,
        cellRenderer: function (params) {

          if (params.value == "A") {
            return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ', \'' + params.node.data.Nome_FC + '\')" title="Ativa"  href="javascript:void(0);"><img class="imgUsd link" style="max-width:16px; alt="Ativa" margin-top:10px" src="content/img/phone-green.png" /></a>';
          } else if (params.value == "B") {
            return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ',\'' + params.node.data.Nome_FC + '\')" title="Bloqueada"  style=""><img class="imgUsd link" style="max-width:16px; margin-top:10px" src="content/img/phone-red.png" /></a>';
          }
          else if (params.value == "C") {
            return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ',\'' + params.node.data.Nome_FC + '\')" title="Cancelada"  style=""><img class="imgUsd link" style="max-width:16px; alt="Cancelada" margin-top:10px" src="content/img/phone-black.png" /></a>';
          }
          else {
            return '<div class="circle_red"><a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', \'' + params.node.data.Nome_FC + '\')" href="javascript:void(0);" title="Outras Operadoras" /></div>';
          }

        }
      },
      {
        field: 'ContelStatus',
        headerName: 'Status',
        width: 100,
      },
      ,
      {
        field: 'PortIn',
        headerName: 'Port In',
        width: 100,
      },
      {
        field: 'Bloqueada',
        headerName: 'Bloq.',
        width: 100,
      },
      {
        field: 'Esim',
        headerName: 'Esim',
        width: 100,
        cellRenderer: function (params) {
          return params.value == "SIM" ? "Yes" : "No";
        },
      },
      {
        field: 'UltPagDias',
        headerName: 'Ult. $',
        width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
      },
      {
        field: 'DaysSinceLastTopup',
        headerName: 'Dias ult. Rec.',
        cellRenderer: function (params) {
          if (params.value >= 0)
            return "<div>" + params.value + "</div>";
          else
            return "<div>-</div>";
        },
        width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
      },
      {
        field: 'LastPaidAmount',
        headerName: 'Ult. Pago $',
        width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
      },
      {
        field: 'StatusCob',
        headerName: 'Status $',
        width: 100,
      },
      {
        field: 'ChargeHistory',
        width: 40,
        cellRenderer: function (params) { return "<img class='imgUsd link' src='content/img/usd.jpeg' style='max-width:15px;margin:10px 0px;    '/></a>" }
      },
      {
        field: 'WhatsApp',
        width: 40,
        cellRenderer: function (params) { return "<img class='imgUsd link' src='content/img/message-green.png' style='max-width:15px;   margin:10px 0' /></a>" }
      },
      {
        field: 'ClienteAtivo_FC',
        headerName: 'Cliente',
        width: 100,
        cellRenderer: function (params) {
          var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' + (params.value == "T" ? 'customeron.png' : 'customeroff.png') + '" /></a>';
          return cellHtml;
        },
        filterParams: {
          suppressAndOrCondition: true
        }
      },
      { field: 'Nome_FC', editable: false, singleClickEdit: false, width: 250 },
      { field: 'Apelido', editable: true, width: 150, cellEditor: 'agLargeTextCellEditor' },
      { field: 'ICCID', editable: true },
      { field: 'Propriedade', headerName: 'Dono', width: 120 },
      { field: 'CPF_FC', headerName: 'CPF FC', width: 120 },
      { field: 'CPF_DR', headerName: 'CPF Dr', width: 120 },
      { field: 'DocContel', headerName: 'Doc Contel', width: 120 },
      { field: 'Nome_DR', headerName: 'Nome Dr', width: 150 },
      { field: 'LinhaSemUso', width: 120, headerName: 'Sem Uso' },
      { field: 'Linha_DR', width: 120 },
      { field: 'Total_DR', headerName: 'Total Dr', width: 80, filterParams: filterParamsNumber, comparator: customNumberComparator },
      { field: 'PrecoUnico', headerName: '$ Unico', width: 80 },
      { field: 'Total_FC', headerName: 'Total FC', width: 80, filterParams: filterParamsNumber },
      { field: 'Preco_FC', headerName: '$ FC', width: 80, filterParams: filterParamsNumber, comparator: customNumberComparator },
      { field: 'PrecoVIP', width: 80, headerName: '$ VIP', editable: true, filterParams: filterParamsNumber, comparator: customNumberComparator },
      { field: 'VIPSum', width: 80, headerName: 'VIP Sum', filterParams: filterParamsNumber, comparator: customNumberComparator },
      { field: 'FCSum', width: 80, headerName: '$ FC Sum', filterParams: filterParamsNumber, comparator: customNumberComparator },
      {
        field: 'Plano_FC', headerName: 'P. FC', width: 150, editable: true, filterParams: {
          includeBlanksInEquals: true,
          includeBlanksInLessThan: true,
          includeBlanksInGreaterThan: true,
          includeBlanksInRange: true,
        },
        cellEditor: 'agSelectCellEditor',
        cellEditorParams: {
          values: vm.plans
        }
      },
      { field: 'Plugin_DR', headerName: 'Plano Dr', width: 150 },
      { field: 'Plano_DR', width: 150 },
      { field: 'Roaming', width: 80 },
      { field: 'Agendado', width: 80, filterParams: filterParamsNumber, comparator: customNumberComparator },
    ],
    defaultColDef: {
      //flex: 1,
      sortable: true,
      filter: true,
      resizable: true,
      filterParams: {
        includeBlanksInEquals: true,
        includeBlanksInLessThan: true,
        includeBlanksInGreaterThan: true,
        includeBlanksInRange: true,
      }
    },
    stopEditingWhenCellsLoseFocus: true,
    copyHeadersToClipboard: true,
    suppressExcelExport: true,
    enableCellTextSelection: true,
    autoSizeColumns: true,
    singleClickEdit: true,
    rowSelection: 'multiple',
    headerHeight: 100,
    onFilterChanged: function () {
      vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + " of " + JSON.parse(LZString.decompress(sessionStorage.getItem('allphonelines2'))).length + " items";
    },
    rowHeight: 30,
    onCellClicked: onCellClicked,
    //onCellDoubleClicked: onCellDoubleClicked,
    onCellValueChanged: function (event) {
      setSession(event.data["Id"]);
      if (event != null && event.data != null) {
        if (event.data[event.column.colId] != "Select") {
          console.log(event.column.colId);
          console.log(event.data[event.column.colId]);
          var data = {
            Id: event.data.Id,
            key: event.column.colId,
            value: event.data[event.column.colId]
          }
          FoneclubeService.postAllPhoneLinesAction(data).then(function (result) {
          });
        }
        else {
          event.data[event.column.colId] = event.oldValue;
          event.api.refreshCells({ columns: ["Plano_FC"] });
        }
      }
      UpdateSession();
    }
  };

  init();


  function convertDate(dataString) {
    // Mapeamento de abreviações de meses para números
    const months = {
      Jan: '01', Feb: '02', Mar: '03',
      Apr: '04', May: '05', Jun: '06',
      Jul: '07', Aug: '08', Sep: '09',
      Oct: '10', Nov: '11', Dec: '12'
    };

    // Quebrar a string em partes (dia, mês, ano)
    const partes = dataString.split(' ');

    // Obter o ano, mês e dia
    const year = partes[2];
    const month = months[partes[1]];
    const day = partes[0];

    // Formar a data no formato "aaaa-mm-dd hh:mm"
    const finalDate = `${year}-${month}-${day} 00:00`;

    return finalDate;
  }


  function refreshGridOptions() {
    vm.gridOptions.columnDefs.filter(x => x.field == "Plano_FC")[0].cellEditorParams.values = vm.plans;
  }

  function openTopupPopup(phone) {
    var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos as informações da linha.");
    FoneclubeService.getContelDetailByPhone(phone).then(function (result) {
      showLoader.close();
      if (result != null) {
        FoneclubeService.getContelPlans().then(function (result1) {
            sessionStorage.setItem('contelplans', JSON.stringify(result1));
     
            var resultData = {
              result: result,
              plans: JSON.parse(
                sessionStorage.getItem("contelplans") == null
                  ? null
                  : sessionStorage.getItem("contelplans")
                ),
            };
            ViewModelUtilsService.showModalPhoneTopUpTemplate(resultData);
           });
      }
      else {
        alert('Selected line is not available in Contel');
      }
    }, function (error) {
      showLoader.close();
      DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
    });
  }

  function openTopupHistory(phone) {
    var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos o histórico de recarga.");
    FoneclubeService.getTopupHistory(phone).then(function (result) {
      showLoader.close();
      if (result != null && result.Person != null) {
        ViewModelUtilsService.showModalPhoneTopUpHistoryTemplate(result);
      }
      else {
        alert('Information not available');
      }
    }, function (error) {
      showLoader.close();
      DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
    });
  }

  function onCellClicked(params) {
    setSession(params.node.data.Id);
    switch (params.colDef.field) {
      case "PortNumber":
        ClipBoardCopy(params.value);
        break;
      case "CPF_FC":
        ClipBoardCopy(params.value);
        break;
      case "Saldo":
        {
          var showLoader = DialogFactory.showLoader("Aguarde enquanto obtém o saldo mais recente");
          FoneclubeService.getContelDetailBySaldoPhone(params.node.data.PhoneNumber).then(function (result) {
            showLoader.close();
            if (result != null && result.data != null) {
              var saldo = parseFloat(result.data.restante_dados / 1024).toFixed(2);
              const itemsToUpdate = [];
              let rowData = [];
              vm.gridOptions.api.forEachNodeAfterFilterAndSort(function (rowNode, index) {
                if (rowNode.data.Id == params.node.data.Id) {
                  alert(saldo);
                  rowNode.data.Saldo = saldo;
                  rowNode.setSelected(true);
                  vm.gridOptions.api.refreshCells({ columns: ["Saldo"] });
                  vm.gridOptions.api.ensureIndexVisible(index, 'middle');
                }
              });
              //debugger;
              //vm.gridOptions.api.applyTransaction({ update: itemsToUpdate });
              //vm.gridOptions.api.refreshCells({rowNodes: itemsToUpdate, force: true});
              //vm.gridOptions.api.applyTransaction({ update: itemsToUpdate });
              // vm.gridOptions.api.forEachNode(node => rowData.push(node.data));
              // alert(rowData.findIndex(x=>x.Id == params.node.data.Id));
              // UpdateSession();
            }
          }, function (error) {
            showLoader.close();
          });
        }
        break;
      case "ChargeHistory":
        vm.openChargeSummary(params.node.data.CPF_FC);
        break;
      case "WhatsApp":
        vm.openWhatsApp(params.node.data.CPF_FC);
        break;
      case "TopUp":
        vm.openTopupPopup(params.node.data.PhoneNumber);
        break;
      case "TopUpHistory":
        vm.openTopupHistory(params.node.data.PhoneNumber);
        break;
      case "Ativa":
        {
          var title = params.node.data.Ativa == "T" ? "Desativar linha" : "Ativar linha";
          var msg = params.node.data.Ativa == "T" ? "Tem certeza que deseja desativar a linha " : "Tem certeza que deseja ativar a linha ";
          DialogFactory.dialogConfirm({ titulo: title, mensagem: '<span>' + msg + params.node.data.PhoneNumber + '</span>', btn1: 'SIM', btn2: 'NÃO' })
            .then(function (result) {
              if (!result) {
                var data = {
                  Id: params.node.data.Id,
                  key: params.colDef.field,
                  value: params.node.data.Ativa == "F" ? "true" : "false"
                };
                UpdateSelectedData(data, params.node.data.PhoneNumber);
              }
            });
        }
        break;
      case "RecAutFCFlag":
        {
          var data = {
            Id: params.node.data.Id,
            key: params.colDef.field,
            value: params.node.data.RecAutFCFlag == false ? "true" : "false"
          };
          UpdateSelectedData(data, params.node.data.PhoneNumber);
        }
        break;
      case "ClienteAtivo_FC":
        {
          var title = params.node.data.Ativa == "T" ? "Desativar cliente" : "Ativar cliente";
          var msg = params.node.data.Ativa == "T" ? "Tem certeza que deseja desativar a cliente " : "Tem certeza que deseja ativar a cliente ";
          DialogFactory.dialogConfirm({ titulo: title, mensagem: '<span>' + msg + params.node.data.Nome_FC + '</span>', btn1: 'SIM', btn2: 'NÃO' })
            .then(function (result) {
              if (!result) {
                var data = {
                  Id: params.node.data.Id,
                  key: params.colDef.field,
                  value: params.node.data.ClienteAtivo_FC == "T" ? "true" : "false"
                };
                UpdateSelectedData(data, params.node.data.PhoneNumber);
              }
            });
        }
        break;
      case "PhoneNumber": {
        ClipBoardCopy(params.value);
        // FoneclubeService.syncContelLinesForUser(params.node.data.IdPerson).then(function (result) {
        //   if(result)
        //   {
        //     refreshPage();
        //   }
        // });
      }
        break;
      case "ContelBlockStatus": {
        if (params.node.data.ContelStatus != "CANCELADO") {
          vm.BlockUnlockLine(params.value, params.node.data.IdPerson, params.node.id, params.node.data.Nome_FC, params.node.data.PhoneNumber);
        }
      }
        break;
      case "Nome_FC": {
        {
          FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(params.node.data.CPF_FC)).then(function (result) {
            var data = {
              Id: result.Id,
              CPF: result.DocumentNumber,
              Nome: result.Name,
              Use2Prices: result.Use2Prices,
              IsVIP: result.IsVIP,
              Referral: result.Referral,
              Phones: result.Phones,
              Email: result.Email,
              Parent: result.Pai,
              SoftDelete: result.Desativo
            }
            ViewModelUtilsService.showPlanSelectionModal(data);
          });
        }
      }
        break;
      default:
        {
          ClipBoardCopy(params.value);
        }
        break;
    }
    //UpdateSession();

  }

  function setSession(id) {
    sessionStorage.setItem('lastClickedRow', id);
    SessionStorageUtilsService.setGridObject('AllPhoneLines2', vm.gridOptions, vm.filterText);
  }

  function UpdateSession() {
    //debugger;
    // var session = SessionStorageUtilsService.getSession("AllPhoneLines");
    // if(session!=null){
    //   var ss = JSON.parse(session);
    //   vm.filterText = ss.FilterText;
    // 	vm.gridOptions.columnApi.setColumnState(JSON.parse(ss.ColumnState));
    //   vm.gridOptions.api.setFilterModel(JSON.parse(ss.FilterModel));
    //   vm.gridOptions.columnApi.applyColumnState({
    //     state: JSON.parse(ss.SortModel),
    //     defaultState: { sort: null },
    //   });
    // }

    // let IDofRowToSelect = sessionStorage.getItem('lastClickedRow');

    // let rowData = [];
    // vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));

    // vm.gridOptions.api.forEachNodeAfterFilterAndSort((node) => {
    //   if(node.data.Id == IDofRowToSelect)
    //   {
    //     node.setSelected(true);
    //     alert(rowData.findIndex(x=>x.Id == IDofRowToSelect));
    //     vm.gridOptions.api.ensureIndexVisible(rowData.findIndex(x=>x.Id == IDofRowToSelect), 'middle');
    //   }
    // });
  }


  function UpdateSelectedData(data, phone) {
    FoneclubeService.postAllPhoneLinesAction(data).then(function (result) {
      let row = vm.gridOptions.api.getRowNode(data.Id);
      var allphonelines = sessionStorage.getItem('allphonelines2') == null ? null : LZString.decompress(sessionStorage.getItem('allphonelines2'));
      var data1 = JSON.parse(allphonelines);
      var index = data1.indexOf(data1.filter(v => v.Id == data.Id)[0]);
      if (index >= 0) {
        switch (data.key) {
          case "ClienteAtivo_FC":
            data1[index].ClienteAtivo_FC = data.value == "false" ? "T" : "F";
            break;
          case "Ativa":
            data1[index].Ativa = data.value == "true" ? "T" : "F";
            break;
          case "RecAutFCFlag":
            data1[index].RecAutFCFlag = data.value == "true" ? true : false;
            break;
        }
      }
      var str = JSON.stringify(data1);
      sessionStorage.setItem('allphonelines2', LZString.compress(str));
      vm.gridOptions.api.setRowData(data1);
      filterRecords();
    });
  }

  function BlockUnlockLine(value, custId, nodeId, custName, linha) {
    if (value == "A") {
      DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do Cliente ou apenas a linha selecionada' + custName + '</span>', btn1: 'TODAS', btn2: 'Selecionado' })
        .then(function (result) {
          if (result == 0) {
            DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' })
              .then(function (result) {
                if (!result) {
                  DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' })
                    .then(function (result) {
                      var showLoader = DialogFactory.showLoader("Um momento estamos bloqueando as linhas.");
                      if (!result) {
                        var data = {
                          PersonId: custId
                        }
                        FoneclubeService.permanentBlockLineForCustomer(data).then(function (result) {
                          if (result != null) {
                            showLoader.close();
                            var resDisplay = "";
                            for (var ir = 0; ir < result.length; ir++) {
                              resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                            }

                            ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                              if (confirm) {
                                refreshPage();
                              }
                              else {

                              }
                            });
                          }
                          else {
                            DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
                          }
                        }, function (error) {
                          showLoader.close();
                          DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
                        });
                      }
                      else
                        showLoader.close();
                    });
                }
              });
          }
          else {
            var showLoader = DialogFactory.showLoader("Um momento estamos bloqueando as linhas.");
            var data = { numero: linha };
            FoneclubeService.permanentBlockLine(data).then(function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay = "Linha: " + linha + " Status: " + result.mensagem + "<br/>";

                ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                  if (confirm) {
                    refreshPage();
                  }
                  else {

                  }
                });
              }
              else {
                DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        });
    }
    else {
      DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linha', mensagem: '<span>Deseja desbloquear <strong>TODAS</strong> as linhas de Cliente ou apenas a linha selecionada' + custName + '</span>', btn1: 'TODAS', btn2: 'Selecionado' })
        .then(function (result) {
          if (result == 0) {
            DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linha', mensagem: '<span>Deseja desbloquear <strong>TODOS</strong> de acordo com as linhas do ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' })
              .then(function (result) {
                if (!result) {
                  DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' })
                    .then(function (result) {
                      if (!result) {
                        var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
                        var data = {
                          PersonId: custId
                        }
                        FoneclubeService.permanentUnBlockLineForCustomer(data).then(function (result) {
                          if (result != null) {
                            showLoader.close();
                            var resDisplay = "";
                            for (var ir = 0; ir < result.length; ir++) {
                              resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                            }

                            ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                              if (confirm) {
                                refreshPage();
                              }
                              else {

                              }
                            });
                          }
                          else {
                            DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
                          }
                        }, function (error) {
                          showLoader.close();
                          DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
                        });
                      }
                    });
                }
              });
          }
          else {
            var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
            var data = { numero: linha };
            FoneclubeService.permanentUnBlockLine(data).then(function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay = "Linha: " + linha + " Status: " + result.mensagem + "<br/>";

                ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                  if (confirm) {
                    refreshPage();
                  }
                  else {

                  }
                });
              }
              else {
                DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        });
    }
  }

  function StringComparator(valueA, valueB) {
    const valueALower = valueA ? valueA.toLowerCase().trim() : "";
    const valueBLower = valueB ? valueB.toLowerCase().trim() : "";
    return valueALower.localeCompare(valueBLower, 'en', { numeric: true });
  }
  function DateComparator(valueA, valueB) {
    var defDate = new Date(1900,01,01);
    valueA = valueA == "" ? defDate : new Date(valueA);
    valueB = valueB == "" ? defDate : new Date(valueB);
    if (valueA == valueB) return 0;
    return (valueA > valueB) ? 1 : -1;
  }

  function openChargeSummary(cpf) {
    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(cpf)).then(function (result) {
      ViewModelUtilsService.showModalCustomer(result);
    });
  }

  function openCustomerEdit(cpf) {
    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(cpf)).then(function (result) {
      result.view = 2;
      FlowManagerService.changeEdicaoView(result);
    });
  }

  function openWhatsApp(cpf) {
    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(cpf)).then(function (result) {
      ViewModelUtilsService.showModalReport(result);
    });
  }

  function ClipBoardCopy(text_to_share) {
    // create temp element
    var copyElement = document.createElement("pre");
    copyElement.appendChild(document.createTextNode(text_to_share));
    copyElement.id = 'tempCopyToClipboard';
    angular.element(document.body.append(copyElement))
    // select the text
    var range = document.createRange();
    range.selectNode(copyElement);
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range)
    // copy & cleanup
    document.execCommand('copy');
    window.getSelection().removeAllRanges();
    copyElement.remove();
  }

  function totalValues(lines, valors) {
    vm.TotalLines = lines;
    vm.TotalValor = valors;

    FoneclubeService.getContelSaldo().then(function (result) {
      if (result != null) {
        vm.TotalSaldo = result.saldo;
      }
    });
  }

  function clearFilter() {
    vm.filterClient = "";
    vm.filterLinha = "";
    vm.filterRenevacoAte = "";
    vm.filterRenevacode = "";

    var allphonelines = sessionStorage.getItem('allphonelines2') == null ? null : LZString.decompress(sessionStorage.getItem('allphonelines2'));
    vm.gridOptions.api.setRowData(JSON.parse(allphonelines));
    getAgGridState();
  }

  function CustomCombobox(params) {
    //Find RowIndex
    var rowIndex = params.rowIndex;
    //FindColoumn Name
    var Column = params.eGridCell.attributes.colId;
    //FindGridData
    var WeldGridData = $scope.gridOptions.rowData;
    //create select element using javascript
    var eSelect = document.createElement("select");
    //Set attributes
    eSelect.setAttribute('class', 'custom-select form-control');
    eSelect.setAttribute('style', 'padding:0px');
    eSelect.setAttribute('name', params.colDef.field);
    eSelect.setAttribute('id', params.colDef.field + "_" + rowIndex);
    //get the value of the select option
    var value = params.data.CompanyID;
    //create the default option of the select element
    var eOption = document.createElement("option");
    eOption.text = "Select";
    eOption.value = "";
    eSelect.appendChild(eOption);
    if (params.colDef.field == "Propriedade") {
      CompanyName = $scope.CompanyList;
      var companyid = params.data.CompanyID;
      var eOptionVal = document.createElement("option");
      //Statical set data in grid ComboBox
      eOptionVal.text = "Angra";
      eOptionVal.value = 1;
      eSelect.appendChild(eOptionVal);
      var eOption = document.createElement("option");
      eOption.text = "Navcreation";
      eOption.value = "2";
      eSelect.appendChild(eOption);
    }
    return eSelect;
  }

  function onQuickFilterChanged() {
    sessionStorage.setItem('searchText', vm.filterText);
    var filterText = vm.filterText.replace("(", "").replace(")", "").replaceAll(" ", "").replace("-", "");
    vm.filterText = isNaN(filterText) ? vm.filterText : filterText;
    vm.gridOptions.api.setQuickFilter(vm.filterText);
    vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + "of" + vm.PhoneLines.length + " items";
    // let IDofRowToSelect = sessionStorage.getItem('lastClickedRow');

    // let rowData = [];
    // vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));

    // vm.gridOptions.api.forEachNode((node) => {
    //     node.setSelected(node.data.Id == IDofRowToSelect);
    //     if (node.data.Id == IDofRowToSelect) {
    //         vm.gridOptions.api.ensureIndexVisible(rowData.findIndex(x=>x.Id == IDofRowToSelect), 'middle');
    //     }
    // });
  }

  function refreshPage() {
    vm.loading = true;

    init()

    // Chamada comentada pois ela está com timeout

    // FoneclubeService.syncContelLines().then(function (result){
    // });
    // sessionStorage.setItem('allphonelines2', LZString.compress('none'));
    // location.reload();
  }


  function onClipBoardSuccess(event) {
    //debugger;
    vm.clipBoardCopiedText = event.text;
  }

  function pasteCliboardText(event) {
    //debugger;
    vm.filterText = vm.clipBoardCopiedText;
    var $activeElement = angular.element(document.getElementById('quickFilter'));
    $activeElement.attr('focused', 'yes'); // Example usage
    onQuickFilterChanged();
  }

  async function init() {
    var customers = sessionStorage.getItem('customers') == null ? null : LZString.decompress(sessionStorage.getItem('customers'));
    if (customers == undefined || customers == null || customers == 'none') {
      LoadMainGridInBackground();
    }
    FoneclubeService.getAgGridStates("AllPhoneLines2").then(function (result) {
      if (result != null)
        vm.agGridStates = result;
      var default1 = result.find(x => x.IsDefault == true);
      if (default1) {
        vm.defaultGridState = default1;
      }

      FoneclubeService.getPlansById(4).then(function (result) {
        vm.plansAll = result;
        vm.plans = result.map(x => x.Description);
        var allphonelines = sessionStorage.getItem('allphonelines2') == null ? null : LZString.decompress(sessionStorage.getItem('allphonelines2'));
        if (allphonelines == undefined || allphonelines == null || allphonelines == 'none') {
          FoneclubeService.getAllPhoneLinesNew().then(function (data) {

            vm.resultText = data.length + " of " + data.length + " items";

            var str = JSON.stringify(data);
            sessionStorage.setItem('allphonelines2', LZString.compress(str));
            vm.gridOptions.api.setRowData(data);

            setTimeout(() => {
              getAgGridState();
              refreshGridOptions();
              filterRecords();
              vm.loading = false;
            }, 500);
          });
        }
        else {

          vm.resultText = JSON.parse(allphonelines).length + "of " + JSON.parse(allphonelines).length + " items";

          vm.gridOptions.api.setRowData(JSON.parse(allphonelines));
          getAgGridState();
          refreshGridOptions();
          filterRecords();
          // vm.filterText = sessionStorage.getItem('searchText');
          // onQuickFilterChanged();
          let IDofRowToSelect = sessionStorage.getItem('lastClickedRow');;
          let rowData = [];
          vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));
          vm.gridOptions.api.forEachNode((node) => {
            node.setSelected(node.data.Id == IDofRowToSelect);
            if (node.data.Id == IDofRowToSelect) {
              vm.gridOptions.api.ensureIndexVisible(rowData.findIndex(x => x.Id == IDofRowToSelect), 'middle');
            }
          });
        }
      });

      FoneclubeService.getContelPlans().then(function (result) {
        sessionStorage.setItem('contelplans', JSON.stringify(result));
      });


    });


    let newData = await FoneclubeService.getAllPhoneLinesNew();

    let oldData = await LZString.decompress(sessionStorage.getItem('allphonelines2'));

    if (JSON.stringify(oldData) !== JSON.stringify(newData)) {
      sessionStorage.setItem('allphonelines2', LZString.compress(JSON.stringify(newData)));

      vm.gridOptions.api.setRowData(newData);
      vm.resultText = `${newData.length} of ${newData.length} items`;
      getAgGridState()
      refreshGridOptions();

      vm.loading = false;
    }

    vm.loading = false;
  }

  function LoadMainGridInBackground() {
    FoneclubeService.getClientDashboardData(vm.month, vm.year, 0).then(function (res) {
      var data = res[0];
      var result = res[1];

      var vmcustomers = [];
      for (var i in result) {
        let c = result[i];
        const customer = data.find(d => d.Id == c.Id);
        if (customer) {
          c.fullData = customer;
          // if(customer.Desativo == undefined) {
          //     vm.customers[i].fullData.Desativo = false;
          // }
          c.allChargingsCanceled = false;

          for (var o in c.ChargingValidity) {
            c.ChargingValidity[o].display = true;
          }
          vmcustomers.push(c);
        } else {
          //c.fullData = {};
        }
      }
      var str = JSON.stringify(vmcustomers);
      sessionStorage.setItem('customers', LZString.compress(str));
    });
  }

  function exportToExcel() {
    var params = {
      skipHeader: false,
      skipFooters: true,
      skipGroups: true,
      fileName: "export.csv"
    };
    var csvContent = vm.gridOptions.api.getDataAsCsv(params);
    let hiddenElement = document.createElement("a");
    let csvData = new Blob([csvContent], { type: "text/csv" });
    let csvUrl = URL.createObjectURL(csvData);
    hiddenElement.href = csvUrl;
    hiddenElement.target = "_blank";
    hiddenElement.download = "AllPhoneLines2.csv";
    hiddenElement.click();
  }

  function saveState() {
    var retVal = prompt("Enter save state name : ", "state name here");
    var saveStateData = {
      intId: -1,
      txtStateName: retVal,
      txtAgidName: 'AllPhoneLines2',
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
    }

    if (retVal != "null" && retVal != null) {
      FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
        alert('Saved successfully');
        FoneclubeService.getAgGridStates("AllPhoneLines2").then(function (result) {
          if (result != null)
            vm.agGridStates = result;
          var default1 = result.find(x => x.IsDefault == true);
          if (default1) {
            vm.defaultGridState = default1;
          }
        });
      });
    }
  }

  function updateState() {
    var retVal = prompt("Enter save state name to update: ", vm.defaultGridState.txtStateName);
    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtStateName: retVal,
      txtAgidName: 'AllPhoneLines2',
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
    }
    FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
      alert('Updated successfully')
    });
  }

  function deleteState() {
    ViewModelUtilsService.showConfirmDialog('Atenção!', 'Are you sure, you want to delete?').then(function (confirm) {
      if (confirm) {
        var deleteStateData = {
          intId: vm.defaultGridState.intId,
          txtAgidName: 'AllPhoneLines2'
        }
        FoneclubeService.deleteAgGridState(deleteStateData).then(function (result) {
          alert('Deleted successfully')
        });
      }
    });
  }

  function getAgGridState(stateName) {
    var res = vm.agGridStates.find(x => x.txtStateName == vm.defaultGridState.txtStateName);
    if (res != null && res.txtFilterModel != undefined && res.txtColumnState != undefined) {
      vm.gridOptions.api.setFilterModel(JSON.parse(res.txtFilterModel));
      vm.gridOptions.columnApi.setColumnState(JSON.parse(res.txtColumnState));
      if (res.txtSortModel != '{}') {
        vm.gridOptions.api.setSortModel(JSON.parse(res.txtSortModel));
        vm.gridOptions.columnApi.applyColumnState({
          state: JSON.parse(res.txtSortModel),
        });
      }

      let rowData = [];
      vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));
      var sum = rowData.map(x => parseFloat(x.ValorPago.replace("R$", ""))).reduce((partialSum, a) => partialSum + a, 0).toFixed(2);
      totalValues(rowData.length, sum);
    }
    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtAgidName: 'AllPhoneLines2',
    }
    FoneclubeService.updateDefaultGridState(saveStateData).then(function (result) {

    });
  }

  function addNewLine() {
    ViewModelUtilsService.showModalAddNewPhoneLinePopup();
  }

  function filterRecords() {
    //debugger;
    var allphonelines = sessionStorage.getItem('allphonelines2') == null ? null : LZString.decompress(sessionStorage.getItem('allphonelines2'));
    vm.gridOptions.api.setRowData(JSON.parse(allphonelines));
    getAgGridState();
    var rowData = [];
    vm.gridOptions.api.forEachNodeAfterFilterAndSort(node => rowData.push(node.data));
    var filterData = rowData;
    if (vm.filterRenevacode != "" && vm.filterRenevacoAte != "") {
      filterData = rowData.filter(x => (moment(x.AutoRec) >= moment(vm.filterRenevacode)) && (moment(x.AutoRec) <= moment(vm.filterRenevacoAte)));
    }
    if (vm.filterLinha != "") {
      var filterLinha = vm.filterLinha.replace("(", "").replace(")", "").replaceAll(" ", "").replace("-", "");
      filterData = filterData.filter(x => x.PhoneNumber.toLowerCase().includes(filterLinha.toLowerCase()));
    }
    if (vm.filterClient != "") {
      filterData = filterData.filter(x => x.Nome_FC.toLowerCase().includes(vm.filterClient.toLowerCase()));
    }
    var sum = filterData.map(x => parseFloat(x.ValorPago.replace("R$", ""))).reduce((partialSum, a) => partialSum + a, 0).toFixed(2);
    totalValues(filterData.length, sum);
    vm.gridOptions.api.setRowData(filterData);
    vm.gridOptions.api.setQuickFilter(vm.filterText);
    getAgGridState();
  }

  function mobileCheck() {
    let check = false;
    (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  };
};

AllPhoneLines2NewController.$inject = ['$scope', '$interval', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'ViewModelUtilsService', 'FlowManagerService', 'SessionStorageUtilsService'];

(function () {
    'use strict';

    angular
        .module('foneClub')
        .controller('AllPhoneLinesController', AllPhoneLinesController)
        .directive('ngPrism', function () {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.ready(function () {
                        Prism.highlightElement(element[0]);
                    });
                }
            };
        });


    AllPhoneLinesController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope'];
    function AllPhoneLinesController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope) {
        var vm = this;
        vm.data = DataFactory;
        vm.showLoader = true;

        vm.search = "";
        vm.showall = false;
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
        vm.history = [];
        vm.sp = 1;
        vm.Phones = [];
        vm.tempPhones = [];
        vm.parentlist = [];
        vm.totalDisplayed = 50;
        vm.showAllText = "Show More 50";

        vm.ignoreAccents = function (item) {
            if (vm.showall) {
                return true;
            } else {
                var text = removeAccents(item.NovoFormatoNumero.toLowerCase());
                //alert(text);
                var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
                var flag1 = text.indexOf(search_text) > -1;
                var flag2 = true;
                if (vm.linhaAtiva && !item.LinhaAtiva) {
                    flag2 = false;
                }
                var flag3 = true;
                if (!vm.claro) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag3 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag3 = !(text.indexOf('claro') > -1);
                    }
                }
                var flag4 = true;
                if (!vm.vivo) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag4 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag4 = !(text.indexOf('vivo') > -1);
                    }
                }

                return flag1 && flag2 && flag3 && flag4;

            }
        };

        function getNumberString(param) {
            return param.DDD.concat(param.Number);
        }

        var getCustomers = $scope.$watch(function () {

            $scope.clientList = vm.data.customers;
            return $scope.clientList;
        }, function (data) {
            if (data && data.length > 0) {
                vm.showLoader = false;
                getCustomers();
                init();
                if (vm.data.customersCache) {
                    vm.data.customers = angular.copy(vm.data.customersCache);
                }
            }
        })


        function init() {
            FoneclubeService.getPlans().then(function (result) {
                vm.plans = result;
                var size = vm.data.customers.length;
                for (var i = 0; i < size; i++) {
                    var customer = vm.data.customers[i];
                    var psize = customer.Phones.length;
                    for (var j = 0; j < psize; j++) {
                        var tmpPhone = customer.Phones[j];
                        if(tmpPhone.IdPlanOption==''){
                        tmpPhone.price = 0;
                        } else {
                            tmpPhone.price = vm.plans.find(x => x.Id == tmpPhone.IdPlanOption).Value / 100                            
                        }
                        vm.Phones.push(tmpPhone);
                        vm.parentlist.push({'parent':i,'child':j});
                        customer.Phones[j].key = Math.random();

                        customer.Phones[j].StatusOperator = { 'background-color': 'grey' }
                        customer.Phones[j].StatusDescription = 'C'

                        if (customer.Phones[j].Portability) {
                            customer.Phones[j].Portability = 'true';
                        } else {
                            customer.Phones[j].Portability = 'false';
                        }
                        customer.Phones[j].NovoFormatoNumero = getNumberString(customer.Phones[j]); //popula o novo campo vm.<telefone>
                        for (var plan in vm.plans) {
                            if (vm.plans[plan].Id == customer.Phones[j].IdPlanOption) {
                                if (vm.plans[plan].Description.endsWith('VIVO')) {
                                    customer.Phones[j].operadora = '1'; //seta a operadora local
                                    // customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                    // customer.Phones[j].StatusDescription = 'A'
                                } else {
                                    customer.Phones[j].operadora = '2'; //seta a operadora local

                                    console.log('tentando coletar')
                                    /*
                                    FoneclubeService.getStatusBlockedClaro(customer.Phones[j].DDD, customer.Phones[j].Number).then(function (result) {
                                        console.log('retorno ' + result)
                                        if (!result) {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                            customer.Phones[j].StatusDescription = 'A'
                                        }
                                        else {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'red' }
                                            customer.Phones[j].StatusDescription = 'B'
                                        }

                                    });
                                    */
                                }
                            }
                        }

                    }
                }

                vm.pricelist = [];
                for (var i = 0; i < vm.Phones.length; i++) {
                    var phoneNumber = vm.Phones[i];
                    if (phoneNumber.IdPlanOption == '') {
                        vm.pricelist.push(0);
                    } else {
                        vm.pricelist.push(vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value / 100);
                    }
                }
                vm.tempPhones = angular.copy(vm.Phones);
                vm.sp = 1;
                addHistory();
                vm.showLoader = false;
            })

                //post realizado com sucesso

                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                    console.log(error.statusText); // mensagem de erro para tela, caso precise
                });

        }

        vm.onchecked = onchecked;
        function onchecked(position) {
            vm.Phones[position] = angular.copy(vm.tempPhones[position]);
            vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            vm.showLoader = true;
            onTapSendUser(vm.data.customers[vm.parentlist[position].parent]);
        }

        vm.onunchecked = onunchecked;
        function onunchecked(position) {
            vm.tempPhones[position] = angular.copy(vm.Phones[position]);
            var id = vm.tempPhones[position].IdPlanOption;
            if (id == '' || id == null)
                vm.pricelist[position] = 0;
            else
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;

        }

        vm.onallchecked = onallchecked;
        function onallchecked() {
            vm.Phones = angular.copy(vm.tempPhones);
            for(var position=0;position<vm.Phones.length;position++){
                vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            }
            vm.count = 0;
            vm.showLoader = true;
            onTapAllusers(vm.data.customers);
        }

        vm.onallunchecked = onallunchecked;
        function onallunchecked() {
            vm.tempPhones = angular.copy(vm.Phones);
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
            }
        }

        vm.onedit = onedit;
        function onedit(position) {
            ViewModelUtilsService.showModalCustomer(vm.data.customers[vm.parentlist[position].parent], -1);
        }


        vm.changedFilterAll = changedFilterAll;
        function changedFilterAll() {
            // debugger
            if (vm.showall) {
                vm.search = "";
                vm.linhaAtiva = false;
                vm.claro = true;
                vm.vivo = true;
            }
        }

        vm.onUndo = onUndo;
        function onUndo() {
            vm.sp--;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
      /*          if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.onRedo = onRedo;
        function onRedo() {
            vm.sp++;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                /*
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.addHistory = addHistory;
        function addHistory() {
            if (vm.history.length > vm.sp) {
                vm.history.splice(vm.sp, vm.history.length - vm.sp);
            }
            var tmpPhones = angular.copy(vm.tempPhones);
            var tmpPricelist = angular.copy(vm.pricelist);
            vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
            vm.sp = vm.history.length;
        }

        vm.telephonechanged = telephonechanged;
        function telephonechanged($index) {
            //addHistory();
        }

        vm.activechanged = activechanged;
        function activechanged($index) {
            addHistory();
        }


        vm.changedPlano = changedPlano;
        function changedPlano(position, id) {
            if (id == '' || id == null){
                vm.pricelist[position] = 0;
                vm.tempPhones[position].price = 0;
            } else {
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                vm.tempPhones[position].price = vm.plans.find(x => x.Id == id).Value / 100;
            }
            addHistory();
            autmaticSum();
        }

        vm.pricechanged = pricechanged;
        function pricechanged($index) {
            autmaticSum();
        }

        vm.nicknamechanged = nicknamechanged;
        function nicknamechanged($index) {
            addHistory();
        }

        vm.changedAutoSum = changedAutoSum;
        function changedAutoSum() {
            if (vm.autoSum) {
                //       autmaticSum();
            }
        }

        function autmaticSum() {
            if (vm.autoSum) {
                vm.singlePriceLocal = 0;
                for (var i = 0; i < vm.pricelist.length; i++) {
                    vm.singlePriceLocal += vm.pricelist[i] * 100;
                }
                vm.singlePriceLocal = vm.singlePriceLocal / 100;
            }
        }

        vm.onShowMore = onShowMore;
        function onShowMore() {
            if(vm.totalDisplayed<vm.tempPhones.length){
                vm.totalDisplayed+=50;
            }
        }

        vm.onfocusPreco = onfocusPreco;
        function onfocusPreco(position){
            vm.tempPrice = vm.pricelist[position];
        }

        vm.onBlurPreco = onBlurPreco;
        function onBlurPreco(position){
            if(vm.tempPrice != vm.pricelist[position]){
                addHistory();
            }
        }

        vm.PhonesAsc = PhonesAsc;
        function PhonesAsc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = 'NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = 'IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = 'NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = 'price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.PhonesDesc = PhonesDesc;
        function PhonesDesc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = '-NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = '-IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = '-NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = '-price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.onTapSendUser = onTapSendUser;
        function onTapSendUser(customer) {

            var customerSend = {
                "Id": customer.Id,
                "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                "Register": customer.Register,
                "Name": customer.Name,
                "NickName": customer.NickName,
                "Email": customer.Email,
                "Born": customer.Born,
                "Gender": customer.Gender,
                "IdPlanOption": customer.IdPlanOption,
                "IdPagarme": customer.IdPagarme,
                "IdRole": customer.IdRole,
                "Adresses": customer.Adresses,
                "Phones": customer.Phones,
                "Photos": customer.Photos,
                "IdParent": customer.IdParent,
                "NameContactParent": customer.NameContactParent,
                "IdCommissionLevel": customer.IdCommissionLevel,
                "SinglePrice": vm.singlePriceLocal,
                "DescriptionSinglePrice": customer.DescriptionSinglePrice
            }

            FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                vm.showLoader = false;
            })
        };

        vm.onTapAllusers = onTapAllusers;
        function onTapAllusers(customers){
            for(var i =0;i<customers.length;i++){
                var customer = customers[i];
                var customerSend = {
                    "Id": customer.Id,
                    "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                    "Register": customer.Register,
                    "Name": customer.Name,
                    "NickName": customer.NickName,
                    "Email": customer.Email,
                    "Born": customer.Born,
                    "Gender": customer.Gender,
                    "IdPlanOption": customer.IdPlanOption,
                    "IdPagarme": customer.IdPagarme,
                    "IdRole": customer.IdRole,
                    "Adresses": customer.Adresses,
                    "Phones": customer.Phones,
                    "Photos": customer.Photos,
                    "IdParent": customer.IdParent,
                    "NameContactParent": customer.NameContactParent,
                    "IdCommissionLevel": customer.IdCommissionLevel,
                    "SinglePrice": vm.singlePriceLocal,
                    "DescriptionSinglePrice": customer.DescriptionSinglePrice
                }
    
                FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                    vm.count++;
                    if(vm.count==vm.data.customers.length){
                        vm.showLoader = false;                        
                    }
                })
            }
        }
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CadastroController', CadastroController);

    CadastroController.inject = [
        '$scope',
        'PagarmeService',        
        'HubDevService',
        'FoneclubeService',        
        'MainUtils',
        '$q',
        '$timeout',        
        'FlowManagerService',
        'ViewModelUtilsService',
        '$ionicScrollDelegate',
        'UtilsService',
        'DialogFactory',
        'ngDialog'
    ];

    function CadastroController(
        $scope,
        PagarmeService,          
        HubDevService, 
        FoneclubeService,
        MainUtils, 
        $q, 
        $timeout,          
        FlowManagerService, 
        ViewModelUtilsService,
        $ionicScrollDelegate,
        UtilsService,
        DialogFactory,
        ngDialog
    ) {
            
        var vm = this;
        vm.viewName = 'Cadastro Foneclube';
        vm.requesting = false;        
        vm.cpf = '';
        vm.birthdate = '';
        vm.zipcode = '';
        vm.street = '';
        vm.complement = '';
        vm.street_number = '';
        vm.neighborhood = '';
        vm.city = '';
        vm.uf = '';
        vm.email = '';
        vm.personalNumber = '';
        vm.phoneNumbersView =[ ];
        onTapNewPhoneNumber();        
        vm.onTapSearchDocument = onTapSearchDocument;
        vm.onTapSendDocument = onTapSendDocument;

        vm.validarCEP = validarCEP;
        vm.onTapSendAddress = onTapSendAddress;

        vm.onTapSendPersonalData = onTapSendPersonalData;

        vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
        vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
        vm.setPlansList = setPlansList;
        vm.changePhoneNumber = changePhoneNumber;
        vm.getContactParentName = getContactParentName;
        vm.showAddNewPhone = showAddNewPhone;
        
        // vm.enter = enter;
        vm.onTapCancel = onTapCancel;

        vm.onCheckCNPJ = onCheckCNPJ
        vm.CNPJField = false;
        vm.CPFField = true;

        function onCheckCNPJ(){
            console.log("andando " + vm.checkboxCNPJ)

            if(vm.checkboxCNPJ)
            {
                onShowCNPJField();
            }
            else
            {
                onShowCPFField();
            }
            
        }

        function onShowCPFField(){
            vm.CNPJField = false;
            vm.CPFField = true;
        }

        function onShowCNPJField(){
            vm.CNPJField = true;
            vm.CPFField = false;
        }
           
        init();

        function init(){
            vm.hasCPF = false;
            etapaDocumento();            
            vm.allOperatorOptions = MainUtils.operatorOptions();
            FoneclubeService.getPlans().then(function(result){
                console.log(result)
                vm.plans = result;
                vm.selectedPlansList = [];
            })
            .catch(function(error){
                console.log(error.statusText);
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
            })
            .catch(function(error){
                console.log(error.statusText);
            });                 
        }

        //Busca o cpf na base foneclube, se existir envia pra edição senão consulta na API de cpfs e retorna o nome;
        function onTapSearchDocument() {            
            vm.requesting = true;            
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            FoneclubeService.getCustomerByCPF(cpf).then(function(existentClient){
                if (existentClient.Id == 0) {
                    HubDevService.validaCPF(cpf).then(function(result){
                        if(result.status){
                           vm.name = result.nome;
                        }
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    }, function(error){
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    });
                } else {
                    showLoader.close();
                    DialogFactory.dialogConfirm({titulo:'Cliente já cadastrado', mensagem:'Deseja acrescentar novas linhas a este CPF?'})
                    .then(function(res){
                        if(res) {
                            existentClient.view = 1;
                            FlowManagerService.changeEdicaoView(existentClient);
                        } else {
                            FlowManagerService.changeNewHomeView();
                        }
                    })                    
                }
            }, function (result) {
                FlowManagerService.changeNewHomeView();
            }).catch(function (error) {
                FlowManagerService.changeNewHomeView();
            });
        }

        //envia o CPF com os dados basico para cadastro no Foneclube
        function onTapSendDocument(){
            vm.requesting = true;
            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                'Name': vm.name,
                'Born': '12/12/1950',
                'Email': vm.email,
                'Phones' : [{
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).Number,
                    'IsFoneclube': null,
                    'Id': null,
                    'IdOperator': vm.operator
                }]
            };
            FoneclubeService.postBasePerson(personCheckout).then(function(result){
                if(result) {
                    etapaEndereco();
                    DialogFactory.showMessageConfirm({titulo:'Andamento', mensagem:'Documento enviado, agora preencha os dados de Endereço.'})
                    .then(function() {
                        $timeout(function(){
                            document.getElementById('cep').focus();
                        }, 200);
                    });
                }
            }).catch(function(error){
                vm.requesting = false;
                DialogFactory.showMessageDialog({mensagem:error.statusText});                
            });
        }
            
        
        function validarCEP() {
            if (vm.zipcode.length < 9) return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            HubDevService.validaCEP(vm.zipcode.replace(/[-.]/g , '')).then(function(result){
                if (!result.erro) {
                    vm.street = result.logradouro;
                    vm.neighborhood = result.bairro;
                    vm.city = result.localidade;
                    vm.uf = result.uf;
                    $timeout(function(){
                        document.getElementById('numero').focus();
                    }, 200);
                } else {
                    DialogFactory.showMessageDialog({mensagem: "CEP incorreto."});
                }
                showLoader.close();
            }, function(error){
                showLoader.close();
            });
        }

        function onTapSendAddress() {
            vm.requesting = true;
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var personCheckout = {
                'DocumentNumber': cpf,
                'Adresses': [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ]
            };

            FoneclubeService.postUpdatePersonAdress(personCheckout).then(function(result){
                if(result) {
                    etapaDadosPessoais();
                    DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Endereço enviado, agora preencha os dados pessoais.'});                    
                }
            })
            .catch(function(error){
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
            });
        }

        // ETAPA IMAGENS
        vm.imageSelf;
        vm.base64Self;
        vm.imageFrente;
        vm.base64Frente;
        vm.imageVerso;
        vm.base64Verso;        
        vm.uploadImg = uploadImg;
        vm.viewImg = viewImg;
        function viewImg(img) {            
            ngDialog.open({
                template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
                controller: ['$scope', 'DataFactory', function($scope, DataFactory) {                    
                    $scope.img = $scope.ngDialogData.img;            
                }],
                className: 'ngDialog-custom-width popup-lista-imagens',
                plain: true,
                closeByDocument: true,
                data: {
                    img: img
                }
            });
        }
        function uploadImg(param) {
            document.getElementById(param).click();
        }
        function onTapSendPersonalData() {
            var showLoader = DialogFactory.showLoader('Enviando Imagens...');
            vm.requesting = true;
            UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function(result) {
                var personCheckout = {
                    'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                    'Photos': []
                };
                for(var i in result) {
                    personCheckout.Photos.push({Name:result[i].filename, Tipo: result[i].tipo});
                }
                FoneclubeService.postUpdatePerson(personCheckout).then(function(result){
                    showLoader.close();
                    if(result) {
                        etapaComplementar();
                        DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Dados pessoais enviados, agora preencha os dados Foneclube.'})
                        .then(function() {
                            $timeout(function(){
                                document.getElementById('telefoneConvidou').focus();
                            }, 200); 
                        })
                    }
                })
                .catch(function(error){
                    DialogFactory.showMessageDialog({mensagem:error.statusText}); //TODO
                    vm.requesting = false;
                    showLoader.close();

                });
            }, function(result) {
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'fazer validações para mensagens de erro;'}); //TODO
            });
        }
        // ETAPA IMAGENS
        function etapaDocumentoFaseNome(){
            vm.hasCPF = true;            
            vm.requesting = false;
            $timeout(function(){
                document.getElementById('nome').focus();
            }, 200);            
        }
        function etapaDocumento(){
            limpaEtapas();
            vm.etapaDocumento = true;
        }
        function etapaEndereco(){
            limpaEtapas();
            vm.etapaBuscarCEP = true;
            vm.etapaEndereco = true;                          
        }
        function etapaDadosPessoais(){
            limpaEtapas();
            vm.etapaDadosPessoais = true;
        }
        function etapaComplementar(){
            limpaEtapas();
            vm.etapaComplementar = true;           
            
        }
        function limpaEtapas(){
            vm.etapaDocumento = false;
            vm.etapaEndereco = false;
            vm.etapaDadosPessoais = false;
            vm.etapaComplementar = false;
            vm.requesting = false;
        }

        /////////////////////////
        /////FOTOS FASE
        //MOVER PRA CONSTATNS
        // var PHOTO_SELFIE = 1;
        // var PHOTO_FRONT = 2;
        // var PHOTO_VERSE = 3;
        // var interval;
        // vm.currentPhoto;

        // function onTapPhotoSelfie(){
        //     console.log('onTapPhotoSelfie');
        //     if(!vm.selfieSended)
        //         launchModal(PHOTO_SELFIE);
        // }

        // function onTapPhotoFront(){
        //     console.log('onTapPhotoFront');
        //     if(!vm.frontSended)
        //         launchModal(PHOTO_FRONT);
        // }

        // function onTapPhotoVerse(){
        //     console.log('onTapPhotoVerse');
        //     if(!vm.verseSended)
        //         launchModal(PHOTO_VERSE);
        //         //deseja trocar imagem?
        // }

        // function launchModal(photoType){
        //     console.log('launchModal ' + photoType);
        //     vm.currentPhoto = photoType;
        //     //limpa seleção de arquivo em variável local e em variável global
        //     vm.hasFileSelected = false;
        //     FileListUtil.set(undefined);
        //     vm.hasPhotoCaptured = false;
        //     vm.modal.show();            
        //     validadeFile();

        // }

        // function validadeFile(){
        //     try{
        //         $interval.cancel(interval);
        //     }
        //     catch(error){ }
        //     interval = $interval(function() {
        //         //console.log('say hello');
        //         //console.log(FileListUtil.get())
        //         if(FileListUtil.get())
        //         {
        //             vm.hasFileSelected = true;
        //         }
        //     }, 500);
        // }

        // vm.onTapPhotoGalley = onTapPhotoGalley;
        // vm.onTapPhotoCamera = onTapPhotoCamera;
        // function onTapPhotoGalley(){
        //     console.log('onTapPhotoGalley');
        //     //não precisu file upload abre direto do DOM
        // }
        // function onTapPhotoCamera(){
        //     console.log('onTapPhotoCamera');
        //     //startCameraPhoto(); não precisa file upload abre direto do DOM
        // }

        ////PHOTO PROCCESS
        /////////////////////////////////////
        /////////////////////////////////////

        ///GALERIA
        
        
        // var personCheckout = {};
        // personCheckout.Images = [];
        // var selfiePhotoName = '';
        // var frontPhotoName = '';
        // var versePhotoName = '';
        // var listaImagens = [];
        // var cameraPhotoName;
        // vm.fotos = [];
        // vm.images = []
        // vm.onTapSendImage = onTapSendImage;
        // function uploadIdentidadeGaleria(){
        //     console.log('uploadIdentidadeGaleria')
        //     var file = FileListUtil.get();
        //     if(!file)
        //      return;
        //     uploadFile(file).then(function(result){
        //         console.log('result')
        //         console.log(result.filename);
        //         setImageReleaseView(result);
        //         //https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/lsUbxLxh-IMG_20170420_162617843.jpg
        //     });

        // }

        // function setImageReleaseView(result){
        //     switch(vm.currentPhoto) {
        //             case PHOTO_SELFIE:
        //                 console.log('PHOTO_SELFIE');
        //                 vm.selfieSended = true;
        //                 vm.showSelfiePhoto = true;
        //                 selfiePhotoName = result.filename;
        //                 vm.selfiePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + selfiePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_FRONT:
        //                 console.log('PHOTO_FRONT');
        //                 vm.frontSended = true;
        //                 vm.showFrontPhoto = true;
        //                 frontPhotoName = result.filename;
        //                 vm.frontPhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + frontPhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_VERSE:
        //                 console.log('PHOTO_VERSE');
        //                 versePhotoName = result.filename;
        //                 vm.verseSended = true;
        //                 vm.showVersePhoto = true;
        //                 vm.versePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + versePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;
        //         }
        // }




        // function uploadFile(file){
        //     var q = $q.defer();

        //     if(isInvalidName(file.name)){
        //         vm.file = null;
        //         vm.msg = "Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo"
        //         q.reject();
        //         return q.promise;
        //     }
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     var imageUploader = new ImageUploader();
        //     imageUploader.push(file)
        //     .then((data) => {
        //         showLoader.close();
        //          q.resolve(data);
        //     })
        //     .catch((err) => {
        //         DialogFactory.showMessageDialog({mensagem:'Não foi possível enviar imagens'});
        //         showLoader.close();
        //         q.reject(error);
        //     });
        //     return q.promise;
        // }

        // function onTapSendImage(){
        //     vm.msg = "";
        //     console.log('onTapSendImage ');
        //     if(vm.hasPhotoCaptured)
        //         startListUpload(vm.fotos);
        //     if(vm.hasFileSelected)
        //         uploadIdentidadeGaleria();
        // }

        // /////////////////////////////////////
        // ///foto de camera
        // //extrair
        // function startCameraPhoto() {
        //     console.log('fotoIdentidadeCamera')
        //     // 2
        //     var options = {
        //         destinationType : Camera.DestinationType.FILE_URI,
        //         sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
        //         allowEdit : false,
        //         encodingType: Camera.EncodingType.JPEG,
        //         popoverOptions: CameraPopoverOptions,
        //     };

        //     // 3
        //     $cordovaCamera.getPicture(options).then(function(imageData) {
        //         console.log('cordovaCamera.getPicture')
        //         console.log(imageData)
        //         // 4
        //         onImageSuccess(imageData);

        //         function onImageSuccess(fileURI) {
        //             createFileEntry(fileURI);
        //         }
        //         function createFileEntry(fileURI) {
        //             window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
        //         }
        //         // 5
        //         function copyFile(fileEntry) {
        //             var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png
        //             window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
        //                 fileEntry.copyTo(
        //                     fileSystem2,
        //                     newName,
        //                     onCopySuccess,
        //                     fail
        //                 );
        //             },
        //             fail);
        //         }

        //         // 6
        //         function onCopySuccess(entry) {
        //             console.log('onCopySuccess ' );
        //             console.log(entry);
        //             console.log(entry.nativeURL);
        //             var listName = entry.nativeURL.split('/');
        //             vm.fotos.push(entry.nativeURL);
        //             listaImagens.push(listName[listName.length - 1]);
        //             $scope.$apply(function () {
        //                 vm.images.push(entry.nativeURL);
        //             });
        //             vm.hasPhotoCaptured = true;
        //             //startListUpload(vm.fotos);
        //         }

        //         function fail(error) {
        //             console.log("fail: " + error.code);
        //         }

        //         function makeid() {
        //             var text = "";
        //             var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        //             for (var i=0; i < 5; i++) {
        //                 text += possible.charAt(Math.floor(Math.random() * possible.length));
        //             }
        //             return text;
        //         }

        //     }, function(err) {
        //         console.log(err);
        //     });
        // }

        // function startListUpload(photos){
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     if(photos.length > 0) {
        //         var lastItemIndex = photos[photos.length - 1];
        //         uploadImagePath(lastItemIndex).then(function(result){
        //             if(result)
        //                 continueListUpload(vm.fotos);
        //         });
        //     } else {
        //         showLoader.close();                
        //         console.log(listaImagens)
        //         //conclusão de foto auqi
        //         setImageReleaseView(cameraPhotoName)
        //     }
        // }

        // function continueListUpload(photos){
        //     photos.pop();
        //     startListUpload(vm.fotos);
        // }

        // function uploadImagePath(path){
        //     var q = $q.defer();
        //     var guidName = MainUtils.guid();
        //     MainUtils.pathToDataURI(path, function(dataUri) {
        //         var blob = MainUtils.dataURIToBlob(dataUri);
        //         blob.name = guidName.concat('.jpg');
        //         MainUtils.uploadFile(blob).then(function(result){
        //             console.log(' MainUtils.uploadFile(blob)')
        //             console.log(result)
        //             personCheckout.Images.push(blob.name);
        //             setImageReleaseView(result);
        //             q.resolve(true);
        //         }).catch(function(result){
        //             q.resolve(false);
        //         });
        //     });
        //     return q.promise;
        // }


        /////////////////////////////////////
        /////////////////////////////////////

        function getFoneclubePhonesOnly(array) {
            return array.filter(function (number) {
                return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.LinhaAtiva;
            });
        }

        function validadeMinInfos() {
            for (var number in vm.phoneNumbersView) {
                if(!vm.phoneNumbersView[number].Nickname || vm.phoneNumbersView[number].Nickname == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'Nickname é um campo obrigario'});
                    return false;
                }
                if(vm.phoneNumbersView[number].IdPlanOption == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'A escolha do plano é obrigatória.'});
                    return false;
                }
                if (vm.phoneNumbersView[number].NovoFormatoNumero.length < 14 && vm.phoneNumbersView[number].NovoFormatoNumero.length > 0) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'O telefone: '.concat(vm.phoneNumbersView[number].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.')});
                    return false;
                }
            }
            return true;
        }

        function validateUniquePriceLessThanPhones() {
            if (!vm.singlePrice) return true;
            var totalPriceValidade = 0;
            for (var number in vm.phoneNumbersView) {
                vm.plans.find(function (element, index, array) {
                    if (element.Id == vm.phoneNumbersView[number].IdPlanOption) {
                        totalPriceValidade = totalPriceValidade + element.Value / 100;
                    }
                });
            }
            var price = parseFloat(vm.singlePrice) / 100;
            if (price > totalPriceValidade) {
                DialogFactory.showMessageDialog({mensagem:'Preço único não pode ser maior do que o preço de todos os planos somados.'});
                return false;
            }
            return true;
        }

        function dontLetAddTheSameNumberTwice(arrayFiltered) {
            for(var x in arrayFiltered) {
                var twiceNumber = arrayFiltered.filter(function (element, index, array) {
                    return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                    return false;
                }
            }
            return true;
        }

        vm.onTapSendFoneclubeData = onTapSendFoneclubeData;
        function onTapSendFoneclubeData(){
            vm.requesting = true;
            
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var phones = [];
            
            //valida se nickname e apelido está preenchido
            if (!validadeMinInfos()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            
            //valida se a soma dos planos não é maior do que o preço unico;
            if (!validateUniquePriceLessThanPhones()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }

            vm.phoneNumbersView.forEach(function (element, index, array) {
                phones.push({
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).Number,
                    'Portability': element.Portability,
                    'IsFoneclube': true,
                    'Nickname': element.Nickname,
                    'IdPlanOption': element.IdPlanOption
                });
            });

            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),  
                // 'NameContactParent': vm.whoinvite,
                //'IdParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                //'IdContactParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                'Phones': phones,
                'SinglePrice': vm.singlePrice,
                'DescriptionSinglePrice': vm.descriptionSinglePrice
            };

            // debugger;

            
            
            if (vm.IdParent) {
                personCheckout.IdParent = vm.IdParent;
                personCheckout.IdContactParent = vm.IdParent;
            }

            //busca apenas telefones foneclube e que estão ativos
            var arrayFiltered = getFoneclubePhonesOnly(phones);

            //Não deixa adicionar o mesmo numero duas vezes;
            if (!dontLetAddTheSameNumberTwice(arrayFiltered)) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            var showLoader = DialogFactory.showLoader('Enviando dados...');
            // if (personCheckout.IdParent == 0) {
            //     delete personCheckout.IdParent;
            // }
            if (arrayFiltered.length == 0) {
                FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
            } else {
                validadeNumbers(arrayFiltered).then(function(result) {
                    var right = true;
                    for (var item in result) {
                        if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                            var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                                .concat(getNumberComMascara(arrayFiltered[item])).concat('</strong>, pertence ao cliente ')
                                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: msg});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                            break;
                        }
                    }
                    if (right) {
                        FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
                    }
                });
            }
            
            function postUpdatePersonSucess(result) {

                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                    
                    // debugger
                    try{
                        var parentDDD = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(0,2);
                        var parentNumber = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(2,11);
                    }
                    catch(erro){
                        var parentDDD = '';
                        var parentNumber = '';
                    }
                    
                    // debugger;
                    var customerObj = {
                        'NameParent':vm.whoinvite,
                        'Id': result.Id,
                        'PhoneDDDParent':parentDDD,
                        'PhoneNumberParent':parentNumber
                    }
    
                    FoneclubeService.postCustomerParent(customerObj).then(function(result){
                        var avisopai = '';
                        if(!result)
                        {
                            avisopai = '(menos o pai)'
                        }
 
                        
                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados, cadastro Foneclube feito com sucesso.' + avisopai, btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeNewHomeView();
                                }
                            })                    
                        }

                    }).catch(function(erro){
                        

                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados (menos o pai), cadastro Foneclube feito com sucesso.', btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeNewHomeView();
                                }
                            })                    
                        }
                    });
                });

                
            }
            
            function postUpdatePersonError(error) {
                vm.requesting = false;
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem:error.statusText});
            }
        }
        
        function validadeNumbers(numbers){
            var promises = numbers.map(function(number) {
                return FoneclubeService.getCustomerByPhoneNumber({
                    ddd: UtilsService.clearPhoneNumber(number.DDD),
                    numero: UtilsService.clearPhoneNumber(number.Number)
                });
            });
            return $q.all(promises);
        }
        
        function setPlansList(operadora) {
            vm.selectedPlansList = [];
            for (var item in vm.plans) {
                if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
                    vm.selectedPlansList.push(vm.plans[item]);
                } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')){
                    vm.selectedPlansList.push(vm.plans[item]);
                }
            }
        }
            
        //adiciona telefone do array que é exibido na view
        function onTapNewPhoneNumber() {
            vm.phoneNumbersView.push(
                {
                    'Id': null,
                    'DDD': '',
                    'Number': '',
                    'IsFoneclube': true,
                    'IdOperator': 0,
                    'Portability': 'false',
                    'NickName': '',
                    'IdPlanOption': 0,
                    'Inative': false,
                    'Delete': false,
                    'NovoFormatoNumero': '',
                    'operadora': '1',
                    'LinhaAtiva': true
                }
            );
        }
        //remove telefone do array que é exibido na view
        function onTapRemoveNewNumber(position) {
            DialogFactory.dialogConfirm({title:'Excluir Número', mensagem: 'Deseja realmente remover este número?'})       
            .then(function(result) {
                if (result) {
                    vm.phoneNumbersView.splice(position, 1);
                }
            })                 
        }
        
        function changePhoneNumber(position) {
            if (vm.phoneNumbersView[position].NovoFormatoNumero.length < 14) {
                return
            }
            var param = {
                ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).DDD,
                numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).Number
            }
                //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                var twiceNumber = vm.phoneNumbersView.filter(function (element, index, array) {
                    return element.NovoFormatoNumero == vm.phoneNumbersView[position].NovoFormatoNumero;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o mesmo cliente.'});
                    return;
                }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(res) {
                if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                    var msg = 'Este telefone já pertence ao cliente '.concat(UtilsService.getDocumentNumerWithMask(res.DocumentNumber)).concat(', ').concat(res.Name).concat('.');
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem: msg});
                }
            });
        }
        
        function getContactParentName() {
            //TODO
            //preenchimento automatico
            // if (vm.phoneContactParent.length < 13) { 
            //     vm.IdParent = "";
            //     return 
            // }
            // var param = {
            //     ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).DDD,
            //     numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).Number
            // }
            // FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
            //     vm.IdParent = result.Id;
            //     vm.whoinvite = result.Name;
            // })
        }

        function onTapCancel(){
            vm.modal.hide();
        }
               
        function showAddNewPhone() {
            function filterPhones(number){
                return number.IsFoneclube == true;
            }
            return personCheckout.Phones.filter(filterPhones);
        }
    }

    angular.module('foneClub').directive("fileread", [function () {
        return {
            scope: {
                fileread: "=",
                base64: "="
            },
            link: function (scope, element, attributes) {
                element.bind("change", function (changeEvent) {
                    scope.$apply(function () {
                        scope.fileread = changeEvent.target.files[0];
                    });
                    var reader = new FileReader();
                    reader.onload = function (loadEvent) {
                        scope.$apply(function () {
                            scope.base64 = loadEvent.target.result;
                        });
                    }
                    reader.readAsDataURL(changeEvent.target.files[0]);
                });
            }
        }
    }]);

})();



(function() {
  'use strict';

  angular.module('foneClub').controller('ChargeSummaryController', ChargeSummaryController);

 ChargeSummaryController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService',
    '$stateParams',
  ];

  function ChargeSummaryController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService,
    $stateParams
  ) {
    var vm = this;
    vm.customerName = "";
    vm.isPix = false;
    vm.isBoleto = false
    vm.vigencia="";
    vm.vencimento ="";
    vm.pixCode="";
    vm.boletoUrl ="";
    vm.boletoBarcode = "";
    vm.imgUrl="";
    vm.chargeId = $stateParams.chargeId;
    vm.personId = $stateParams.personId;
    vm.AdditionalComments = "";
    vm.showSummary = false;
    vm.urlApi = 'https://api.foneclube.com.br/api';
    //vm.urlApi = 'http://localhost:57078/api'

    init();

    function init(){
      vm.displayTooltip = false;
      FoneclubeService.getChargingById(vm.personId,vm.chargeId).then(function (result) {
        vm.customerName = result.Name;
        if(result.Charging){
          vm.vigencia = result.Charging.MesVingencia +"/"+result.Charging.AnoVingencia;
          vm.vencimento = result.Charging.DueDate.split('T')[0];
          vm.qrcode = result.Charging.Id;
          vm.pixCode = result.Charging.PixCode;
          vm.price =  result.Charging.Ammount;
          vm.boletoUrl = result.Charging.BoletoUrl;
          vm.boletoBarcode = result.Charging.boletoBarcode;
          vm.AdditionalComments = result.Charging.ChargingComment;
          if(result.Charging.PixCode != undefined || result.Charging.PixCode != null){
              vm.isPix = true;
              vm.imgUrl = vm.urlApi + "/pagarme/pix/qrcode/"+vm.qrcode;
          }
          if(result.Charging.BoletoUrl != undefined || result.Charging.BoletoUrl != null){
            vm.isBoleto = true;
        }
        
          vm.showSummary=true;
        }
      });
    }
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutController', CheckoutController);

    CheckoutController.inject = ['$scope','PagarmeService', 'HubDevService', 'FoneclubeService', 'FileListUtil', 'MainUtils', '$q', '$cordovaCamera', '$cordovaFile', '$timeout', 'DialogFactory'];
    function CheckoutController($scope,PagarmeService, HubDevService, FoneclubeService, FileListUtil, MainUtils, $q, $cordovaCamera, $cordovaFile, $timeout, DialogFactory) {
        var vm = this;
        var personCheckout = {};
        personCheckout.Images = [];
        vm.images = [];
        vm.fotos = [];
        var listaImagens = [];
        console.log('=== CheckoutController Controller ===');

        vm.onTapPagar = onTapPagar;
        vm.statusTransaction = ''
        vm.validarCEP = validaCEP;
        vm.validarCPF = validaCPF;
        vm.fotoIdentidadeCamera = fotoIdentidadeCamera;
        vm.uploadIdentidadeGaleria = uploadIdentidadeGaleria;
        vm.uploadIdentidadeCamera = uploadIdentidadeCamera;
        vm.OperatorsSelecteds = [];
        vm.addCheckout = addCheckout;
        vm.onRegisterTap = onRegisterTap;        

        init();

        function init(){

            faseCadastro();

            FoneclubeService.getPlans().then(function(result){
                vm.plans = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                
            });
        }

        function onRegisterTap(){

                //limpando, assim chega na api

                //todo fix temp
                try{
                    var cellNumber = vm.UserCellphone.replace('-', '').replace(' ', '');
                }
                catch(e){
                    DialogFactory.showMessageDialog({mensagem:'Informações pendentes'})                       
                }

                var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Nickname':vm.Nickname,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                "Images": listaImagens,
                'Phones': [
                    {
                    // 'Id': 1,
                    'DDD': vm.UserDDD,
                    'Number': cellNumber
                    }
                ]
                };

                console.log(personCheckout)
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                DialogFactory.showMessageDialog({mensagem:'Cadastro realizado'})                    

                if(result)
                    fasePagamento();
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                    
            });

        }

        /*
        function onRegisterTap(){

                personCheckout.DocumentNumber = vm.register;
                personCheckout.Name = vm.name;
                personCheckout.Email = vm.email;
                personCheckout.Born = vm.birthdate;
                personCheckout.Gender = 1; // todo
                personCheckout.IdPagarme = vm.register; //vai ser limado
                personCheckout.IdPlanOption = parseInt(vm.plan);
                personCheckout.IdContactParent = 21999999999; //vm.contactParent, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou

                personCheckout.Adresses = [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ];

                personCheckout.Phones = [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ];


                console.log(personCheckout)

                if(!personCheckout.DocumentNumber || !personCheckout.Name || !personCheckout.Email
                || !personCheckout.Born || !personCheckout.IdPlanOption || !personCheckout.IdContactParent
                || !personCheckout.Adresses[0].Street || !personCheckout.Adresses[0].StreetNumber
                || !personCheckout.Adresses[0].City || !personCheckout.Adresses[0].Cep || !personCheckout.Adresses[0].State
                || !personCheckout.Phones[0].DDD || !personCheckout.Phones[0].Number)
                {
                    //trocar forma de aviso
                    vm.statusTransaction = "Existe pendência de campo a ser preenchido";
                    return;
                }

            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                vm.statusTransaction = result;
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                vm.statusTransaction = error.statusText;
            });

        }
        */

        function uploadIdentidadeGaleria(){
            console.log('uploadIdentidadeGaleria')
            var file = FileListUtil.get();

            if(!file)
             return;

            uploadFile(file).then(function(result){
                personCheckout.Images.push(result.filename);
                listaImagens.push(result.filename);
            });

        }

        function uploadIdentidadeCamera(param){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }


        function addCheckout(){

        console.log('addCheckout');

        //esse ´o objeto checkout que vamos montar a partir do form
        //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1, //??
                    'IdPagarme': 100, //??
                    'IdPlanOption': vm.plan,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                // "Images": [
                //    vm.HoldingRg.url, //aqui vão os guids
                //    vm.rg.url
                // ],
                'Phones': [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ]
                };

                // debugger;
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }



        function validaCEP(cepInput){
            var cep = cepInput.replace(/[-.]/g , '');
            if(cep.length < 8)
                return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');            

            HubDevService.validaCEP(cep)
            .then(function(result){
             vm.street = result.info.logradouro;
             vm.neighborhood = result.info.bairro;
             vm.city = result.info.cidade;
             vm.uf = result.info.uf;
            showLoader.close();
             console.log(result);

            },
            function(error){
                showLoader.close();
            });
        }

         function validaCPF(cpfInput, birthdate){

                console.log(cpfInput.length)
                if(cpfInput.length <= 6)
                    return;


                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data Inválida'});                    
                    return;
                }


                var showLoader = DialogFactory.showLoader('Tentando preencher dados...');                

                var cpf = cpfInput.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,birthdate)
                .then(function(result){
                   if(result.status){
                       vm.name = result.result.nome_da_pf;
                   }
                     showLoader.close();
                },
            function(error){
            showLoader.close();
            });
        }

        function onTapPagar(){


            console.log(' --- onTapPagar ');
            vm.statusTransaction = 'Iniciando transação';



            try
            {

                var expirationMonth = vm.cardExpirationMonth;

                if(vm.cardExpirationMonth < 10)
                {
                    expirationMonth = '0' + vm.cardExpirationMonth;
                }

                var cardData = {
                    cardHolderName: vm.cardHolderName.toUpperCase(),
                    cardExpirationMonth: expirationMonth,
                    cardExpirationYear: vm.cardExpirationYear,
                    cardNumber: vm.cardNumber,
                    cardCVV:vm.cardCVV
                }
            }
            catch(erro){
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                
                return;
            }

            try
            {
                var customer = {
                    'name' : vm.name,
                    'document_number' : vm.register.toString(),
                    'email' : vm.email,
                    'birthdate' : vm.birthdate,
                    'nickname': vm.Nickname,
                    'user_cellphone': vm.UserCellphone,
                    'plan': vm.plan,
                    'actual_mobile_operators': {
                        'vivo': vm.Vivo,
                        'tim': vm.Tim,
                        'nextel': vm.Nextel,
                        'claro': vm.Claro,
                        'oi': vm.Oi,
                        'other': vm.Other
                    },
                    'front_and_back': vm.Yes == undefined ? false : vm.Yes
                    ,
                    'sugestions': vm.sugestions,
                    'foneClub_new_operators': {
                        'vivo': vm.VivoActual,
                        'claro': vm.ClaroActual
                    },
                    'invite' : {
                        'name': vm.whoinvite,
                        'number': vm.contactParent
                    },
                    'address' : {
                        'street' : vm.street,
                        'street_number' : vm.street_number,
                        'neighborhood' : vm.neighborhood,
                        'zipcode' : vm.zipcode,
                        'city': vm.city,
                        'uf': vm.uf

                    },
                    'phone' : {
                        'ddd' : vm.ddd.toString(),
                        'number' : vm.number.toString()
                    }

                }

                console.log(customer);

                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(customer.birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data inválida'});                        
                    return;
                }

                var cpf = customer.document_number.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,customer.birthdate)
                .then(function(result){
                    console.log(result);
                    if(result.status){
                        var validaCamposReturn = {
                            success: true,
                            msg: 'Cpf válido'
                        }
                    }else{
                        DialogFactory.showMessageDialog({mensagem: 'CPF inválido'});                                       
                       return;
                    }
                });


            }
            catch(erro){
                console.log(erro)
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                        

                return;
            }

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';

                PagarmeService.postTransactionCard(vm.amount, cardHash, customer)
                .then(function(result){


                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.statusTransaction = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                                
                        }
                        catch(erro){
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação'});                              
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                            
                        console.log(error.data.errors)

                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro.message});                                
                        }, this);

                    }
                    catch(erro){
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                                
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro});      

            });

        }

         function uploadFile(file){
             console.log('-- uploadFile')
            var q = $q.defer();
            console.log(file)
            var showLoader = DialogFactory.showLoader('Enviando...');            

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso.'});                      
                showLoader.close();
                 q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                DialogFactory.showMessageDialog({mensagem: 'Não foi possivel enviar imagens'});                
                showLoader.close();
                q.reject(error);
            });
            return q.promise;
        }

        function faseCadastro(){
            vm.faseCadastro = true;
            vm.fasePagamento = false;
        }

        function fasePagamento(){
            vm.faseCadastro = false;
            vm.fasePagamento = true;
        }

        function fotoIdentidadeCamera() {

            console.log('fotoIdentidadeCamera')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    var listName = entry.nativeURL.split('/');

                    vm.fotos.push(entry.nativeURL);
                    listaImagens.push(listName[listName.length - 1]);

                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });

                    startListUpload(vm.fotos);

                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }

        function startListUpload(photos){

            var showLoader = DialogFactory.showLoader('Enviando...');            

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {

                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso'});                
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    personCheckout.Images.push(blob.name);
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }       


    }
})();
(function () {
    'use strict';
    
     angular.module('foneClub').controller('ImportContelTopupHistModalController', ImportContelTopupHistModalController);
    
     ImportContelTopupHistModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function ImportContelTopupHistModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;

            vm.ReadExcelData = ReadExcelData;
            

            function ReadExcelData() {
                debugger;  
               
                var regex = /\.(xls[mx]?)$/;  
                var fileName = $("#ngexcelfile1").val();
                /*Checks whether the file is a valid excel file*/  
                if (regex.test($("#ngexcelfile1").val().toLowerCase())) {  
                  var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/  
                  if ($("#ngexcelfile1").val().toLowerCase().indexOf(".xlsx") > 0) {  
                    xlsxflag = true;  
                  }  
                  /*Checks whether the browser supports HTML5*/  
                  if (typeof (FileReader) != "undefined") {  
                    var reader = new FileReader();  
                   
                    
                    reader.onload = function (e) { 
                      var isInvalid = false;
                      var finalOutput = [];
                      var globaldata = {};

                      var data = e.target.result;  
                      /*Converts the excel data in to object*/  
                      if (xlsxflag) {  
                        var workbook = XLSX.read(data, { type: 'binary' });  
                      }  
                      else {  
                        var workbook = XLS.read(data, { type: 'binary' });  
                      }  
                      /*Gets all the sheetnames of excel in to a variable*/  
                      var sheet_name_list = workbook.SheetNames;  
                      var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/  
                      sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/  
                        /*Convert the cell value to Json*/  
                      var count = parseInt(workbook.Sheets[y]['!ref'].split(':')[1].replace(/\D/g, ""));
                      for(var iloop = 2; iloop <= count; iloop++){
                        var rowdata = {};
                    
                        rowdata.txtTipo = workbook.Sheets[y]["A" + iloop].v;
                        rowdata.DteDateRec = workbook.Sheets[y]["B" + iloop].w;
                        rowdata.txtValor = workbook.Sheets[y]["C" + iloop] !=undefined ? workbook.Sheets[y]["C" + iloop].w.replace("R$ ","") :"";
                        rowdata.txtName = workbook.Sheets[y]["D" + iloop] != undefined ? workbook.Sheets[y]["D" + iloop].v : "";
                        rowdata.txtApelido = workbook.Sheets[y]["E" + iloop] != undefined ? workbook.Sheets[y]["E" + iloop].v : "";
                        rowdata.txtLinha = workbook.Sheets[y]["F" + iloop] != undefined ? workbook.Sheets[y]["F" + iloop].w : "";
                        rowdata.txtPlano = workbook.Sheets[y]["G" + iloop] !=undefined ? workbook.Sheets[y]["G" + iloop].v:"";
                        rowdata.txtValorPlano = workbook.Sheets[y]["H" + iloop] != undefined ? workbook.Sheets[y]["H" + iloop].v : "";
                        rowdata.txtREALIZADAPOR = workbook.Sheets[y]["I" + iloop] != undefined ?  workbook.Sheets[y]["I" + iloop].v:"";
                        finalOutput.push(rowdata);
                      };

                      FoneclubeService.saveImportTopupHistory(finalOutput).then(function (result) {
                        if(result){
                            alert("Data Imported Successfully");
                        }
                        else{
                            alert("Error occured while importing data");
                        }
                      });
                    });
                      
                  }
                    if (xlsxflag) {/*If excel file is .xlsx extension than creates a Array Buffer from excel*/  
                      reader.readAsArrayBuffer($("#ngexcelfile1")[0].files[0]);  
                    }  
                    else {  
                      reader.readAsBinaryString($("#ngexcelfile1")[0].files[0]);  
                    }  
                  }  
                  else {  
                    alert("Sorry! Your browser does not support HTML5!");  
                  }  
                }  
                else {  
                  alert("Please upload a valid Excel file!");  
                }  
            } 

          }
})();
    
(function () {
  'use strict';

  angular.module('foneClub').controller('CustomersController', CustomersController);

  CustomersController.inject = [
    // 'PagarmeService',
    'DialogFactory',
    '$scope',
    'ViewModelUtilsService',
    'FoneclubeService',
    // 'MainUtils',
    // 'DataFactory',
    'FlowManagerService',
    'localStorageService',
    // '$templateCache',
    'NgTableParams',
    // '$state',
    // '$rootScope',
    // '$stateParams',
    'UtilsService',
    // 'ngTableDefaults'
    '$filter'
  ];
  function CustomersController(
    // PagarmeService,
    DialogFactory,
    $scope,
    ViewModelUtilsService,
    FoneclubeService,
    // MainUtils,
    // DataFactory,
    FlowManagerService,
    localStorageService,
    // $templateCache,
    NgTableParams,
    // $state,
    // $rootScope,
    // $stateParams,
    UtilsService,
    // ngTableDefaults
    $filter
  ) {

    var vm = this;
    var checkvalidate = localStorageService.get('userid');

    var customerPerPage = 50;

    vm.filters = {
      active: false,
      inactive: false,
      regerror: false,
      all: true,
      excludeFather: false,
      excludeAddress: false,
      search: ''
    };

    vm.totalDisplayedCustomers = 1;

    vm.data = {};
    vm.onTapSwitchActivate = onTapSwitchActivate;
    vm.onTapCustomer = onTapCustomer;
    vm.onTapCustomerEdit = onTapCustomerEdit;
    vm.onTapRepeatLastCharge = onTapRepeatLastCharge;
    vm.onTapBoleto = onTapBoleto;
    vm.onTapBoletoPayment = onTapBoletoPayment;
    vm.onTapDebito = onTapDebito;
    vm.onTapNewCardPayment = onTapNewCardPayment;
    vm.onTapExcluir = onTapExcluir;
    vm.onDeleteCustomer = onDeleteCustomer;
    vm.onTapComment = onTapComment;
    vm.onTapMessage = onTapMessage;
    vm.onTapFlag = onTapFlag;

    initialize();

    function initialize() {
      if (checkvalidate == null) {
        FlowManagerService.changeLoginView();
      }


      FoneclubeService.getAllCustomers(true).then(function (result) {


        FoneclubeService.getCustomerDaysWithoutCharge().then(function (resultDaysWithoutCharge) {

          
          console.log('Wooooooorks')
          console.log(resultDaysWithoutCharge)
          var teste= resultDaysWithoutCharge;
          
          vm.data.customers = result.map(function (user) {

            user.Teste = 'working'
            for(var i in resultDaysWithoutCharge){
              if(user.Id == resultDaysWithoutCharge[i].Id){
                try{
                  user.DiasSemCobrar = resultDaysWithoutCharge[i].Charging.DiasSemCobrar
                }
                catch(e){}
                
              }
            }
            

            // user.Phones = user.Phones.map(function (phone) {
            //   if (phone) {
            //     phone.phoneFull = phone.DDD.concat(phone.Number);
            //   }
            //   return phone;
            // });
            return user;
          });
          var customersSemSoftDelete = [];
          for (var i in vm.data.customers) {
            var customer = vm.data.customers[i];
            if (!customer.SoftDelete) {
              customer.PhoneDDDParent = null;
              customer.PhoneNumberParent = null;
              for (var i in customer.Phones) {
                if (customer.Phones[i]) {
                  if (!customer.Phones[i].IsFoneclube) {
                    customer.Phones.splice(i, 1);
                  }
                }
              }
  
              customersSemSoftDelete.push(customer);
            }
          }
  
          vm.tableParams = createUsingFullOptions(customersSemSoftDelete);
          vm.tableParams.reload();
          
  
        })

        

        
      });



    }

    /* Deprecated since 09-02-2019 | Ariê Furtado 
    $scope.$watch('vm.searchUser', function() {
      try {
        var search = vm.searchUser.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');
        var isnum = /^\d+$/.test(search.replace(' ', ''));

        if (isnum) vm.searchIgnoreAccent = search.replace(' ', '');
        else vm.searchIgnoreAccent = search;

        // debugger;
        vm.tableParams.filter({ $: vm.searchIgnoreAccent });
        vm.tableParams.reload();
      } catch (e) {}
    }); */

    function onDeleteCustomer(customer) {
      var r = confirm('Deseja fazer um soft delete nesse cliente?');
      if (r == true) {
        FoneclubeService.postSoftDeleteCustomer(customer).then(function (result) {
          if (result) {
            alert('Cliente deletado');
            customer.SoftDelete = true;
          }
        });
        /* .catch(function(error) {
            console.log(error);
          }); */
      } else {
        txt = 'You pressed Cancel!';
      }
    }

    function createUsingFullOptions(customers) {
      return new NgTableParams(
        {
          count: customerPerPage, // initial page size
          filter: vm.filters
        },
        {
          // determines the pager buttons (left set of buttons in demo)
          paginationMaxBlocks: 10,
          paginationMinBlocks: 1,
          dataset: customers,
          getData: function (params) {
            var search = vm.filters.search;
            var filtered = getFilteredCustomers(customers, params);

            if (search && search !== '') {
              search = normalizeText(search);// search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');

              //var isnum = /^\d+$/.test(value.replace(' ', ''));

              // filtered = $filter('filter')(filtered, {
              //   Name: isnum ? value.replace(' ', '') : value
              // });
              search = search.toLowerCase();
              filtered = $filter('filter')(filtered, function (data) {
                if (search) {
                  return data.Name.toLowerCase().indexOf(search) > -1 ||
                    data.Email.toLowerCase().indexOf(search) > -1 ||
                    (data.DocumentNumber ? data.DocumentNumber.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.NickName ? data.NickName.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.Born ? data.Born.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.IdPagarme ? data.IdPagarme.toString().indexOf(search) > -1 : false) ||
                    matchPhone(data.Phones, search) ||
                    (!vm.filters.excludeAddress ? matchAddress(data.Addresses, search) : false) ||
                    (!vm.filters.excludeFather ? (data.NameParent ? data.NameParent.toLowerCase().indexOf(search) > -1 : false) : false);
                } else {
                  return true;
                }
              });
            }

            params.settings({
              counts: filtered.length > customerPerPage ? [50, 100, 500] : [],
              total: filtered.length
            });

            filtered = filtered.slice(
              (params.page() - 1) * params.count(),
              params.page() * params.count()
            );

            vm.totalDisplayedCustomers = filtered.length;

            return filtered;
          }
        }
      );
    }

    function matchPhone(phones, numberToCompare) {
      numberToCompare = numberToCompare.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~' 'éá]/g, '');
      if (phones && phones.length > 0) {
        if (phones[0] == null) {
          return false;
        } else {
          var phone = $filter('filter')(phones, function (data) {
            return (data.Number ? ("55" + data.DDD + data.Number.toString()).indexOf(numberToCompare) > -1 : false);
          });

          return phone.length > 0;
        }
      }

      return false;
    }
    function matchAddress(addresses, address) {
      if (addresses && addresses.length > 0) {
        if (addresses[0] == null) {
          return false;
        } else {
          var address = $filter('filter')(addresses, function (data) {
            data.Street = normalizeText(data.Street);
            return (data.Street ? data.Street.toLowerCase().indexOf(address) > -1 : false);
          });

          return address.length > 0;
        }
      }

      return false;
    }
    function normalizeText(text) {
      var weird = 'öüóőúéáàűíÖÜÓŐÚÉÁÀŰÍçÇ';
      var normalized = 'ouooueaauiOUOOUEAAUIcC';
      var idoff = -1, new_text = '';
      var lentext = text.toString().length - 1

      for (i = 0; i <= lentext; i++) {
        if (text[i].trim() == "+") {
          new_text += text[i];
        }
        else {
          idoff = weird.search(text.charAt(i));
          if (idoff == -1 || text.charAt(i) == ".") {
            new_text = new_text + text.charAt(i);
          } else {
            new_text = new_text + normalized.charAt(idoff);
          }
        }
      }

      return new_text;
    }

    function getFilteredCustomers(customers) {
      if (vm.filters.active) {
        customers = $filter('customerBy')(customers, 'active');
      }

      if (vm.filters.inactive) {
        customers = $filter('customerBy')(customers, 'inactive');
      }

      if (vm.filters.regerror) {
        customers = $filter('customerBy')(customers, 'regerror');
      }

      return customers;
    }

    //////////////////////////////////////////////////
    // Eventos de tap
    function onTapSwitchActivate(c) {
      var oldValue = angular.copy(c.Desativo);

      var customer = {
        Id: c.Id,
        Desativo: !c.Desativo
      };

      var confirmMessage = `
        <span class="text-center">
          Tem certeza que deseja ${c.Desativo ? 'ativar' : 'desativar'} esse cliente?
        </span>
      `;

      // TODO: confirm dialog
      ViewModelUtilsService.showConfirmDialog('Atenção!', confirmMessage).then(function (
        confirm
      ) {
        if (confirm) {
          c.Desativo = customer.Desativo;

          FoneclubeService.postPersonAtivity(customer).then(function (result) {
            if (!result) {
              customer.Desativo = oldValue;
            }
          });
        }
      });
    }

    function onTapCustomerEdit(customer, index) {
      customer.view = 1;
      FlowManagerService.changeEdicaoView(customer);
    }

    function onTapCustomer(customer, index) {
      ViewModelUtilsService.showModalCustomer(customer, index);
    }

    function onTapComment(customer) {
      ViewModelUtilsService.showModalComment(customer);
    }

    /* Not used! | Ariê Furtado
    function clearDocumentField(documentNumber) {
      vm.documentClear = UtilsService.clearDocumentNumber(documentNumber);
    } */

    function onTapNewCardPayment(customer) {
      ViewModelUtilsService.showModalNewCardPayment(customer);
    }

    function onTapBoletoPayment(customer) {
      ViewModelUtilsService.showModalBoletoPayment(customer);
    }

    function onTapBoleto(customer) {
      ViewModelUtilsService.showModalBoleto(customer);
    }

    function onTapDebito(customer) {
      ViewModelUtilsService.showModalDebito(customer);
    }

    function onTapRepeatLastCharge(customer) {
      FoneclubeService.getLastPaymentType(customer).then(function (result) {
        if (result['intIdPaymentType'] == 1) {
          ViewModelUtilsService.showModalRepeatCard(result, customer);
        }
      }); /* 
        .catch(function(error) {
          console.log('catch error');
          console.log(error);
        }); */
    }

    function onTapExcluir(customer) {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber
      };
      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.postDeletePerson(personCheckout).then(function (result) {
            if (result) {
              DialogFactory.showMessageDialog({
                message:
                  'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido'
              });
              closeThisDialog(0);
            } else DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
          }); /* 
            .catch(function(error) {
              console.log('catch error');
              console.log(error);
            }); */
        }
      });
    }

    //open whatsapp messages box
    function onTapMessage(customer) {
      ViewModelUtilsService.showModalWhatsapp(customer);
    }

    function onTapFlag(customer) {
      ViewModelUtilsService.showModalFlag(customer);
    }

  }
})();

(function () {
    'use strict';
    
     angular.module('foneClub').controller('DrCelularModalController', DrCelularModalController);
    
     DrCelularModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function DrCelularModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            vm.importType = "CLARO";
            vm.portmonths = ["Jan", "Fev","Mar","Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];

            vm.ReadExcelData = ReadExcelData;
            init();

            function init(){
              vm.importType = "CLARO";
            }


            function ReadExcelData() {
                debugger;  
               
                var regex = /\.(xls[mx]?)$/;  
                var fileName = $("#ngexcelfile").val();
                /*Checks whether the file is a valid excel file*/  
                if (regex.test($("#ngexcelfile").val().toLowerCase())) {  
                  var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/  
                  if ($("#ngexcelfile").val().toLowerCase().indexOf(".xlsx") > 0) {  
                    xlsxflag = true;  
                  }  
                  /*Checks whether the browser supports HTML5*/  
                  if (typeof (FileReader) != "undefined") {  
                    var reader = new FileReader();  
                   
                    
                    reader.onload = function (e) { 
                      var isInvalid = false;
                      var finalOutput = [];
                      var globaldata = {};

                      var data = e.target.result;  
                      /*Converts the excel data in to object*/  
                      if (xlsxflag) {  
                        var workbook = XLSX.read(data, { type: 'binary' });  
                      }  
                      else {  
                        var workbook = XLS.read(data, { type: 'binary' });  
                      }  
                      /*Gets all the sheetnames of excel in to a variable*/  
                      var sheet_name_list = workbook.SheetNames;  
                      var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/  
                      sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/  
                        /*Convert the cell value to Json*/  
                        
                        if(y == "Visao Geral"){
                            var anomes = workbook.Sheets[y].C4.v.split('/');
                            globaldata.mes = vm.portmonths.indexOf(anomes[0]) + 1;
                            globaldata.ano = anomes[1];
                            globaldata.txtFatura = workbook.Sheets[y].B3.v;
                            globaldata.txtNumberPhones = workbook.Sheets[y].C5.v;
                            globaldata.txtPeriodo = workbook.Sheets[y].C4.v;
                        }
                        if(y == "Resumo"){
                          if(workbook.Sheets[y]["A" + 3].v == "Acessos" && workbook.Sheets[y]["B" + 3].v == "Plano de Servico" && workbook.Sheets[y]["C" + 3].v.includes("Centro de custo") && workbook.Sheets[y]["D" + 3].v == "Usuário" && workbook.Sheets[y]["O" + 3].v == "Valor Total da Fatura" && workbook.Sheets[y]["P" + 3].v == "Funcionalidade")
                          {
                          for(var iloop = 4; iloop < 10000; iloop++){
                            if(workbook.Sheets[y]["D" + iloop] != undefined)
                            {
                              var rowdata = {};
                              rowdata.txtCliente = workbook.Sheets[y].A2.v;
                              rowdata.txtEmpresa = workbook.Sheets[y].A2.v.includes("FREENETCOM") ? "FREENETCOM": "RM";
                              rowdata.txtOperadora = fileName.includes("TIM")? "TIM": "CLARO";
                              rowdata.txtLinha = workbook.Sheets[y]["A" + iloop]!=undefined ? workbook.Sheets[y]["A" + iloop].v:"";
                              rowdata.txtPlanoDeServico = workbook.Sheets[y]["B" + iloop]!=undefined ? workbook.Sheets[y]["B" + iloop].v:"";
                              rowdata.txtCentroDeCusto = workbook.Sheets[y]["C" + iloop]!=undefined ? workbook.Sheets[y]["C" + iloop].v:"";
                              rowdata.txtUsuario = workbook.Sheets[y]["D" + iloop]!=undefined ? workbook.Sheets[y]["D" + iloop].v:"";
                              rowdata.txtValorTotalFatura = workbook.Sheets[y]["O" + iloop]!=undefined ? "R$" + workbook.Sheets[y]["O" + iloop].v:"";
                              rowdata.txtFuncionalidade = workbook.Sheets[y]["P" + iloop]!=undefined ? workbook.Sheets[y]["P" + iloop].v:"";
                              finalOutput.push(rowdata);
                            }
                            else
                              break;
                          }
                        }
                        else
                          isInvalid = true;
                        }
                        if(y == "Mensalidades"){
                           if(workbook.Sheets[y]["A" + 3].v == "Acessos" && workbook.Sheets[y]["B" + 3].v == "Sem Uso"){
                            var reg = /^\d+$/;
                            for(var iloop = 4; iloop < 10000; iloop++){
                              if(workbook.Sheets[y]["A" + iloop] != undefined && reg.test(workbook.Sheets[y]["A" + iloop].v))
                              {
                                var isExists = finalOutput.find(x=>x.txtLinha == workbook.Sheets[y]["A" + iloop].v);
                                if(isExists!=undefined){
                                  isExists.txtUsoLinha = workbook.Sheets[y]["B" + iloop]!=undefined ? workbook.Sheets[y]["B" + iloop].v:"";
                                }
                              }
                              else
                                break;
                            }
                        }
                        else
                          isInvalid = true;
                        }
                      }); 
                      
                      if(!isInvalid)
                      {
                        finalOutput.forEach(element => {
                        element.ano = globaldata.ano;
                        element.mes = globaldata.mes;
                        element.txtFatura = globaldata.txtFatura;
                        element.txtNumberPhones = globaldata.txtNumberPhones;
                        element.txtOperadoraButton = strtype == 1 ? "CLARO" : "TIM";
                        element.txtPeriodo = globaldata.txtPeriodo;
                        element.txtLinha = element.txtLinha.toString();
                      });

                      console.log(finalOutput);
                      var tblDrCelular = {};
                      tblDrCelular.tblDrCelularTemps = finalOutput;
                      FoneclubeService.verifyImportDrCelular(finalOutput[0].ano, finalOutput[0].mes, finalOutput[0].txtOperadoraButton, finalOutput[0].txtEmpresa).then(function(result){
                        if(result){
                          ViewModelUtilsService.showConfirmDialog('Data already exist for '+ finalOutput[0].mes + '/' +finalOutput[0].ano +' and Empresa : '+finalOutput[0].txtEmpresa+'', 'Do you want to override?').then(function(confirm) {
                            if (confirm) {
                              FoneclubeService.saveImportDrCelular(tblDrCelular).then(function (result) {
                                if(result){
                                   alert("Data Imported Successfully");
                                }
                                else{
                                  alert("Error occured while importing data");
                                }
                              });
                            }
                          });
                        }
                        else
                        {
                          FoneclubeService.saveImportDrCelular(tblDrCelular).then(function (result) {
                                if(result){
                                   alert("Data Imported Successfully");
                                }
                                else{
                                  alert("Error occured while importing data");
                                }
                          });
                        }
                      })
                    } 
                    else{
                      alert("Please check the column header, it is not in required format");
                    }
                  }
                    if (xlsxflag) {/*If excel file is .xlsx extension than creates a Array Buffer from excel*/  
                      reader.readAsArrayBuffer($("#ngexcelfile")[0].files[0]);  
                    }  
                    else {  
                      reader.readAsBinaryString($("#ngexcelfile")[0].files[0]);  
                    }  
                  }  
                  else {  
                    alert("Sorry! Your browser does not support HTML5!");  
                  }  
                }  
                else {  
                  alert("Please upload a valid Excel file!");  
                }  
            } 
        }
})();
    
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('EstoqueController', EstoqueController);
    
      EstoqueController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService', 'NgTableParams', '$scope', 'DialogFactory'];
      function EstoqueController(FlowManagerService, FoneclubeService, PagarmeService, NgTableParams, $scope, DialogFactory) {
            
        var vm = this;
        vm.result;
        vm.onConfirmaEditcao = onConfirmaEditcao;
        vm.proprietarias = ["FC", "RM", "RM (FC)"]

        // https://codepen.io/cardozo/pen/QVYXeX    
        FoneclubeService.getLinhasEstoque().then(function(result){

            FoneclubeService.getStatusTelefonesOperadora().then(function (result) {
                
                for(var i in vm.result)
                {
                    var telefone = vm.result[i].linhaLivreOperadora;
                    vm.result[i].usoLinha = "Sem dados na SP";
                    vm.result[i].plano = "Sem dados na SP";
                    vm.result[i].divergente = -1;

                    for(var r in result){
                        if(telefone == result[r].phone){

                            var operadora; 
                            if(result[r].operadora == 1)
                            {
                                operadora = 'CLARO'
                            } 
                            else if(result[r].operadora == 2)
                            {
                                operadora = 'VIVO'
                            }

                            vm.result[i].plano = operadora + " " + result[r].plano;
                            vm.result[i].usoLinha = result[r].usoLinha ? "Sim" : "Não";
                        }
                    }
                }

                vm.result
                // debugger;
                
            })
            

            for(var i in result){
                if(result[i].operadora == 1)
                    result[i].operadoraDescription = 'CLARO'
                else
                    result[i].operadoraDescription = 'VIVO'
            }

            vm.result = result

            vm.initialParams = {
                count: 1000 // initial page size
              };
            vm.initialSettings = {
            // page size buttons (right set of buttons in demo)
            counts: [50,100,500, 1000],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 10,
            paginationMinBlocks: 1,
            dataset: vm.result
            };

            vm.tableParams = new NgTableParams(vm.initialParams, vm.initialSettings)
            // debugger
        })

        
        $scope.$watch("vm.tableParams", function () {
            
            console.log('Works')
        });

        function onConfirmaEditcao(linha){
            console.log('onConfirmaEditcao')
            console.log(linha)

            //public int IdLinha { get; set; }
            // public string linhaLivreOperadora { get; set; }
            // public int? operadora { get; set; }
            // public string descricao { get; set; }
            // public string propriedadeInterna { get; set; }
            // public int propriedadeInternaId { get; set; }

            var estoquePhone = {
                'IdLinha': linha.IdLinha,
                'operadora': 0,
                'propriedadeInternaId': 0,
                'propriedadeInterna': linha.selectedpropriedadeInterna
            }

            FoneclubeService.postPropriedadeIterna(estoquePhone).then(function (result) {
                if(result == true){
                    DialogFactory.showMessageDialog({ mensagem: 'Associação realizada' });
                }
                else{
                    DialogFactory.showMessageDialog({ mensagem: 'Associação com problema' });
                }
            })
        }
        
    
      }
    })();
    
(function () {

  angular.module('foneClub').controller('FacilController', FacilController);

  FacilController.inject = ['ViewModelUtilsService', 'MainUtils', 'FoneclubeService', 'DialogFactory', '$scope'];

  function FacilController(ViewModelUtilsService, MainUtils, FoneclubeService, DialogFactory, $scope) {
    var vm = this;
    vm.chargeForm = {};
    vm.isLoad = false;
    vm.LoadData = {};
    vm.chargeForm.Nome = "";
    vm.startDate = moment().startOf('month').format('YYYY-MM-DD');
    vm.endDate = moment().endOf('month').format('YYYY-MM-DD');
    vm.isSelected = true;
    vm.selected = null;
    vm.gridWidth = $(window).width() - 150;
    vm.gridHeight = $(window).height() - 150;
    vm.Operations = ["RECARGA", "ATIVAÇÃO", "VENDA DE FICHAS"];
    vm.Operation = "ATIVAÇÃO";
    vm.Choices = ["ENTRADA", "SAÍDA"];
    vm.Choice = "SAÍDA";
    vm.selectItem = selectItem;
    vm.setSelectedName = setSelectedName;
    vm.clearSelectedName = clearSelectedName;
    vm.addNewIntlUser = addNewIntlUser;
    vm.LoadUserData = LoadUserData;
    vm.DepositHistory = DepositHistory;
    vm.AddBalance = AddBalance;
    vm.history1 = {};

    vm.gridOptions1 = {
            columnDefs: [ 
              { field: "Id", hide: true },
              { field: 'DeductedDate', headerName:'DATA', width: 200 ,
                cellRenderer: function (params) {
    				        return moment(params.data.DeductedDate).format("DD MMM YYYY HH:mm:ss");
    			      },
                filter:"agDateColumnFilter",
                filterParams: {
                  filterOptions: ['equals', 'lessThan', 'lessThanOrEqual', 'greaterThan', 'greaterThanOrEqual'],
                },
                comparator: function(filterLocalDateAtMidnight, cellValue) {
                    //using moment js
                    var dateAsString = moment(cellValue).format('DD/MM/YYYY');
                    var dateParts = dateAsString.split("/");
                    var cellDate = new Date(Number(dateParts[2]), Number(dateParts[1]) - 1, Number(dateParts[0]));
                  
                    if (filterLocalDateAtMidnight.getTime() == cellDate.getTime()) {
                      return 0
                    }
                  
                    if (cellDate < filterLocalDateAtMidnight) {
                      return -1;
                    }
                  
                    if (cellDate > filterLocalDateAtMidnight) {
                      return 1;
                    }
                  }
              },
              { field: 'Category', headerName:'Categoria', width: 150 },
              { field: 'AmountDeducted', headerName:'VALOR', width: 100 },
              { field: 'Phone', headerName:'Linha', width: 200 },
              { field: 'Plan', headerName:'Plano', width: 150 },
              { field: 'IsRefund', headerName:'Is Refund', width: 100 ,
                cellRenderer: function (params) {
                  if (params.value != null) {
                    var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' +  (!params.value ? "customeroff.png" : "customeron.png") + '" /></a>';
                    return cellHtml;
                  }
                },
                onCellClicked:function(data)
                {
                  var enableRefund = false;
                  if(!data.value)
                  {
                    enableRefund = true;
                  }
                  var data1 = {
                    Id : data.data.Id,
                    Phone: data.data.Phone,
                    IsRefund : enableRefund,
                    Action: 'Refund'
                  };

                  ViewModelUtilsService.showConfirmDialog('Atenção!', 'Tem certeza de que deseja reembolsar o valor da linha:'+ data.data.Phone).then(function(confirm) 
                    {
			                if (confirm) 
                      {

                        FoneclubeService.updateRefundInfo(data1).then(function(result){
                          DialogFactory.showMessageDialog({mensagem: result});

                          vm.LoadData.Purchases[data.rowIndex].IsRefund = enableRefund;
                          bindAgGrid1(data);
                        });
                      }
                    });
                }
              },
              { field: 'Comment', headerName:'Comment', width: 400,  editable: true, cellEditor: "agLargeTextCellEditor",
              onCellValueChanged: function(data){
                  if(data.value)
                  {
                    var data1 = {
                      Id : data.data.Id,
                      Phone: data.data.Phone,
                      IsRefund : data.data.IsRefund,
                      Comment : data.value,
                      Action: 'Comment'
                    };
                    FoneclubeService.updateRefundInfo(data1).then(function(result){
                      vm.LoadData.Purchases[data.rowIndex].Comment = data.value;
                      bindAgGrid1(data);
                  });
                }
              }}
            ],
            defaultColDef: {
              //flex: 1,
              sortable: true,
              filter: true,
              resizable: true
            },
            singleClickEdit:true,
            enableCellTextSelection: true,
            autoSizeColumns: true,
            rowHeight: 30,
            headerHeight: 120,
            onGridReady: function(params) {
                this.gridApi = params.api;
                this.gridColumnApi = params.columnApi;
                bindAgGrid1(vm.history1);
            }
        }

    init();

    function init(){
        var showLoader1 = DialogFactory.showLoader("aguarde enquanto buscamos os dados");
        FoneclubeService.getAllInternationUsers().then(function(result){
            vm.Names = result;
            //vm.gridOptions1.api.setRowData(null);
            showLoader1.close();
        });
    }

    function bindAgGrid1(data) {
       
        var rowData = convertToViewModel1(vm.LoadData.Purchases);
        if (vm.gridOptions1.api) {
            vm.gridOptions1.api.setRowData(rowData);
        } 
                
    }

    function convertToViewModel1(data){
            var templateDataList = [];
            for (var i = 0; i < data.length; i++) {
                var datamodel = data[i];
                templateDataList.push({
                    'Id' : datamodel.Id,
                    'AmountDeducted': datamodel.Amount,
                    'Category': datamodel.Category,
                    'DeductedDate': datamodel.Date,
                    'Phone': datamodel.Line,
                    'Plan': datamodel.Plan,
                    'IsRefund': datamodel.IsRefund,
                    'Comment': datamodel.Comment
                });
            }
            return templateDataList;
        }

    function selectItem(val){
        vm.isSelected = val;
    }
    
    function setSelectedName(item){
        vm.isSelected = true;
        vm.selected = item;
        vm.chargeForm.Nome = item.Name;
    }

    function clearSelectedName(){
      vm.chargeForm.Nome = "";
    }

    function addNewIntlUser(){
      ViewModelUtilsService.showIntlAddUserModalTemplate(null);
    }

    function LoadUserData()
    {
      if(vm.selected.Id!=null)
      {
        vm.LoadData.Purchases = [];
        var data = {
          Id : vm.selected.Id,
          StartDate : vm.startDate,
          EndDate : vm.endDate,
          Operation : vm.Operation,
          Choice : vm.Choice
        };
        var showLoader1 = DialogFactory.showLoader("aguarde enquanto buscamos os dados");
        FoneclubeService.getAllInternationUserData(data).then(function(result){
            showLoader1.close();
            vm.isLoad= true;

            vm.LoadData = result;

            vm.LoadData.TotalPurchaseAmount = (parseInt(vm.LoadData.TotalPurchaseAmount.replace(",","")) / 100).toLocaleString('pt-br');
            vm.LoadData.CurrentBalance = (parseInt(vm.LoadData.CurrentBalance.replace(",","")) / 100).toLocaleString('pt-br');
            vm.LoadData.TotalDeposits = (parseInt(vm.LoadData.TotalDeposits.replace(",","")) / 100).toLocaleString('pt-br');

            var rowData = convertToViewModel1(vm.LoadData.Purchases);
            if (vm.gridOptions1.api) {
              vm.gridOptions1.api.setRowData(rowData);
            } 
        });
      }
    }

    function AddBalance()
    {
      var customer = {
        Name : vm.LoadData.PersonInfo.Name,
        Id: vm.LoadData.IdPerson
      };
      ViewModelUtilsService.showInternationDeposits(customer);
    }

    function DepositHistory(){
      ViewModelUtilsService.showFacilDeposits(vm.LoadData.Deposits);
    }
  }
})();

(function () {
  'use strict';

  angular.module('foneClub').controller('FacilAddNewController', FacilAddNewController);

  FacilAddNewController.inject = ['ViewModelUtilsService', 'MainUtils', 'FoneclubeService', 'DialogFactory', '$scope'];

  function FacilAddNewController(ViewModelUtilsService, MainUtils, FoneclubeService, DialogFactory, $scope) {
    var vm = this;
    vm.addNewIntlUser = addNewIntlUser;

    function addNewIntlUser(){
      var data = {
        Name : vm.Name,
        DocumentNumber: vm.CPF,
        DefaultWAPhones : vm.Phone,
        Email: vm.Email,
        Password: vm.Password
      }
      FoneclubeService.postRegisterIntlCustomer(data).then(function (result) {
        DialogFactory.showMessageDialog({ mensagem: result });
      });
    }

  }
})();

(function () {
  'use strict';

  angular.module('foneClub').controller('FacilDepositHistoryController', FacilDepositHistoryController);

  FacilDepositHistoryController.inject = ['ViewModelUtilsService',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService',
    '$stateParams', '$filter'];

  function FacilDepositHistoryController(ViewModelUtilsService,
    FoneclubeService,
    DialogFactory,
    UtilsService,
    $stateParams, $filter) {
    var vm = this;

    vm.history = ViewModelUtilsService.modalData;
    vm.gridWidth = ($(window).width() - 20) + "px";
    vm.gridHeight = 300;

    vm.gridOptions = {
      columnDefs: [
        {
          field: 'Date', headerName: 'DATA', width: 200, filterParams: filterDateParams, comparator: DateComparatorHistory, filter: "agDateColumnFilter",
          cellRenderer: function (params) {
              return moment(params.data.Date).format("DD MMM YYYY HH:mm:ss");
          }
        },
        { field: 'ClientName', headerName: 'Cliente Nome', width: 150 },
        { field: 'USDAmount', headerName: 'USD Amount', width: 100 },
        { field: 'HandlingCharge', headerName: 'Handling Charge', width: 100 },
        { field: 'FinalAmount', headerName: 'Final Amount', width: 100 },
        { field: 'Source', headerName: 'Source', width: 200 },
        { field: 'IsRefund', headerName: 'Is Refund?', width: 100 },
        { field: 'Comment', headerName: 'Comment', width: 250 }
      ],
      defaultColDef: {
        //flex: 1,
        sortable: true,
        filter: true,
        resizable: true
      },
      singleClickEdit: true,
      enableCellTextSelection: true,
      autoSizeColumns: true,
      rowHeight: 30,
      headerHeight: 120,
      onGridReady: function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        bindAgGrid(vm.history);
      }
    }

    function bindAgGrid(data) {
      var rowData = convertToViewModel(data);
      if (vm.gridOptions.api) {
        vm.gridOptions.api.setRowData(rowData);
      }
    }

    function convertToViewModel(data) {
      var templateDataList = [];
      for (var i = 0; i < data.length; i++) {
        var datamodel = data[i];
        templateDataList.push({
          'Date': datamodel.Date,
          'ClientName': datamodel.ClientName,
          'FinalAmount': datamodel.FinalAmount,
          'USDAmount': datamodel.USDAmount,
          'HandlingCharge':datamodel.HandlingCharge,
          'IsRefund':datamodel.IsRefund,
          'Source': datamodel.Source,
          'Comment' : datamodel.Comment
        });
      }
      return templateDataList;
    }

    init();


    function init() {
      
    }

    function DateComparatorHistory(valueA, valueB) {
      var defDate = new Date(1900, 0o1, 0o1);
      valueA = valueA == "" ? defDate : new Date(valueA);
      valueB = valueB == "" ? defDate : new Date(valueB);
      if (valueA == valueB) {
        return 0;
      }
      return valueA > valueB ? 1 : -1;
    }

    var filterDateParams = {
      comparator: function (filterLocalDateAtMidnight, cellValue) {
        var dateAsString = new Date(cellValue);
        if (dateAsString == null) return -1;

        if (dateAsString < filterLocalDateAtMidnight) {
          return -1;
        }

        if (dateAsString > filterLocalDateAtMidnight) {
          return 1;
        }
      },
      browserDatePicker: true,
      minValidYear: 2000,
      filterOptions: [
        "lessThan",
        {
          displayKey: "lessThanWithNulls",
          displayName: "Less Than with Nulls",
          predicate: ([filterValue], cellValue) =>
            cellValue == null || cellValue < filterValue,
        },
        "greaterThan",
        {
          displayKey: "greaterThanWithNulls",
          displayName: "Greater Than with Nulls",
          predicate: ([filterValue], cellValue) =>
            cellValue == null || cellValue > filterValue,
        },
        {
          displayKey: "betweenExclusive",
          displayName: "Between (Exclusive)",
          predicate: ([fv1, fv2], cellValue) =>
            cellValue == null || (fv1 < cellValue && fv2 > cellValue),
          numberOfInputs: 2,
        },
      ],
    };
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('HomeController', HomeController);

    HomeController.inject =
    [
        '$scope',
        '$cordovaCamera',
        '$cordovaFile',
        '$ionicLoading',
        'FileListUtil',
        'MainUtils',
        'FoneclubeService',
        '$q',
        '$rootScope',
        'MainComponents'
    ];

    function HomeController($scope, $cordovaCamera, $cordovaFile, $ionicLoading, FileListUtil, MainUtils, FoneclubeService, $q, $rootScope, MainComponents) {
        var vm = this;
        console.log('=== HomeController Controller ===');
        vm.images = [];
        vm.fotos = [];
        vm.addCheckout = addCheckout;
        vm.addPhoto = addPhoto;
        vm.urlForImage = urlForImage;
        vm.testeData = testeData;        

        var imageUploader = new ImageUploader();
        vm.result = {};
        vm.uploadGaleria = uploadGaleria;
        vm.version = MainComponents.getVersion();

        function addCheckout(){

            console.log('addCheckout');

            //esse ´o objeto checkout que vamos montar a partir do form
            //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': '12345678946',
                    'Name': 'Teste de pessoa',
                    'Email': 'teste@teste.com.br',
                    'Born': '08/11/1988',
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': 'sample string 1',
                    'Complement': 'sample string 2',
                    'StreetNumber': '100',
                    'Neighborhood': 'sample string 4',
                    'City': 'sample string 5',
                    'State': 'sample string 6',
                    'Cep': 'sample string 7'
                    }
                ],
                "Images": [
                    "sample string 1", //aqui vão os guids
                    "sample string 2"
                ],
                'Phones': [
                    {
                    'Id': 1,
                    'DDD': '21',
                    'Number': '22222222'
                    }
                ]
                };


            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }

        //TODO MainUtils.guid()
        // colocar nome das imagens id de usuario mais guid
        // remover imagens caso de troca

        function urlForImage(imageName) {

            var name = imageName.substr(imageName.lastIndexOf('/') + 1);
            var trueOrigin = cordova.file.dataDirectory + name;

            console.log("get correct path for image " + imageName);
            console.log("origin " + trueOrigin);
            return trueOrigin;
        }

        function addPhoto() {

            console.log('addPhoto')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    vm.fotos.push(entry.nativeURL);


                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });
                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }


        ////////////////////////////
        function uploadGaleria(param) {
            var file = FileListUtil.get();
            uploadFile(file);
        };

        function testeData(){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }

        function startListUpload(photos){

            $ionicLoading.show({
                template: 'Uploading...'
            });

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {
                $ionicLoading.hide();
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }

        function uploadFile(file){

            console.log('upload file')
            console.log(file)

            $ionicLoading.show({
                template: 'Carregando...'
            });

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                $ionicLoading.hide();
                $scope.$digest();
            })
            .catch((err) => {
                console.error(err);
                $ionicLoading.hide();
            });
        }

      window.location.href = "#/tab/customers";

        ////////////////////////////

    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutCustomerModalController', CheckoutCustomerModalController);

    CheckoutCustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService'];
    function CheckoutCustomerModalController(ViewModelUtilsService, PagarmeService) {
        var vm = this;
        var customer = ViewModelUtilsService.modalData;
        vm.onTapCard = onTapCard;
        vm.onTapPagar = onTapPagar;
        vm.cancelarPagamento = etapaEscolhaCartao;        
        initCardList();
        etapaEscolhaCartao();

        function initCardList(){
            console.log(customer.id)
            PagarmeService.getCard(customer.id)
            .then(function(result){
                vm.cards = result;
                console.log(result)
            })
            .catch(function(error){
                console.log(error);
                vm.message = 'falha ao recuperar cartão';
            });

        }

        function onTapCard(card){

            vm.card = card;
            etapaQuantia();

        }

        function onTapPagar(){

            vm.message = 'Transação iniciada';
            var customer;

            if(!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name)
            {
                customer = {
                    'name' : vm.customer.name,
                    'document_number' : vm.customer.document_number,
                    'email' : vm.customer.email
                    ,
                    'address' : {
                        'street' : 'empty',
                        'street_number' : '10',
                        'neighborhood' : 'empty',
                        'zipcode' : '01452000'
                    },
                    'phone' : {
                        'ddd' : '00',
                        'number' : '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

             PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
             .then(function(result){
                console.log('nova transac ' + result);
                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })


            console.log(customer)


        }

        function etapaEscolhaCartao(){
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
            vm.amount = '';
        }

        function etapaQuantia(){
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomerListController', CustomerListController);

    CustomerListController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService'];
    function CustomerListController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService) {
        var vm = this;
        vm.onTapCustomer = onTapCustomer;
        vm.showLoader = true;
        
        console.log('=== CustomerListController Controller ===');    

        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
            vm.showLoader = false;
            vm.customers = result;            
        })
        .catch(function(error){
            console.log(error);
        });

        function onTapCustomer(customer){
            console.log('onTapCustomer')
            console.log(customer);
             ViewModelUtilsService.showModal(customer);
        }



        /**$ionicModal.fromTemplateUrl('templates/modal.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.modal = modal;
  }); */

/*
        $ionicModal.fromTemplateUrl('modules/lista-customer/modal.html', {
            scope: $scope
        }).then(function(modal) {
            $scope.modal = modal;
        });*/







        /*

        //get cards ok
        PagarmeService.getCards()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get customers ok
        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get card ok 145059
        PagarmeService.getCard(145059)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //post boleto
        PagarmeService.postBoleto(6000)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        */




        /*
        var cardData = {
            cardHolderName:'Desenv C Teste',
            cardExpirationMonth:11,
            cardExpirationYear:17,
            cardNumber:'4716329201322757',
            cardCVV:'162'
        }

        PagarmeService.generateCardHash(cardData).then(function(cardHash){
            console.log(cardHash);
            /*
            PagarmeService.postTransactionCard(7000, cardHash)
            .then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log(error);
        });


        })
        .catch(function(error){
            //mensagem erro ao inserir dados
            console.log(error);
        });
        */





/*
        PagarmeService.postTransactionCard(7000, cardHash)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });
        */
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('LoginController', LoginController);

  LoginController.inject = ['FlowManagerService', 'MainComponents', '$scope', 'FireBaseManagerUtil', 'MainUtils', 'DialogFactory','localStorageService', 'FoneclubeService'];
  function LoginController(FlowManagerService, MainComponents, $scope, FireBaseManagerUtil, MainUtils, DialogFactory, localStorageService, FoneclubeService) {
        var vm = this;
        vm.login = login;
        vm.refresh = refresh;
        vm.version = MainComponents.getVersion();

        FoneclubeService.getReintegrateDatePagarme().then(function (result) {
            // debugger
            var registro = new Date(result);
            vm.dataClonePagarme = registro.toString().split('GMT')[0];
        }).catch(function(error){
            alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: lc24')
        })

        FoneclubeService.getScheduleDateExecuted().then(function (result) {
          // debugger
          var registro = new Date(result);
          vm.dateschedule = registro.toString().split('GMT')[0];
      }).catch(function(error){
          alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: lc24')
      })



        FoneclubeService.getStatusAPI().then(function(result){
                vm.statusBase = result;
                console.log(result)
        })

        function validaLogin(){

            var users = FireBaseManagerUtil.getUsers();


            for(var i in users){
                var user = users[i];
                if(user.user == vm.user && user.password == vm.password)
                {
                    MainUtils.setAgent(user.user);
                    return true;
                }

            }

            return false;
        }

        function login(){
            if(validaLogin())
            {
              localStorageService.add("userid",'True')
              FlowManagerService.changeNewHomeView();


            }
            else
            {
                DialogFactory.showMessageDialog({mensagem: 'Usuário ou senha incorretos', titulo: 'Alerta'});
            }
        }


        function formatDate(date) {
            var monthNames = [
              "January", "February", "March",
              "April", "May", "June", "July",
              "August", "September", "October",
              "November", "December"
            ];

            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            return day + ' ' + monthNames[monthIndex] + ' ' + year;
        }

        function refresh(){
            // debugger
            FoneclubeService.getUpdatePagarme().then(function (result) {
                // debugger
                console.log('result ' + result);
            }).catch(function(error){
                alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: lc17')
            })
        }


    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MassChargingController', MassChargingController);

    MassChargingController.inject = ['$scope', 'FoneclubeService', 'PagarmeService', '$q', 'UtilsService', '$timeout', 'MainUtils'];

    function MassChargingController($scope, FoneclubeService, PagarmeService, $q, UtilsService, $timeout, MainUtils) {
        
        var vm = this;
        var prefixoMoetario = 'R$';
        const cartao = 1;
        const boleto = 2;
        vm.viewName = "Cobrança em massa";
 
        vm.plans = [];
        vm.year = new Date().getFullYear();
        vm.month = new Date().getMonth() + 1;
        vm.onSearchMassCharging = onSearchMassCharging;
        vm.loading = false;
        vm.onClickCobrar = onClickCobrar;
        vm.onChangeCheckboxSoma = onChangeCheckboxSoma;
        vm.onChangeCheckboxLastPayment = onChangeCheckboxLastPayment;
        vm.onChangeCheckboxCharged = onChangeCheckboxCharged;
        vm.paymentMethod = [
            { id:'boleto', description: 'Boleto' },
            { id:'cartao', description: 'Cartão de Crédito' }
        ]
        vm.getLinkBoleto = getLinkBoleto;

        vm.showCharged = true;
        vm.showRisk = true;
        vm.showSemPagamento = true;
        vm.onChangePaymentCheckboxCharged = onChangePaymentCheckboxCharged;
        vm.onChangeRiskCheckboxCharged = onChangeRiskCheckboxCharged;
        vm.onChangeCheckboxCharged = onChangeCheckboxCharged;
        
        function onSearchMassCharging(){

            vm.loading = true;
            FoneclubeService.getMassChargingFull(vm.month,vm.year).then(function (result) {
                // debugger;
                vm.massList = result.MassCharging;

                for(var i in result.MassCharging){

                    result.MassCharging[i].idTypeCharging = boleto;
                    result.MassCharging[i].typeCharging = 'boleto'

                    if(result.MassCharging[i].HasCard && result.MassCharging[i].LastCharging.PaymentType == cartao){
                        result.MassCharging[i].idTypeCharging = cartao;
                        result.MassCharging[i].typeCharging = 'cartao'
                    }

                    result.MassCharging[i].chargingAmmount = result.MassCharging[i].PrecoUnico;
                    result.MassCharging[i].enviarEmail = true;

                    if(result.MassCharging[i].ChargeDoMes != null){
                        
                        if(result.MassCharging[i].ChargeDoMes.TransactionId > 0){
                            
                            PagarmeService.getBoletoUrl(result.MassCharging[i].ChargeDoMes.TransactionId, result.MassCharging, i)
                            .then(function (result) {
                                
                                if(result[0].boleto_url != null){
                                    result.chargesAndOrders[result.index].linkBoletoAnterior = result[0].boleto_url;
                                }
                            })
                        }   
                    }
                    
                    if(result.MassCharging[i].Charged)
                        setMessageInfoCharged(result.MassCharging[i], "Cliente Cobrado no mês vingente definido. " )

                    result.MassCharging[i].showed = true;

                    if(result.MassCharging[i].LastCharging){

                        var dataCriacao = new Date(result.MassCharging[i].LastCharging.CreateDate)
                        var dataCompare = new Date(result.MassCharging[i].LastCharging.CreateDate);
                        dataCompare.setDate(dataCompare.getDate() + 35);

                        if(dataCompare <= new Date()){
                            result.MassCharging[i].tempoLongoCobrado = true;
                        }
                    }
                }
            })

            FoneclubeService.getMassChargingData(vm.month,vm.year).then(function (result) {
                vm.lista = result;
                
                vm.lista.forEach(customer => {
                    
                    if(!customer.Charged)
                        customer.infoMessage = 'Cliente não cobrado no mês vingente definido.';

                    if(customer.LastCharge)
                    {
                        customer.lastPayment = true;
                        onChangeCheckboxLastPayment(customer, false)
                    }
                        
                    customer.defaultCharging = true;
                    customer.enviarEmail = true;
                });
                vm.loading = false;
            }).catch(function(error){
                alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: mcc5')
            })
        }


        function onClickCobrar(customer){

            // debugger
            setMessageInfo(customer, "Iniciando cobrança, validando campos preenchidos")
            var valorTotalCobrar = customer.chargingAmmount;
            valorTotalCobrar = parseInt(valorTotalCobrar.replace('.','').replace(prefixoMoetario, ''))
            
            if(customer.typeCharging == 'boleto'){
                customer.idTypeCharging = boleto
            }
            else{
                customer.idTypeCharging = cartao
            }

            if(!validationCharge(customer))
                return;

            if(!customer.requesting)
            {

                if(customer.LastChargingPaid == null)
                {
                    customer.LastChargingPaid = {};
                    customer.LastChargingPaid.Comment = undefined;
                }

                var customerSend = {
                    Id: customer.IdPerson,
                    Charging:{
                        Comment: customer.LastChargingPaid.Comment ,
                        CommentEmail:customer.emailComment,
                        CommentBoleto: customer.boletoComment, 
                        Ammount: valorTotalCobrar,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: customer.idTypeCharging,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                        TransactionId: null
                    }
                }

                setMessageInfo(customer, "Iniciando envio de transação, aguarde, esperando retorno do gateway de pagamento")
                FoneclubeService.postGeraCobrancaIntegrada(customerSend).then(function (result) {
                    
                    // debugger
                    var linkBoleto = '';
                    if(customerSend.Charging.PaymentType == boleto)
                        linkBoleto = result.LinkBoleto

                    if(result.StatusPaid){
                        setMessageInfo(customer, "Cliente Cobrado no mês vingente definido, finalizando procedimentos. " + linkBoleto)
                    }
                    else{
                        setMessageInfo(customer, result.DescriptionMessage);
                        customer.requesting = false;
                        return
                    }
                    
                    // debugger
                    if(customer.typeCharging == "boleto")
                    {
                        if(customer.enviarEmail)
                        {
                            if(result.StatusPaid){

                                
                                var emailObject = {
                                    To: customer.Email,
                                    TargetName : customer.Name,
                                    TargetTextBlue: result.LinkBoleto,
                                    DiscountPrice: customer.chargingAmmount.replace('R$','').replace('.',','),
                                    TargetSecondaryText : customer.emailComment,
                                    TemplateType : 2
                                }
                                
                                // debugger
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);

                                    customer.requesting = false;

                                    if(result){
                                        customer.Charged = true
                                    } 
                                    else{
                                        setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " + linkBoleto)
                                    }
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                    customer.requesting = false;
                                    setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " + linkBoleto)
                                });
                                
                            }
                                
                        }
                        else{
                            console.log('Cobrado sem email concluído ' + linkBoleto)
                            setMessageInfo(customer, "Cliente Cobrado no mês vingente definido. " + linkBoleto)
                            customer.requesting = false;
                            customer.Charged = true
                        }
                    }
    
                    if(customer.typeCharging == "cartao")
                    {
                        console.log('cobrado cartao, enviar email');

                        var emailObject = {
                            'To': customer.Email, 
                            'TargetName' : customer.Name,
                            'TargetTextBlue' : customer.chargingAmmount.replace('R$','').replace('.',','),
                            // 'CustomerComment':vm.customerComment,
                            'TargetSecondaryText' : customer.emailComment,
                            'TemplateType' : 1
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                            // debugger
                            customer.requesting = false;

                            if(result){
                                customer.Charged = true
                                setMessageInfo(customer, "Cliente Cobrado no mês vingente definido. " + linkBoleto)
                            } 
                            else{
                                setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " +  linkBoleto)
                            }
                                
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                            customer.requesting = false;
                            setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante.")
                        });
                    }

                    
                })  
            }

            customer.requesting = true;  
        }

        function validationCharge(customer){
            if(customer.typeCharging == undefined )
            {
                alert('Escolha um tipo de cobrança');
                return false;
            }

            if(customer.chargingAmmount == undefined )
            {
                alert('Escolha um valor de cobrança');
                return false;
            }

            if(customer.chargingAmmount < 100)
            {
                alert('Escolha um valor válido de cobrança');
                return false;
            }

            return true;
        }

        function onChangeCheckboxSoma(customer){
            console.log(`onChangeCheckboxSoma ` + customer.soma);

            customer.lastPayment = false;

            // if(!customer.soma)    
            customer.chargingAmmount =  prefixoMoetario + '0.00';

            if(customer.soma && customer.TotalAmountCustomer > 0)
            {
                customer.chargingAmmount = prefixoMoetario + (customer.TotalAmountCustomer / 100).toFixed(2);
                
            }
                
        }

        function onChangeCheckboxLastPayment(customer, ajusteCampoMonetario){
            console.log(`onChangeCheckboxLastPayment`)
            customer.soma = false

            // if(!customer.lastPayment)    
            customer.chargingAmmount =  prefixoMoetario + '0.00';

            if(customer.lastPayment && customer.LastCharge.Amount > 0)
            {
                customer.chargingAmmount = prefixoMoetario + (customer.LastCharge.Amount / 100).toFixed(2);
                
                customer.boletoComment = customer.LastCharge.CommentBoleto
                customer.emailComment = customer.LastCharge.CommentEmail
                customer.foneclubeComment = customer.LastCharge.CommentFoneclube

                if(customer.LastCharge.ChargeType == boleto)
                {
                    customer.typeCharging = 'boleto'
                    customer.idTypeCharging = boleto
                }
                if(customer.LastCharge.ChargeType == cartao)
                {
                    customer.typeCharging = 'cartao'
                    customer.idTypeCharging = cartao
                }
            }
                
            

        }

        function enviaEmailBoleto(customer){
            var emailObject = {
                'To': existentCustomer.email, //existentCustomer.email
                'TargetName' : existentCustomer.name,
                'TargetTextBlue': resultCapture.boleto_url,
                'TargetSecondaryText' : vm.commentBoleto,
                'TemplateType' : 2
            }

            FoneclubeService.postSendEmail(emailObject).then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function enviaEmailCartao(customer){
            var emailObject = {
                'To': vm.existentCustomer.email, //vm.existentCustomer
                'TargetName' : vm.existentCustomer.name,
                'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                // 'CustomerComment':vm.customerComment,
                'TargetSecondaryText' : vm.customerComment,
                'TemplateType' : 1
            }

            FoneclubeService.postSendEmail(emailObject).then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function setMessageInfo(customer, message){
            customer.infoMessage = message;
            customer.Charged = false;
        }

        function setMessageInfoCharged(customer, message){
            customer.infoMessage = message;
        }

        function onChangeCheckboxCharged(){
            console.log('teste');
            debugger
            vm.showSemPagamento = true;
            vm.showRisk = true;

            for(var i in vm.massList){

                vm.massList[i].showed = true;
                
                if(vm.showCharged){
                    vm.massList[i].showed = true; 
                }
                else{
                    if(vm.massList[i].Charged){
                        vm.massList[i].showed = false;
                    }
                }

                // if(vm.showRisk){
                //     vm.massList[i].showed = true;
                // }
                // else{
                //     if(!vm.massList[i].GoodToCharge && !vm.massList[i].Charged){
                //         vm.massList[i].showed = false; 
                //     }
                // }

                // if(vm.showSemPagamento){
                //     vm.massList[i].showed = true;
                // }
                // else{
                //     if(vm.massList[i].tempoLongoCobrado){
                //         vm.massList[i].showed = false;
                //     }
                // }
                
                // vm.massList[i].showed = false;
                
            }
        }

        function  onChangePaymentCheckboxCharged(){

            vm.showCharged = true;
            vm.showRisk = true;
            
            for(var i in vm.massList){

                vm.massList[i].showed = true;

                if(vm.showSemPagamento){
                    vm.massList[i].showed = true;
                }
                else{
                    if(vm.massList[i].tempoLongoCobrado){
                        vm.massList[i].showed = false;
                    }
                }
            }

        };

        function  onChangeRiskCheckboxCharged(){
            vm.showCharged = true;
            vm.showSemPagamento = true;

            for(var i in vm.massList){

                vm.massList[i].showed = true;

                if(vm.showRisk){
                    vm.massList[i].showed = true;
                }
                else{
                    if(!vm.massList[i].GoodToCharge && !vm.massList[i].Charged){
                        vm.massList[i].showed = false; 
                    }
                }

               
                
                // vm.massList[i].showed = false;
                
            }

        };

        function getLinkBoleto(lastCharging){
            // debugger
            // var id
            // PagarmeService.getBoletoUrl(idBoleto, null, null).then(function (result) {
            //     console.log(result)
            // })
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FlowManagerService', FlowManagerService);

    FlowManagerService.inject = ['LocationService', 'FireBaseManagerUtil', '$window', 'localStorageService', '$rootScope', '$templateCache', 'UtilsService'];
    function FlowManagerService(LocationService, FireBaseManagerUtil, $window, localStorageService, $rootScope, $templateCache, UtilsService) {

        this.changeLoginView = changeLoginView;
        this.changeNewHomeView = changeNewHomeView;
        this.changeNewHomeView2 = changeNewHomeView2;
        this.changeInstaChargeView = changeInstaChargeView;
        this.changeAllPhoneLinesNewView = changeAllPhoneLinesNewView;
        this.changeAllPhoneLinesNewView2 = changeAllPhoneLinesNewView2;
        this.changeCheckoutView = changeCheckoutView;
        this.changeEdicaoView = changeEdicaoView;
        this.changeCustomersView = changeCustomersView;
        this.changeOrdemServicoView = changeOrdemServicoView;
        this.changeListCustomer = changeListCustomer;
        this.changeCadastro = changeCadastro;
        this.changeMassChargingView = changeMassChargingView;
        this.changeStatusChargingView = changeStatusChargingView;
        this.changeAllPhoneLinesView = changeAllPhoneLinesView;
        this.changeTemplateEdit = changeTemplateEdit;
        this.changeEstoqueView = changeEstoqueView;
        this.changeAllPhonesView = changeAllPhonesView;
        this.changePlanEditView = changePlanEditView;
        this.changeAllPhoneNewView = changeAllPhoneNewView;
        this.changeWATemplateEdit = changeWATemplateEdit;
        this.changeWPPView = changeWPPView;
        this.changeFacilView = changeFacilView;
        this.goBack = goBack;

        function changeLoginView(){
            LocationService.change('login');                        
        }

        function changeCheckoutView(){
            LocationService.change('tabs.checkout-view');
        }

        function changeNewHomeView(){
            localStorageService.set('menuItemActive', 'home');
            LocationService.change('tabs.home');
            $rootScope.$broadcast('changeMenuItem', 'home');
        }

        function changeInstaChargeView(){
            localStorageService.set('menuItemActive', 'insta-charge');
            LocationService.change('tabs.instacharge');
            $rootScope.$broadcast('changeMenuItem', 'insta-charge');
        }

        function changeAllPhoneLinesNewView(){
            localStorageService.set('menuItemActive', 'allphonelinesnew');
            LocationService.change('tabs.allphonelinesnew');
            $rootScope.$broadcast('changeMenuItem', 'allphonelinesnew');
        }

        function changeAllPhoneLinesNewView2(){
            localStorageService.set('menuItemActive', 'allphonelines2new');
            LocationService.change('tabs.allphonelines2new');
            $rootScope.$broadcast('changeMenuItem', 'allphonelines2new');
        }

        function changeNewHomeView(){
            localStorageService.set('menuItemActive', 'customers-new');
            LocationService.change('tabs.customers-new');
            $rootScope.$broadcast('changeMenuItem', 'customers-new');
        }

        function changeNewHomeView2(){
            localStorageService.set('menuItemActive', 'customers-new2');
            LocationService.change('tabs.customers-new2');
            $rootScope.$broadcast('changeMenuItem', 'customers-new2');
        }
        
        function changeEdicaoView(param) {
            console.log(param);
            LocationService.change('tabs.edicao', param);
        }
        
        function changeCustomersView(){
            
            // $templateCache.put("lib/ng-table/pager.html",'<div class="ng-cloak ng-table-pager" ng-if=params.data.length> <div ng-if=params.settings().counts.length class="ng-table-counts btn-group pull-right"> <button ng-repeat="count in params.settings().counts" type=button ng-class="{\'active\':params.count() == count}" ng-click=params.count(count) class="btn btn-default"> <span ng-bind=count></span> </button> </div> <ul ng-if=pages.length class="pagination ng-table-pagination"> <li ng-class="{\'disabled\': !page.active && !page.current, \'active\': page.current}" ng-repeat="page in pages" ng-switch=page.type> <a ng-switch-when=prev ng-click=params.page(page.number) href="">&laquo;</a> <a ng-switch-when=first ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=page ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=more ng-click=params.page(page.number) href="">&#8230;</a> <a ng-switch-when=last ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=next ng-click=params.page(page.number) href="">&raquo;</a> </li> </ul> </div> ');
            // $templateCache.put("lib/ng-table/header.html","<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row> ");
            
            LocationService.change('tabs.customers');
            $rootScope.$broadcast('changeMenuItem', 'customers');
            // $window.location.reload();
        }
        
        function changeOrdemServicoView(param){
            LocationService.change('tabs.ordemservico', param);
        }

        function changeListCustomer(param) {
            LocationService.change('tabs.list-customer', param);
            $rootScope.$broadcast('changeMenuItem', 'list-customer');
        }

        function changeCadastro(param) {
            LocationService.change('tabs.cadastro', param);
            $rootScope.$broadcast('changeMenuItem', 'cadastro');
        }

        function changeMassChargingView(param) {
            LocationService.change('tabs.mass-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'mass-charging');
        }

        function changeStatusChargingView(param){
            console.log('changeStatusChargingView')
            LocationService.change('tabs.status-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'status-charging');
        }

        function changeAllPhoneLinesView(param){
            LocationService.change('tabs.allphone-lines', param);
            $rootScope.$broadcast('changeMenuItem', 'allphone-lines');
        }

        function changeTemplateEdit(param){
            LocationService.change('tabs.template-edit', param);
            $rootScope.$broadcast('changeMenuItem', 'template-edit');
        }

        function changeEstoqueView(param){
            LocationService.change('tabs.estoque', param);
            $rootScope.$broadcast('changeMenuItem', 'estoque');
        }

        function changePlanEditView(param) {
          LocationService.change('tabs.plan-edition', param);
          $rootScope.$broadcast('changeMenuItem', 'plan-edition');
        }

        function changeAllPhonesView(param){
            LocationService.change('tabs.all-phones', param);
            $rootScope.$broadcast('changeMenuItem', 'all-phones'); 
        }

        function changeReportComissionsView(param) {
          LocationService.change('tabs.report-comissions', param);
          $rootScope.$broadcast('changeMenuItem', 'report-comissions');
        }

        function changeAllPhoneNewView(param) {
          LocationService.change('tabs.all-phones-new', param);
          $rootScope.$broadcast('changeMenuItem', 'all-phones-new');
        }

        function changeWATemplateEdit(param){
            LocationService.change('tabs.wa-template-edit', param);
            $rootScope.$broadcast('changeMenuItem', 'wa-template-edit');
        }

         function changeWPPView(param){
            LocationService.change('tabs.wpp', param);
            $rootScope.$broadcast('changeMenuItem', 'wpp');
        }
        
        function changeFacilView(){
            localStorageService.set('menuItemActive', 'facil');
            LocationService.change('tabs.facil');
            $rootScope.$broadcast('changeMenuItem', 'facil');
        }

        function goBack() {
            $window.history.back();
        }
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MasterController', MasterController);

    MasterController.inject = ['FlowManagerService', 'MainUtils'];
    function MasterController(FlowManagerService, MainUtils) {
        var vm = this;
        console.log('--- Master controller --- ' + FlowManagerService);
        FlowManagerService.changeLoginView();

        // vm.viewName = 'Cadastro Foneclube';
        ////////
        //MainUtils.setAgent('Cardozo');
        //FlowManagerService.changeNewHomeView();
        ////////

    }

})();
(function() {
    'use strict';
    angular.module('foneClub')
    .controller('MenuController', menuController);

    menuController.$inject = ['$scope', 'MainComponents', '$window', '$state', 'localStorageService', 'FlowManagerService', '$rootScope'];

    function menuController($scope, MainComponents, $window, $state, localStorageService, FlowManagerService, $rootScope) {
        var vm = this;     
        vm.compress = false; 
        vm.compressMobile = false; 
        vm.mobile = false;  
        vm.showhideMenu = true;            
        vm.menuItemActive = localStorageService.get('menuItemActive');
        vm.version = MainComponents.getVersion();
                
        function init() {
            vm.mobile = $window.innerWidth <= 767;
        }
        init();
        vm.menuCompress = function() {
            if ($window.innerWidth >= 767) {
                vm.compress = !vm.compress;                 
            } else if ($window.innerWidth <= 767) {
                vm.compressMobile = !vm.compressMobile;
            }
        }                   
        
        $rootScope.$on('changeMenuItem', function(event, args) {
            saveMenu(args);
        });

        $rootScope.$on('menu-hamburguer', function() {
            vm.menuCompress();
        })
/*-----------------------------------*/



        vm.setMenuItemActive = function(screen) {
            saveMenu(screen)
            
            
            if(screen == 'home') {
                FlowManagerService.changeNewHomeView();
            }else if (screen == 'insta-charge') {
                FlowManagerService.changeInstaChargeView();
            } 
            else if (screen == 'cadastro') {
                FlowManagerService.changeCadastro();
            } else if (screen == 'list-customer') {
                FlowManagerService.changeListCustomer();
            } else if (screen == 'customers') {
                FlowManagerService.changeCustomersView();
            } else if (screen == 'mass-charging') {
                FlowManagerService.changeMassChargingView();
            } 
            // else if(screen =='status-charging'){
            //     FlowManagerService.changeStatusChargingView();
            //} 
            else if(screen == 'allphone-lines'){
                FlowManagerService.changeAllPhoneLinesView();
            } else if(screen == 'template-edit'){
                FlowManagerService.changeTemplateEdit();
            } 
            // else if(screen == 'estoque'){
            //     FlowManagerService.changeEstoqueView();
            // }
            // else if(screen == 'all-phones'){
            //     FlowManagerService.changeAllPhonesView();
            // }
            else if (screen == 'all-phones-new') { 
              FlowManagerService.changeAllPhoneNewView();
            }
            else if (screen == 'customers-new') { 
                FlowManagerService.changeNewHomeView();
              }
            else if (screen == 'customers-new2') { 
                FlowManagerService.changeNewHomeView2();
            }
            else if(screen == 'wa-template-edit'){
                FlowManagerService.changeWATemplateEdit();
            } 
            else if(screen == 'wpp'){
                FlowManagerService.changeWPPView();
            } 
            else if(screen=='allphonelinesnew'){
                FlowManagerService.changeAllPhoneLinesNewView();
            }
            else if(screen=='allphonelines2new'){
                FlowManagerService.changeAllPhoneLinesNewView2();
            }
            else if (screen == 'facil') { 
              FlowManagerService.changeFacilView();
            }
            else {
                
            }
        }
        
        angular.element($window).bind('resize', function(){            
            if ($window.innerWidth <= 767 && !vm.mobile) {               
                vm.compress = false;
                vm.mobile = true;
                $scope.$apply();
            } else if ($window.innerWidth >= 767 && vm.mobile) { 
                vm.mobile = false;
                vm.compressmobile = false;
                $scope.$apply();
            }                                    
        });

        function saveMenu(screen) {
            vm.menuItemActive = screen;
            localStorageService.set('menuItemActive', screen);
        }
    }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('PlanEditionController', PlanEditionController);
    
      PlanEditionController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService'];
      function PlanEditionController(FlowManagerService, FoneclubeService, PagarmeService) {
            var vm = this;
            vm.ativacao = [true,false];
            vm.planOperator = ['CLARO','VIVO']
            vm.onClickEditPlan = onClickEditPlan;
            vm.onClickEditService = onClickEditService;
            vm.onClickAddService = onClickAddService;
            vm.onClickAddPlan = onClickAddPlan;
            // vm.operator = [{id:1, operator:'CLARO'},{id:2, operator:'VIVO'}]
            
            console.log('-- Plan Edition --')

            FoneclubeService.getAllPlanOptios().then(function (result) {
                console.log('result')
                
                vm.allPlans = result;
                debugger;

                // vm.allPlans.push({
                //     'Active': true,
                //     'Cost': 0,
                //     'Description': "",
                //     'Id': -1,
                //     'IdOperator': 1,
                //     'Value': 0
                // })
                
                for(var i in vm.allPlans){
                    if(vm.allPlans[i].IdOperator == 1)
                        vm.allPlans[i].currentPlan = 'CLARO'
                    else
                        vm.allPlans[i].currentPlan = 'VIVO'
                    
                }

                console.log(result)
            })

            

            FoneclubeService.getAllServices().then(function (result) {
                console.log('result services')
                console.log(result)
                
                debugger
                for(var i in result){
                    if(result[i].Editavel == null){
                        result[i].Editavel = false;
                    }  
                }

                vm.services = result;

                // vm.services.push({
                //     'AmountFoneclube': '',
                //     'AmountOperadora': '',
                //     'Assinatura': false,
                //     'Descricao': '',
                //     'Editavel': false,
                //     'ExtraOption': false,
                //     'Id': -1
                // })
            })

            function onClickEditService(service){
                console.log('edit service:')
                console.log(service)
                debugger
                service.Assinatura = service.selectedAssinatura
                service.Editavel = service.selectedEditavel
                service.ExtraOption = service.selectedExtraOption

                FoneclubeService.postUpdateServiceFoneclube(service).then(function (result) {
                    console.log('result services postUpdateServiceFoneclube')
                    console.log(result)
                    if(result)
                        alert('Serviço atualizado')
                    else{
                        alert('Serviço não atualizado')
                    }    
                })
            }

            function onClickEditPlan(plan){
                
                plan.Active = plan.selectedActive;
                
                if(plan.selectedPlan == 'CLARO')
                    plan.IdOperator = 1
                else
                    plan.IdOperator = 2

                
                FoneclubeService.postUpdatePhonePlan(plan).then(function (result) {
                    console.log('result services postUpdatePhonePlan')
                    console.log(result)
                    if(result)
                        alert('Plano atualizado')
                    else{
                        alert('Plano não atualizado')
                    } 
                    
                })
            }

            function onClickAddService(service){
                debugger
            }

            function onClickAddPlan(plan){
                debugger
            }

        }
    })();
    
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('ReportComissionController', ReportComissionController);
    
      ReportComissionController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService'];
      function ReportComissionController(FlowManagerService, FoneclubeService, PagarmeService) {

            var vm = this;            
            vm.onSearchHistory = onSearchHistory;
            vm.changeFilterComissionHistory = changeFilterComissionHistory;
            vm.changeFilterBonusHistory = changeFilterBonusHistory;
            vm.changeFilterLogBonus = changeFilterLogBonus;
            vm.exportToExcel = exportToExcel;
            vm.comissionHistory = true;
            
            console.log('-- report comission Edition --');

            function onSearchHistory(){

                vm.resultBonus = []
                vm.resultComission = []
                vm.resultBonusLog = []

                console.log('onSearchHistory');
                
                vm.loading = true;

                if(vm.total == undefined || vm.total == null){
                    vm.total = 1000;
                }

                debugger;
                if(vm.comissionHistory){
                    FoneclubeService.getComissionsOrderHistory(vm.total).then(function (result) {
                        console.log('getComissionsOrderHistory result');
                        console.log(result);

                        vm.resultComission = result;
                        vm.loading = false;
                    })
                }

                if(vm.bonusHistory){
                    FoneclubeService.getBonusOrderHistory(vm.total).then(function (result) {
                        console.log('getBonusOrderHistory result');
                        console.log(result);

                        vm.resultBonus = result;
                        vm.loading = false;
                    })
                }

                if(vm.logBonus){

                    FoneclubeService.getBonusLog().then(function (result) {
                        console.log('getBonusLog result');
                        console.log(result);

                        vm.resultBonusLog = result;
                        vm.loading = false;  
                    })

                }
            }

            function changeFilterComissionHistory(){
                vm.comissionHistory = true;
                vm.bonusHistory = false
                vm.logBonus = false
            }

            function changeFilterBonusHistory(){
                vm.comissionHistory = false;
                vm.bonusHistory = true
                vm.logBonus = false
            }

            function changeFilterLogBonus(){
                vm.comissionHistory = false;
                vm.bonusHistory = false
                vm.logBonus = true
            }

            function exportToExcel(){
                $('.k-grid-excel').trigger("click")
            }
        }
    })();
    
(function() {
  'use strict';

  angular.module('foneClub').controller('ShopifyOrderController', ShopifyOrderController);

 ShopifyOrderController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService',
    '$stateParams',
  ];

  function ShopifyOrderController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService,
    $stateParams
  ) {
    var vm = this;
    vm.customerName = "";
    vm.isPix = false;
    vm.isBoleto = false
    vm.vigencia="";
    vm.vencimento ="";
    vm.pixCode="";
    vm.boletoUrl ="";
    vm.boletoBarcode = "";
    vm.imgUrl="";
    vm.chargeId = $stateParams.chargeId;
    vm.personId = $stateParams.personId;
    vm.AdditionalComments = "";
    vm.showSummary = false;
    vm.urlApi = 'https://api.foneclube.com.br/api';
    //vm.urlApi = 'http://localhost:57078/api'

    init();

    function init(){
      vm.displayTooltip = false;
      FoneclubeService.getChargingById(vm.personId,vm.chargeId).then(function (result) {
        vm.customerName = result.Name;
        if(result.Charging){
          vm.vigencia = result.Charging.MesVingencia +"/"+result.Charging.AnoVingencia;
          vm.vencimento = result.Charging.DueDate.split('T')[0];
          vm.qrcode = result.Charging.Id;
          vm.pixCode = result.Charging.PixCode;
          vm.price =  result.Charging.Ammount;
          vm.boletoUrl = result.Charging.BoletoUrl;
          vm.boletoBarcode = result.Charging.boletoBarcode;
          vm.AdditionalComments = result.Charging.ChargingComment;
          if(result.Charging.PixCode != undefined || result.Charging.PixCode != null){
              vm.isPix = true;
              vm.imgUrl = vm.urlApi + "/pagarme/pix/qrcode/"+vm.qrcode;
          }
          if(result.Charging.BoletoUrl != undefined || result.Charging.BoletoUrl != null){
            vm.isBoleto = true;
        }
        
          vm.showSummary=true;
        }
      });
    }
  }
})();





//angular.module('foneClub', ['kendo.directives']);
angular.module('foneClub').controller('StatusChargingController', StatusChargingController);



function StatusChargingController($scope, $interval, FoneclubeService, PagarmeService) {




  var vm = this;
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.diffDays = diffDays;
  vm.statusType = {
    COBRADO: 1,
    NAO_COBRADO: 2,
    PAGO: 3,
    REFUNDED: 4,
    VENCIDO: 5
  };
  vm.PagamentosType = {
    BOLETO: 1,
    CARTAO: 2
  };
  vm.AtivoType = {
    ATIVA: 2,
    CANCELADA: 1
  }
  vm.tiposStatus = [
    { id: "", title: "" },
    { id: 1, title: 'COBRADO' },
    { id: 2, title: 'NÃO COBRADO' },
    { id: 3, title: 'PAGO' },
    { id: 4, title: 'REFUNDED' },
    { id: 5, title: 'VENCIDO' }
  ];
  vm.tiposPagamento = [
    { id: "", title: "" },
    { id: 1, title: 'BOLETO' },
    { id: 2, title: 'CARTÃO' }
  ];
  vm.tipoAtiva = [
    { id: "", title: "" },
    { id: 1, title: 'CANCELADA' },
    { id: 2, title: 'ATIVA' }
  ]
  vm.tipoAcao = [
    { id: "", title: "" },
    { id: 1, title: 'A' },
    { id: 2, title: 'C' }
  ]

  function convertToViewModel(sourceData) {
    var customerDataList = [];

    for (var i = 0; i < sourceData.length; i++) {
      var customer = sourceData[i];

      var RCobrado = customer.ammoutIntFormat;
      var customerSelectedCharge = '';
      var Tipo = '';
      var TipoLink = '';
      var Acao = '';
      var AcaoBool = false;
      var Vencimento = customer.boletoExpires;
      var Ultimopag = customer.LastPaidDate;
      var Dias2 = diffDays(customer.LastPaidDate);
      var RPago = 0;
      var CustomerName = customer.Name;
      var Status2 = '';
      var customerChargeId = '';
      var UltimaCob = '';
      var Dias = 0;
      var Status = '';//customer.descricaoStatus;

      if (isNaN(Dias2)) {
        Dias2 = 0;
      }
      ///////////////
      if (customer.ChargeAndServiceOrderHistory && customer.ChargeAndServiceOrderHistory.Charges) {
        var charge = customer.ChargeAndServiceOrderHistory.Charges;
        RPago = charge.Ammount;

        var dataCobranca = charge.CreationDate;
        var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        var mes = dataConvertida.substring(5, 7);
        var ano = dataConvertida.substring(0, 4);

        customer.chargingDate = charge.CreationDate;
        customer.chargingDateDiffDays = diffDays(dataConvertida);
        Status= charge.PaymentStatusDescription;
      }

      var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
      var mesSelecionado = selecionado.substring(5, 7);
      var anoSelecionado = selecionado.substring(0, 4);

      if (mesSelecionado == mes && anoSelecionado == ano) {
        customer.dataIgual = true;
      }
      customer.LastPaidDateDiffDays = diffDays(customer.LastPaidDate);
      UltimaCob = customer.chargingDate ? customer.chargingDate : "";
      ///////////////

      // if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
      // if (customer.descricaoStatus == '3') { Status = 'PAGO' };
      // if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
      // if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

      if (customer.ChargingValidity != undefined) {

        var lastChargingRec = (customer.ChargingValidity.length - 1);
        var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

        customerSelectedCharge = customerChargingInfo;
        customerChargeId = customerChargingInfo.Id;
        if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
          //UltimaCob = customerChargingInfo.CreateDate;
        }



        Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'

        if (customerChargingInfo.PaymentType == 1) {
          Tipo = 'CARTÃO';
        }
        else {
          Tipo = 'BOLETO'
          TipoLink = customerChargingInfo.BoletoUrl;
        }
        if (customerChargingInfo.Canceled) {
          Acao = 'A';
          AcaoBool = true;
        }
        if (!customerChargingInfo.Canceled) {
          Acao = 'C';
        }
      }

      if (UltimaCob != undefined && UltimaCob != null) { Dias = diffDays(UltimaCob); }

      if (customer.Name == 'Rodrigo Cardozo Pinto') {
        //debugger;

      }

      customerDataList.push({
        'UltimaCob': UltimaCob,
        'Dias': Dias,
        'RCobrado': RCobrado,
        'Tipo': Tipo,
        'TipoLink': TipoLink,
        'Status': Status,
        'StatusId': customer.descricaoStatus,
        'Status2': Status2,
        'Acao': Acao,
        'AcaoBool': AcaoBool,
        'customerSelectedCharge': customerSelectedCharge,
        'customerChargeId': customerChargeId,
        'Vencimento': Vencimento,
        'Ultimopag': Ultimopag,
        'Dias2': Dias2,
        'RPago': RPago,
        'CustomerName': CustomerName,
      });
    }
    return customerDataList;
  }

  $scope.onPageLoad = function () {

    $scope.onClickSearchCustomerData();
  }

  $scope.onClickSearchCustomerData = function () {
    $('#loadingDiv').show();
    vm.loading = true;
    vm.totalReceivedReady = false;
    hasUpdate = false;
    var ativos = vm.somenteAtivos ? 1 : 0;
    FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {

      vm.customers = result;
      for (var i in vm.customers) {

        vm.customers[i].allChargingsCanceled = false;

        for (var o in vm.customers[i].ChargingValidity) {
          vm.customers[i].ChargingValidity[o].display = true;
        }
      }
      handleData(vm.customers);
      // loadPaymentHistory();
      var gridData = vm.customers;
      initDataProperties(gridData);
    })
  }

  $scope.exportToExcel = function () {
    $('.k-grid-excel').trigger("click")
  }

  function initDataProperties(customerDatasource) {
    var customerData = convertToViewModel(customerDatasource);
    var totalRecords = customerData.length + 10;
    var pageHeight = $(window).height() - 110;

    $scope.customerDataSource = new kendo.data.DataSource({
      data: customerData,
      pageSize: totalRecords,
      schema: {
        model: {
          fields: {
            Dias: { type: "number" },
            AcaoBool: { type: "boolean" },
          }
        }
      },
    });
    $scope.customerGridOptions = {
      dataSource: $scope.customerDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "Customer Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false

      },
      reorderable: true,
      resizable: true,

      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: {
            contains: "Contains",
            startswith: "Starts with",
            eq: "Is equal to",
            neq: "Is not equal to"
          },
          number: {
            eq: "Equal to",
            neq: "Not equal to",
            gte: "Greater Than",
            lte: "Less Than"
          }
        }
      },
      columns: [
        {
          field: "CustomerName", title: "Name", width: "220px", headerTemplate: "<div class='break-word'>Name<div>"
          , filterable: { cell: { operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "UltimaCob", title: "Última Cob.", width: "130px",
          //template: "#if( UltimaCob != '1999/12/31') {# <div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd.MMM')#</div> #}else{# <div>-</div> #}#",
          template: "<div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd MMM, yyyy')#</div>",
          headerTemplate: "<div class='break-word'>Última Cob.<div>",
          filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias", title: "Dias", width: "150px"
          , headerTemplate: "<div class='break-word'>Dias<div>",
          filterable: { cell: { operator: "gte", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }

        },
        {
          field: "Status", title: "Status", width: "140px"
          , headerTemplate: "<div class='break-word'>Última Cob. <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'COBRADO' }, { text: 'NÃO COBRADO' }, { text: 'PAGO' }, { text: 'REFUNDED' }, { text: 'VENCIDO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },
        {
          field: "RCobrado", title: "R$ Cobrado", width: "110px"
          , headerTemplate: "<div class='break-word'>R$ <br>Cobrado<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Tipo", title: "Tipo", width: "110px"
          , headerTemplate: "<div class='break-word'>Tipo<div>"
          , template: " #if( Tipo != 'BOLETO') {#   <label>#:Tipo#</label>  #} else{#  <a href='#:TipoLink#' target='_blank'>#:Tipo#</a> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'BOLETO' }, { text: 'CARTÃO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },


        {
          field: "Status2", title: "Status", width: "130px"
          , headerTemplate: "<div class='break-word'>Ação <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'ATIVA' }, { text: 'CANCELADA' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

        {
          field: "Acao", title: "Ação", width: "80px", headerTemplate: "<div class='break-word'>Ação <div>"
          , template: " #if( Acao == 'C') {#   <button class= 'btnb btn-danger action-buttons' ng-click='vm.onDesativarBoleto(#:customerChargeId#)'>				C</button>  #} else{#  <button class='btnb btn-info action-buttons' ng-click='vm.onAtivarBoleto(#:customerChargeId#)'>A</button> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'A' }, { text: 'C' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },



        {
          field: "Vencimento", title: "Vencimento", width: "110px", headerTemplate: "<div class='break-word'>Vencimento<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Ultimopag", title: "Última pag.", width: "110px", headerTemplate: "<div class='break-word'>Última pag.<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias2", title: "Dias", width: "110px", headerTemplate: "<div class='break-word'>Dias<div>"
          , template: " #if( Dias2 == 0 ) {# <div>-</div> #} else{#  <div>#:Dias2#</div>  #}# "
          , filterable: {
            cell: {
              showOperators: false, operator: "contains"
              , template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
            }
          }
        },
        {
          field: "RPago", title: "R$ Pago", width: "110px", headerTemplate: "<div class='break-word'>R$ Pago<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

      ]
    }
    vm.loading = false;

    $('#loadingDiv').hide();
  }


  function handleData(customers) {
    vm.callbackCount = 0;
    vm.totalBoletoCharges = 0;
    vm.totalReceived = 0;
    vm.totalCharged = 0;
    vm.totalCustomers = customers.length;
    vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
    vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

    try {
      vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
    }
    catch (erro) {
      //sem clientes
    }

    for (var index in customers) {

      var customer = customers[index];
      if (customer.Name == '1 Antonia Maria da Silva Barboza') {

      }
      try {
        customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
      }
      catch (erro) { }

      if (customer.Charged) {
        customer.statusType = vm.statusType.CARREGANDO;
        customer.registerPayd = false;
        for (var i in customer.ChargingValidity) {
          var charge = customer.ChargingValidity[i];
          try {
            customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
          }
          catch (erro) { }

          if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
            customer.ChargingValidity[i].StatusDescription = 'PAGO';
            customer.descricaoStatus = vm.statusType.PAGO;
            customer.descricaoTipo = vm.PagamentosType.CARTAO;
            customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
            customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
          }

          if (charge.PaymentType == 2 && charge.BoletoId != 0) {
            customer.descricaoTipo = vm.PagamentosType.BOLETO;
            PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {

              //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
              result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



              if (result[0].status == "waiting_payment") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                if (!result[0].elemento.registerPayd) {
                  result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                }

                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                } else {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                }
              }
              else if (result[0].status == "paid") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                try {

                }
                catch (erro) { }

                result[0].elemento.registerPayd = true;
                result[0].elemento.status = charge.StatusDescription;
                totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
              }
              else {
                // ;
              }
              charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

              result[0].vm.callbackCount++;

              if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                vm.totalReceivedReady = true;
              }
            })
          }

          if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
            customer.descricaoStatus = vm.statusType.REFUNDED;
            customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
          }

          if (charge.BoletoId == 0 && charge.PaymentType == 2) {
            if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
              vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
              customer.descricaoStatus = 'INVÁLIDO';
            }

          }
        }

        vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

        if (customer.ChargingValidity[0].Payd == true) {
          vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
        }

        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100);
        customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
        customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.ammoutInt = parseFloat(customer.ammout);
        customer.ammoutIntFormat = customer.ammoutInt.toString().replace('.', ',');
      }
      else {
        customer.status = 'NÃO COBRADO';
        customer.descricaoStatus = vm.statusType.NAO_COBRADO;
        customer.ammoutInt = 0;
        customer.ammoutIntPaid = 0;
      }
    }
    vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

  }

  function loadPaymentHistory() {
    for (var index in vm.customers) {

      FoneclubeService.getChargeAndServiceOrderHistoryDinamic(vm.customers[index].Id, index).then(function (result) {

        if (result.length == 0) {
        }
        else {

          // TODO TEMPORARIO
          var dataCobranca;
          try {

            // dataCobranca = result[0].Charges.PaymentDate.substring(0,10).replace('-','/').replace('-','/');
            dataCobranca = result[0].Charges.CreationDate;
          }
          catch (erro) {

            // dataCobranca = result[0].CreatedDate.substring(0,10).replace('-','/').replace('-','/')
            dataCobranca = result[0].CreatedDate
          }

          var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mes = dataConvertida.substring(5, 7);
          var ano = dataConvertida.substring(0, 4);

          var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mesSelecionado = selecionado.substring(5, 7);
          var anoSelecionado = selecionado.substring(0, 4);

          if (mesSelecionado == mes && anoSelecionado == ano) {
            vm.customers[result.indexLista].dataIgual = true;
          }

          vm.customers[result.indexLista].chargingDate = dataConvertida;
          vm.customers[result.indexLista].chargingDateDiffDays = diffDays(dataConvertida);
          vm.customers[result.indexLista].LastPaidDateDiffDays = diffDays(vm.customers[result.indexLista].LastPaidDate);
        }
      });
    }
    for (var index in vm.customers) {
      if (vm.customers[index].chargingDate == undefined || vm.customers[index].chargingDate == null) {
        vm.customers[index].chargingDate = new Date('2000/01/01').toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        vm.customers[index].chargingDateDiffDays = diffDays(vm.customers[index].chargingDate);
      }
    }
  }



  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
  var secondDate = new Date();

  function diffDays(date) {
    var firstDate = new Date(date);
    return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
  }




  vm.onDesativarBoleto = onDesativarBoleto;
  vm.onAtivarBoleto = onAtivarBoleto;

  function onDesativarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, true)
            .then(function (value) {
              if (value) {
                charge.Canceled = true;
              }
            })
        }
      })
  }

  function onAtivarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, false)
            .then(function (value) {
              if (value) {
                charge.Canceled = false;
              }
            })
        }
      })
  }
};


StatusChargingController.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('TemplateEditController', TemplateEditController);
    
      TemplateEditController.inject = ['DialogFactory', 'FoneclubeService', 'ViewModelUtilsService', 'UtilsService', '$filter'];
      function TemplateEditController(DialogFactory, FoneclubeService, ViewModelUtilsService, UtilsService, $filter) {
            var vm = this;
            vm.templates = [];
            vm.searchTemplate = "";
            vm.setSelectedRecord = setSelectedRecord;
            vm.addNewTemplate = addNewTemplate;
            vm.editTemplate = editTemplate;
            vm.deleteTemplate = deleteTemplate;
            vm.duplicateTemplate = duplicateTemplate;
            vm.filterTemplates = filterTemplates;
            vm.loadTemplates = loadTemplates;
            vm.refreshTemplate = refreshTemplate;
            console.log('-- TemplateEditController --')
            vm.gridWidth = $(window).width() - 150;
            vm.gridHeight = $(window).height() - 150;
            vm.gridOptions = {
                columnDefs: setColumnDefs(),
                defaultColDef: {
                    sortable: true,
                    filter: true,
                    resizable: true,
                    autoHeight: true
                },
                rowData: [],
                angularCompileRows: true,
                onGridReady: function(params) {
                    this.gridApi = params.api;
                    this.gridColumnApi = params.columnApi;
                    bindAgGrid(vm.templates);
                },
                headerHeight: 100,
                autoSizeColumns: true
            };

            loadTemplates();
            console.log('-- WA TemplateEditController --');

            function loadTemplates(){
                FoneclubeService.getTemplates().then(function (result) {
                vm.templates = result.sort(function(a,b) {return (a.Tipo > b.Tipo) ? 1 : ((b.Tipo > a.Tipo) ? -1 : 0);} );
                 bindAgGrid(vm.templates);
                });
            }

            function refreshTemplate(){
                loadTemplates();
            }

           function setColumnDefs() 
            {
                var columnDefs = [
                    {
                        headerName: "", 
                        field: "Actions", 
                        width:120, 
                        pinned:'left',
                        cellRenderer: function (params) {
                            var cellHtml = "";
                            cellHtml='<a title="Edit" ng-click="vm.editTemplate(' + params.value.Id + ')" ><img class="imgEdit     link"src="content/img/edit.png" /></a>&nbsp;<a title="Duplicate" ng-click="vm.duplicateTemplate(' + params.value.Id + ')"><img class="imgduplicate link" src="content/img/copy.png" /></a>&nbsp;<a title="Delete" ng-click="vm.deleteTemplate('  + params.value.Id + ')" ><img class="imgDelete link" src="content/img/Cancel.png" /></a>';
                            return cellHtml;
                        }
                    },
                    {headerName: "Tipo", field: "Tipo", width:150, pinned:'left'},
                    {headerName: "From", field: "From", width:200},
                    {headerName: "To", field: "To", width:200},
                    {headerName: "Cc", field: "Cc", width:200},
                    {headerName: "Bcc", field: "Bcc", width:200},
                    {headerName: "Subject", field: "Subject", width:200},
                    {headerName: "Description", field: "Description", width:200},
                    {headerName: "ShowInAction", field: "ShowInAction", width:200},
                ];
                return columnDefs;
            }

            function bindAgGrid(data) {
                var rowData = convertToViewModel(data);
                if (vm.gridOptions.api) {
                    vm.gridOptions.api.setRowData(rowData);
                } 
            }
            
            function filterTemplates() {
                var filteredData = $filter('filter')(vm.templates, function (data) {
                    return UtilsService.checkContains(UtilsService.removeAccents(data.Tipo.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) 
                    || UtilsService.checkContains(UtilsService.removeAccents(data.From.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) 
                    || UtilsService.checkContains(UtilsService.removeAccents(data.To.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) 
                    || UtilsService.checkContains(UtilsService.removeAccents(data.Cc.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase()))
                    || UtilsService.checkContains(UtilsService.removeAccents(data.Bcc.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) 
                    || UtilsService.checkContains(UtilsService.removeAccents(data.Subject.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) 
                    || UtilsService.checkContains(UtilsService.removeAccents(data.Description.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase()));
                });
                bindAgGrid(filteredData);
            }

            function convertToViewModel(data){
                var templateDataList = [];
                for (var i = 0; i < data.length; i++) {
                    var tempalteData = data[i];
                    templateDataList.push({
                        'Actions': tempalteData,
                        'Tipo': tempalteData.Tipo,
                        'From': tempalteData.From,
                        'To': tempalteData.To,
                        'Cc': tempalteData.Cc,
                        'Bcc': tempalteData.Bcc,
                        'Subject': tempalteData.Subject,
                        'Description': tempalteData.Description,
                        'ShowInAction': tempalteData.ShowInAction
                    });
                }
                return templateDataList;
            }

             function addNewTemplate(){
                ViewModelUtilsService.showModalTemplate(null);
            }

            function deleteTemplate(templateId){
                vm.selectedRecord = angular.copy(vm.templates.find(x =>  x.Id == templateId));
                DialogFactory.dialogConfirm({
                    mensagem:
                      'Are you sure, you want to delete this template ' + vm.selectedRecord.Tipo +' ?'
                  }).then(function (value) {
                    if (value) {
                        FoneclubeService.deleteTemplate(vm.selectedRecord.Id).then(function (result) {
                            if(result){
                                alert("Template deleted Successfully");
                                location.reload();
                            }
                            else{
                                vm.templates.map(function(template){ template.Selected = false;})
                            }
                        });
                    }
                    else{
                        vm.templates.map(function(template){ template.Selected = false;})
                    }
                });
            }

            function editTemplate(templateId){ 
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                   if(vm.templates.filter(x => x.Id == templateId).length > 0)
                   {
                      vm.selectedRecord = angular.copy(vm.templates.find(x => x.Id == templateId));
                      vm.Tipo = vm.selectedRecord.Tipo;
                      vm.From = vm.selectedRecord.From;
                      vm.To = vm.selectedRecord.To;
                      vm.Cc = vm.selectedRecord.Cc;
                      vm.Bcc = vm.selectedRecord.Bcc;
                      vm.Subject = vm.selectedRecord.Subject;
                      vm.Description = vm.selectedRecord.Description;
                      vm.ShowInAction = vm.selectedRecord.ShowInAction;
                      ViewModelUtilsService.showModalTemplate(vm.selectedRecord);
                      vm.templates.map(function(template){ template.Selected = false;})
                    } 
                }
            }

            function duplicateTemplate(templateId){
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                    if(vm.templates.filter(x => x.Id == templateId).length > 0)
                   {
                        vm.selectedRecord = angular.copy(vm.templates.find(x =>  x.Id == templateId));
                        vm.selectedRecord.Id = -1;
                        vm.selectedRecord.Tipo = vm.selectedRecord.Tipo + '-Copy';
                        vm.selectedRecord.From = vm.selectedRecord.From;
                        vm.selectedRecord.To = vm.selectedRecord.To;
                        vm.selectedRecord.Cc = vm.selectedRecord.Cc;
                        vm.selectedRecord.Bcc = vm.selectedRecord.Bcc;
                        vm.selectedRecord.Subject = vm.selectedRecord.Subject;
                        vm.selectedRecord.Description = vm.selectedRecord.Description;
                        vm.selectedRecord.ShowInAction = vm.selectedRecord.ShowInAction;
                        ViewModelUtilsService.showModalTemplate(vm.selectedRecord);
                        vm.templates.map(function(template){ template.Selected = false;})
                   } 
                }
            }

            function setSelectedRecord(template){
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                   if(vm.templates.filter(x => x.Selected).length > 0)
                   {
                        vm.selectedRecord = angular.copy(vm.templates.find(x => x.Selected));
                   } 
                   else {

                   }
                }
            }
    
        }
    })();
    
(function () {
    'use strict';
    
     angular.module('foneClub').controller('TemplateEditModalController', TemplateEditModalController);
    
     TemplateEditModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function TemplateEditModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            debugger;
            vm.selectedRecord = ViewModelUtilsService.modalData;
            vm.isEdit = ViewModelUtilsService.modalData == null? false: true;
            vm.addTemplate = addTemplate;
            vm.editTemplate = editTemplate;
            vm.sendTemplate = sendTemplate;
            vm.AddEdit = vm.isEdit ? "Edit" : "Add";

            loadTemplates();
            console.log('-- WA TemplateEditController --');

            function loadTemplates(){
                 FoneclubeService.getTemplates().then(function (result) {
                     vm.templates = result;
                     console.log(vm.templates);
                 });
            }

            function addTemplate() {
                console.log('-- WA Add --');
                if(vm.selectedRecord)
                {
                    var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                    sendData.Id = -1;
                    sendData.Tipo = vm.selectedRecord.Tipo;
                    sendData.From = vm.selectedRecord.From;
                    sendData.To = vm.selectedRecord.To;
                    sendData.Cc = vm.selectedRecord.Cc;
                    sendData.Bcc = vm.selectedRecord.Bcc;
                    sendData.Subject = vm.selectedRecord.Subject;
                    sendData.Description = vm.selectedRecord.Description;
                    sendData.ShowInAction = vm.selectedRecord.ShowInAction;

                    FoneclubeService.saveTemplate(sendData).then(function (result) {
                        if(result){
                            alert("Data Saved Successfully");
                            //location.reload();
                        }
                    });
                    
                }
            }
  
            function editTemplate() 
            {
               debugger;
               var employeeToEdit = vm.templates.find(x => x.Id === vm.selectedRecord.Id);
               console.log('-- WA Edit --');
               
               if(employeeToEdit){
                var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                sendData.Tipo = vm.selectedRecord.Tipo;
                sendData.From = vm.selectedRecord.From;
                sendData.To = vm.selectedRecord.To;
                sendData.Cc = vm.selectedRecord.Cc;
                sendData.Bcc = vm.selectedRecord.Bcc;
                sendData.Subject = vm.selectedRecord.Subject;
                sendData.Description = vm.selectedRecord.Description;
                sendData.ShowInAction = vm.selectedRecord.ShowInAction;
                FoneclubeService.saveTemplate(sendData).then(function (result) {
                    if(result){
                        alert("Data Saved Successfully");
                    }
                });
               }
               else{
                addTemplate();
               }
            }

            function sendTemplate(){
                var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                sendData.Tipo = vm.selectedRecord.Tipo;
                sendData.From = vm.selectedRecord.From;
                sendData.To = vm.selectedRecord.To;
                sendData.Cc = vm.selectedRecord.Cc;
                sendData.Bcc = vm.selectedRecord.Bcc;
                sendData.Subject = vm.selectedRecord.Subject;
                sendData.Description = vm.selectedRecord.Description;
         
                FoneclubeService.sendTemplate(sendData).then(function(result){
                    if(result)
                    {
                        DialogFactory.showMessageDialog({mensagem:'Message sent successfully via Email'});
                    }
                    else
                    {
                        DialogFactory.showMessageDialog({mensagem:'Error occured while sending Email Message'});
                    }
                });
             }
        
        }
})();
    
(function () {
    'use strict';
    
     angular.module('foneClub').controller('WATemplateEditController', WATemplateEditController);
    
      WATemplateEditController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function WATemplateEditController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            vm.templates = [];
            vm.searchTemplate = "";
            vm.setSelectedRecord = setSelectedRecord;
            vm.addNewTemplate = addNewTemplate;
            vm.refreshTemplate = refreshTemplate;
            vm.editTemplate = editTemplate;
            vm.deleteTemplate = deleteTemplate;
            vm.duplicateTemplate = duplicateTemplate;
            vm.filterTemplates = filterTemplates;
            vm.loadTemplates = loadTemplates;
            vm.saveConfig = saveConfig;
            vm.gridWidth = $(window).width() - 150;
            vm.gridHeight = $(window).height() - 150;
            vm.gridOptions = {
                columnDefs: setColumnDefs(),
                defaultColDef: {
                    sortable: true,
                    filter: true,
                    resizable: true,
                    autoHeight: true
                },
                rowData: [],
                //rowHeight: 100,
                headerHeight: 100,
                angularCompileRows: true,
                onGridReady: function(params) {
                    this.gridApi = params.api;
                    this.gridColumnApi = params.columnApi;
                    bindAgGrid(vm.templates);
                },
                autoSizeColumns: true
            };

            loadTemplates();
            console.log('-- WA TemplateEditController --');

            function loadTemplates(){

                 FoneclubeService.getWATemplates().then(function (result) {
                     vm.templates = result;
                     bindAgGrid(vm.templates);
                 });
                 FoneclubeService.getWATemplatesConfig().then(function (result) {
                     vm.useURL = result.useURL;
                     vm.useButton = result.useButton;
                     vm.useList = result.useList;
                     vm.useRocket = result.useRocket;
                 });
            }

            function saveConfig(){
                var data = {
                    useURL : vm.useURL,
                    useButton : vm.useButton,
                    useList : vm.useList,
                    useRocket : vm.useRocket
                };
                FoneclubeService.saveWATemplatesConfig(data).then(function (result) {
                    
                 });
            }

            function setColumnDefs() 
            {
                var columnDefs = [
                    {
                        headerName: "", 
                        field: "Actions", 
                        width:120, 
                        pinned:'left',
                        cellRenderer: function (params) {
                            var cellHtml = "";
                            cellHtml='<a title="Edit" ng-click="vm.editTemplate(' + params.value.Id + ')" ><img class="imgEdit     link"src="content/img/edit.png" /></a>&nbsp;<a title="Duplicate" ng-click="vm.duplicateTemplate(' + params.value.Id + ')"><img class="imgduplicate link" src="content/img/copy.png" /></a>&nbsp;<a title="Delete" ng-click="vm.deleteTemplate('  + params.value.Id + ')" ><img class="imgDelete link" src="content/img/Cancel.png" /></a>';
                            return cellHtml;
                        }
                    },
                    {headerName: "TemplateName", field: "TemplateName", width:150, pinned:'left'},
                    {headerName: "Trigger", field: "Trigger", width:150},
                    {
                        headerName: "Comment", 
                        field: "Comment", 
                        width:400,
                        cellRenderer: function (params) {
                            return params.value.replaceAll("\n","<br/>");
                        }
                    },
                    {headerName: "Title", field: "Title", width:200},
                    {headerName: "Footer", field: "Footer", width:200},
                    {headerName: "Buttons", field: "Buttons", width:200},
                    {headerName: "Urls", field: "Urls", width:200},
                    {headerName: "ListButton", field: "ListButton", width:200},
                    {headerName: "ListSections", field: "ListSections", width:200},
                    {headerName: "ListSectionRows", field: "ListSectionRows", width:200},
                    {headerName: "MessageType", field: "MessageType", width:200},
                    {headerName: "CallBackAction", field: "CallBackAction", width:100},
                    {headerName: "Internal", field: "Internal", width:100},
                ];
                return columnDefs;
            }

            function bindAgGrid(data) {
                var rowData = convertToViewModel(data);
                if (vm.gridOptions.api) {
                    vm.gridOptions.api.setRowData(rowData);
                } 
            }

            function filterTemplates() {
                var filteredData = $filter('filter')(vm.templates, function (data) {
                    if(data.TemplateName != undefined && data.Trigger != undefined && data.Comment != undefined && data.Title != undefined && data.Footer != undefined){
                        return UtilsService.checkContains(UtilsService.removeAccents(data.TemplateName.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) || UtilsService.checkContains(UtilsService.removeAccents(data.Trigger.join(',').toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) || UtilsService.checkContains(UtilsService.removeAccents(data.Comment.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase()))|| UtilsService.checkContains(UtilsService.removeAccents(data.Title.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase())) || UtilsService.checkContains(UtilsService.removeAccents(data.Footer.toLowerCase()), UtilsService.removeAccents(vm.searchTemplate.toLowerCase()));
                    }
                });
                bindAgGrid(filteredData);
            }

            function convertToViewModel(data){
                var templateDataList = [];
                for (var i = 0; i < data.length; i++) {
                    var tempalteData = data[i];
                    templateDataList.push({
                        'Actions': tempalteData,
                        'TemplateName': tempalteData.TemplateName,
                        'Trigger': tempalteData.Trigger,
                        'Comment': tempalteData.Comment,
                        'Title': tempalteData.Title,
                        'Footer': tempalteData.Footer,
                        'Buttons': tempalteData.Buttons,
                        'Urls': tempalteData.Urls,
                        'ListButton': tempalteData.ListButton,
                        'ListSections': tempalteData.ListSections,
                        'ListSectionRows': tempalteData.ListSectionRows,
                        'MessageType': tempalteData.MessageType,
                        'CallBackAction': tempalteData.CallBackAction,
                        'Internal': tempalteData.Internal,
                    });
                }
                return templateDataList;
            }

            function refreshTemplate(){
                loadTemplates();
            }

            function addNewTemplate(){
                ViewModelUtilsService.showModalWhatsappTemplate(null);
            }

            function deleteTemplate(templateId){
                vm.selectedRecord = angular.copy(vm.templates.find(x =>  x.Id == templateId));
                DialogFactory.dialogConfirm({
                    mensagem:
                      'Are you sure, you want to delete this template ' + vm.selectedRecord.Trigger +' ?'
                  }).then(function (value) {
                    if (value) {
                        FoneclubeService.deleteWATemplates(vm.selectedRecord.Id).then(function (result) {
                            if(result){
                                alert("Template deleted Successfully");
                                location.reload();
                            }
                            else{
                                vm.templates.map(function(template){ template.Selected = false;})
                            }
                        });
                    }
                    else{
                        vm.templates.map(function(template){ template.Selected = false;})
                    }
                });
            }

            function editTemplate(templateId){ 
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                   if(vm.templates.filter(x => x.Id == templateId).length > 0)
                   {
                        vm.selectedRecord = angular.copy(vm.templates.find(x => x.Id == templateId));
                        vm.selectedRecord.Trigger = vm.selectedRecord.Trigger.join(',');
                        vm.selectedRecord.Buttons =vm.selectedRecord.Buttons!=null? vm.selectedRecord.Buttons:null;
                        vm.selectedRecord.Urls = vm.selectedRecord.Urls!=null ? vm.selectedRecord.Urls:null;
                        vm.selectedRecord.ListButton = vm.selectedRecord.ListButton!=null?vm.selectedRecord.ListButton:null;
                        vm.selectedRecord.ListSections = vm.selectedRecord.ListSections!=null?vm.selectedRecord.ListSections:null;
                        vm.selectedRecord.ListSectionRows = vm.selectedRecord.ListSectionRows!=null?vm.selectedRecord.ListSectionRows:null;
                        ViewModelUtilsService.showModalWhatsappTemplate(vm.selectedRecord);
                        vm.templates.map(function(template){ template.Selected = false;})
                    } 
                }
            }

            function duplicateTemplate(templateId){
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                    if(vm.templates.filter(x => x.Id == templateId).length > 0)
                   {
                        vm.selectedRecord = angular.copy(vm.templates.find(x =>  x.Id == templateId));
                        vm.selectedRecord.Id = -1;
                        vm.selectedRecord.TemplateName = vm.selectedRecord.TemplateName + '-Copy';
                        vm.selectedRecord.Trigger = vm.selectedRecord.Trigger.join(',') + '-Copy';
                        vm.selectedRecord.Comment = vm.selectedRecord.Comment;
                        vm.selectedRecord.Title = vm.selectedRecord.Title;
                        vm.selectedRecord.Footer = vm.selectedRecord.Footer;
                        vm.selectedRecord.Buttons =vm.selectedRecord.Buttons!=null? vm.selectedRecord.Buttons:null;
                        vm.selectedRecord.Urls = vm.selectedRecord.Urls!=null ? vm.selectedRecord.Urls:null;
                        vm.selectedRecord.ListButton = vm.selectedRecord.ListButton!=null?vm.selectedRecord.ListButton:null;
                        vm.selectedRecord.ListSections = vm.selectedRecord.ListSections!=null?vm.selectedRecord.ListSections:null;
                        vm.selectedRecord.ListSectionRows = vm.selectedRecord.ListSectionRows!=null?vm.selectedRecord.ListSectionRows:null;
                        ViewModelUtilsService.showModalWhatsappTemplate(vm.selectedRecord);
                        vm.templates.map(function(template){ template.Selected = false;})
                   } 
                }
            }

            function setSelectedRecord(template){
                if(vm.templates !=undefined && vm.templates.length > 0 )
                {
                   if(vm.templates.filter(x => x.Selected).length > 0)
                   {
                        vm.selectedRecord = angular.copy(vm.templates.find(x => x.Selected));
                   } 
                   else {

                   }
                }
            }
        }
})();
    
(function () {
    'use strict';
    
     angular.module('foneClub').controller('WATemplateEditModalController', WATemplateEditModalController);
    
     WATemplateEditModalController.inject = ['ViewModelUtilsService',
      'FoneclubeService',
      'DialogFactory',
      'UtilsService',
      '$stateParams', '$filter'];

      function WATemplateEditModalController(ViewModelUtilsService,
        FoneclubeService,
        DialogFactory,
        UtilsService,
        $stateParams, $filter) {
            var vm = this;
            vm.selectedRecord = ViewModelUtilsService.modalData;
            vm.isEdit = ViewModelUtilsService.modalData == null? false: true;
            vm.addTemplate = addTemplate;
            vm.editTemplate = editTemplate;
            vm.sendTemplate = sendTemplate;
            vm.AddEdit = vm.isEdit ? "Edit" : "Add";

            loadTemplates();
            console.log('-- WA TemplateEditController --');

            function loadTemplates(){
                 FoneclubeService.getWATemplates().then(function (result) {
                     vm.templates = result;
                     console.log(vm.templates);
                 });
            }

            function addTemplate() {
                console.log('-- WA Add --');
                if(vm.selectedRecord)
                {
                    var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                    sendData.Id = -1;
                    sendData.Trigger = vm.selectedRecord.Trigger.split(',');
                    sendData.Buttons = (vm.selectedRecord.Buttons != undefined && vm.selectedRecord.Buttons != '') ? vm.selectedRecord.Buttons: null;
                    sendData.Urls = (vm.selectedRecord.Urls != undefined && vm.selectedRecord.Urls != '') ? vm.selectedRecord.Urls: null;
                    sendData.ListButton = vm.selectedRecord.ListButton != undefined  ? vm.selectedRecord.ListButton : "";
                    sendData.ListSections = (vm.selectedRecord.ListSections != undefined && vm.selectedRecord.ListSections != '') ? vm.selectedRecord.ListSections : null;
                    sendData.ListSectionRows = (vm.selectedRecord.ListSectionRows != undefined && vm.selectedRecord.ListSectionRows != '') ? vm.selectedRecord.ListSectionRows : null;
                    FoneclubeService.saveWATemplates(sendData).then(function (result) {
                        if(result){
                            alert("Data Saved Successfully");
                            //location.reload();
                        }
                    });
                    
                }
            }
  
            function editTemplate() 
            {
               var employeeToEdit = vm.templates.find(x => x.Id === vm.selectedRecord.Id);
               console.log('-- WA Edit --');
               
               if(employeeToEdit){
                var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                sendData.Trigger = vm.selectedRecord.Trigger.split(',');
                sendData.Buttons = (vm.selectedRecord.Buttons != undefined && vm.selectedRecord.Buttons != '') ? vm.selectedRecord.Buttons: null;
                sendData.Urls = (vm.selectedRecord.Urls != undefined && vm.selectedRecord.Urls != '') ? vm.selectedRecord.Urls: null;
                sendData.ListButton = vm.selectedRecord.ListButton != undefined  ? vm.selectedRecord.ListButton : "";
                sendData.ListSections = (vm.selectedRecord.ListSections != undefined && vm.selectedRecord.ListSections != '') ? vm.selectedRecord.ListSections : null;
                sendData.ListSectionRows = (vm.selectedRecord.ListSectionRows != undefined && vm.selectedRecord.ListSectionRows != '') ? vm.selectedRecord.ListSectionRows : null;
                FoneclubeService.saveWATemplates(sendData).then(function (result) {
                    if(result){
                        alert("Data Saved Successfully");
                        //location.reload();
                    }
                });
               }
               else{
                addTemplate();
               }
             }

             function sendTemplate(){
                var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
                sendData.Trigger = vm.selectedRecord.Trigger.split(',');
                sendData.Buttons = (vm.selectedRecord.Buttons != undefined && vm.selectedRecord.Buttons != '') ? vm.selectedRecord.Buttons: null;
                sendData.Urls = (vm.selectedRecord.Urls != undefined && vm.selectedRecord.Urls != '') ? vm.selectedRecord.Urls: null;
                sendData.ListButton = vm.selectedRecord.ListButton != undefined  ? vm.selectedRecord.ListButton : "";
                sendData.ListSections = (vm.selectedRecord.ListSections != undefined && vm.selectedRecord.ListSections != '') ? vm.selectedRecord.ListSections : null;
                sendData.ListSectionRows = (vm.selectedRecord.ListSectionRows != undefined && vm.selectedRecord.ListSectionRows != '') ? vm.selectedRecord.ListSectionRows : null;
            
                var data = {
                  PersonId : 1,
                  PhoneNumbers : "5521982008200,5521981908190,919665353881",
                  Template : sendData
                };
         
                FoneclubeService.sendGenericMsg(data).then(function(result)
                {
                    if(result == "Sent")
                    {
                        DialogFactory.showMessageDialog({mensagem:'Message sent successfully via whatsapp'});
                    }
                    else if(result == "Partial")
                    {
                        DialogFactory.showMessageDialog({mensagem:'Message partially sent to via whatsapp'});
                    }         
                    else
                    {
                        DialogFactory.showMessageDialog({mensagem:'Error occured while sending WhatsApp Message'});
                    }
                });
             }
        }
})();
    
(function () {
  'use strict';

  angular.module('foneClub').controller('WhatsappController', WhatsappController);

  WhatsappController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter', '$interval', '$scope'];

  function WhatsappController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter, $interval, $scope) {
    var vm = this;
    // debugger;
    vm.onSend = onSend;


    var customer = ViewModelUtilsService.modalData;
    vm.customer = customer;
    vm.name = vm.customer.Name;
    vm.text = '';
    vm.sendButtonText = 'Send';
    vm.messages = [];
    vm.currentUser = MainUtils.getAgent();
    init();

    function init() {
      FoneclubeService.getClientMessages(vm.customer.WClient.ClientId, false).then(function (result) {
        if (result) {
          vm.messages = result;
          if (vm.customer.WClient) {
            vm.customer.WClient.UnreadMessages = 0;
          }
        }
      });
    }

    function onSend() {
      if (!vm.text) {
        return;
      }
      var data = {
        ClientId: vm.customer.WClient.ClientId,
        Text: vm.text
      };

      if (vm.currentUser) {
        data.Text = vm.currentUser + ": " + data.Text;
        data.SendBy = vm.currentUser;
      }

      vm.sendButtonText = 'Sending..';
      FoneclubeService.postSendWhatsappMessage(data).then(function (result) {
        console.log(result);
        vm.sendButtonText = 'Send';
        if (result) {
          vm.text = "";
          init();
        } else {
          DialogFactory.showAlertDialog({ message: 'Message not sent' });
        }
      }); /* 
              .catch(function(error){
                  console.log('catch error');
                  console.log(error);
              }); */
    }

    var awaitingResponse = false;
    var stop = null;//$interval(loadClientMessages, 5000);
    function loadClientMessages() {
      if (!awaitingResponse) {
        awaitingResponse = true;
        FoneclubeService.getClientMessages(vm.customer.WClient.ClientId, true).then(function (result) {
          vm.messages = result;
          awaitingResponse = false;
          // console.log(result);
          if (result) {

          }
        });
      }
    }
    $scope.$on('$destroy', function () {
      // Make sure that the interval is destroyed too
      console.log("Scop destroyed");
      if (angular.isDefined(stop)) {
        $interval.cancel(stop);
        stop = undefined;
      }
    });
  }
})();

(function () {
  'use strict';

  angular.module('foneClub').controller('WPPController', WPPController);

  WPPController.inject = ['ViewModelUtilsService', 'MainUtils', 'FoneclubeService', 'DialogFactory', '$scope'];

  function WPPController(ViewModelUtilsService, MainUtils, FoneclubeService, DialogFactory, $scope) {
    var vm = this;
    vm.currentUser = MainUtils.getAgent();
    vm.log = '<br/>' +'';
    vm.startWPP = startWPP;
    vm.stopWPP = stopWPP;
    vm.startSession = startSession;
    vm.createToken = createToken;
    vm.closeSession = closeSession;
    vm.logoutSession = logoutSession;
    vm.getSessionStatus = getSessionStatus;
    vm.checkConnectionStatus = checkConnectionStatus;
    vm.clearLog = clearLog;

    init();

    function init() {
      
    }

    function startWPP(){
     FoneclubeService.wppStart().then(function(data){
        vm.log = '<br/>' +'Start WPP:'+ data.replace(/(?:\r\n|\r|\n)/g, '<br>') + '<br/>' + vm.log ;
      });
    }

    function stopWPP(){
     FoneclubeService.wppStop().then(function(data){
        vm.log = '<br/>' +'Stop WPP:'+ data.replace(/(?:\r\n|\r|\n)/g, '<br>') + '<br/>' + vm.log ;
      });
    }

    function startSession(){
      FoneclubeService.wppManageSession('start').then(function(data){
        try{
            var jsonData = JSON.parse(data);
            var statuslbl = '<label>Current status</label> : <label>"'+jsonData.status+'"</label><br/>';
            if(jsonData != undefined && jsonData.status == 'QRCODE'){
                var qrcode = statuslbl + '<img src="'+jsonData.qrcode+'"/>';
                vm.log = '<br/>' +"Start Session " + qrcode + '<br/>' + vm.log ;
            }
            else{
              vm.log = '<br/>' +"Start Session: " +statuslbl + '<br/>' + vm.log ;
            }
        }
        catch(ex){
           vm.log = '<br/>' +'Start Session: Error occured while trying to start session' + '<br/>' + vm.log ;
        }
      });
    }
    function logoutSession(){
      FoneclubeService.wppManageSession('logout').then(function(data){
         vm.log = '<br/>' +"Log-out Session: " + data.replace(/(?:\r\n|\r|\n)/g, '<br>') + '<br/>' + vm.log ;
      });
    }
    function getSessionStatus(){
      FoneclubeService.wppStatusSession().then(function(data){
        try{
            var jsonData = JSON.parse(data);
            var statuslbl = '<label>Current status</label> : <label>"'+jsonData.status+'"</label><br/>';
            vm.log = '<br/>' +"Get Session Status: " + statuslbl + '<br/>' + vm.log ;
        }
        catch(ex){
           vm.log = '<br/>' +"Get Session Status: Error occured while trying to start session"+ '<br/>' + vm.log ;
        }
      });
    }

    function checkConnectionStatus(){
      FoneclubeService.wppCheckConnectionStatus().then(function(data){
        try{
            var jsonData = JSON.parse(data);
            var statuslbl = '<label>Current status</label> : <label>"'+jsonData.message+'"</label><br/>';
            vm.log = '<br/>' +"Check Connection Status: " + statuslbl+ '<br/>' + vm.log ;
        }
        catch(ex){
           vm.log = '<br/>' +'Check Connection Status: Error occured while trying to start session'+ '<br/>' + vm.log ;
        }
      });
    }
    function closeSession(){
      FoneclubeService.wppManageSession('close').then(function(data){
        vm.log = '<br/>' +"Close Session: "+ data+ '<br/>' + vm.log ;
      });
    }
    function createToken(){
       FoneclubeService.wppCreateTokenSession('12345').then(function(data){
           vm.log = '<br/>' +"Create Token: "+ data+ '<br/>' + vm.log ;
      });
    }

    function clearLog(){
      vm.log = "";
    }

  }
})();

(function() {
  'use strict';

  angular.module('foneClub').controller('CommentController', CommentController);

  CommentController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService'
  ];

  function CommentController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService
  ) {
    var vm = this;
    // debugger;
    vm.onTapAddComment = onTapAddComment;
    var customer = ViewModelUtilsService.modalCommentData;

    vm.customer = customer;

    function onTapAddComment(data) {
      // debugger;
      data.intIdPerson = customer.Id;

      FoneclubeService.postCustomerComment(data).then(function(result) {
        // debugger;
        console.log(result);
        if (result) {
          DialogFactory.showAlertDialog({ message: 'Inserido com sucesso' });
        } else {
          DialogFactory.showAlertDialog({ message: 'Inserido falhou' });
        }
      }); /* 
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            }); */
    }
  }
})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('CustomerModalController', CustomerModalController);

  CustomerModalController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'FoneclubeService',
    'FlowManagerService',
    'DialogFactory'
  ];

  function CustomerModalController(
    ViewModelUtilsService,
    PagarmeService,
    FoneclubeService,
    FlowManagerService,
    DialogFactory
  ) {

    var vm = this;

    var customer = ViewModelUtilsService.modalCustomerData;

    var CARTAO = 1;
    var BOLETO = 2;
    vm.so_cnt = 0;
    vm.co_cnt = 0;

    var carregandoPagarme = false;
    vm.showCards = true;
    vm.showChargings = true;
    vm.showServiceOrders = true;
    vm.showSecundaryChargings = true;
    vm.showFlags = false;
    vm.flags = [];
    vm.expanded = false;

    vm.month = new Date().getMonth() + 1;
    vm.year = new Date().getFullYear();
    vm.mensagemPagarme = 'Refresh DB';

    vm.onTapNewCardPayment = onTapNewCardPayment;
    vm.onTapBoleto = onTapBoleto;
    vm.onTapCard = onTapCard;
    vm.onTapEditar = onTapEditar;
    vm.onTapExcluir = onTapExcluir;
    vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
    vm.onTapOrdemServico = onTapOrdemServico;
    vm.cancelarPagamento = etapaEscolhaCartao;
    vm.onTapComment = onTapComment;
    vm.onTapFlag = onTapFlag;
    vm.EnableDisableCharge = EnableDisableCharge;
    vm.GetInstallmentText = GetInstallmentText;
    vm.customer = customer;

    vm.onTapUpdatePagarme = onTapUpdatePagarme;
    vm.onResentEmail = onResentEmail;
    vm.onClickCardTitle = onClickCardTitle;
    vm.onClickChargingsTitle = onClickChargingsTitle;
    vm.onClickServiceOrdersTitle = onClickServiceOrdersTitle;
    vm.onClickSecundaryChargingsTitle = onClickSecundaryChargingsTitle;
    vm.onClickFlagsTitle = onClickFlagsTitle;
    vm.editPendingFlag = editPendingFlag;
    vm.formatDate = formatDate;
    vm.onTapDebito = onTapDebito;
    vm.onTapPix = onTapPix;
    vm.onTapDesfazer = onTapDesfazer;
    vm.onTapEditor = onTapEditor;
    vm.onTapLiberarBeneficio = onTapLiberarBeneficio;
    vm.CopyCodigoAndPix = CopyCodigoAndPix;
    vm.CopyCodigo = CopyCodigo;
    vm.CopyQRCodePix = CopyQRCodePix;
    vm.ClipBoardCopy = ClipBoardCopy;
    vm.CopyBoletoMsg = CopyBoletoMsg;
    vm.DecodeURITextAndReplace = DecodeURITextAndReplace;
    vm.GetCardLastDigit = GetCardLastDigit;
    vm.GetFixedAmount = GetFixedAmount;
    vm.GetLocalDate = GetLocalDate;
    vm.ExpandAll = ExpandAll;
    vm.onTapInternationDeposits = onTapInternationDeposits;
    vm.temEndereco = false;
    vm.linkAPI;

    init();

    function init() {
      //debugger

      vm.linkAPI = FoneclubeService.getAPIUrl();

      FoneclubeService.getCustomerByCPF(customer.DocumentNumber).then(function (result) {
        customer.Adresses = result.Adresses;
        vm.temEndereco = true;
      })

      if (!customer.IdPagarme) {
        PagarmeService.getCustomer(customer.DocumentNumber)
          .then(function (result) {
            try {
              var pagarmeID = result[0].id;
              updatePagarmeId(pagarmeID);
              initCardList(pagarmeID);
              etapaEscolhaCartao();
            } catch (erro) {
              console.log(erro);
              etapaEscolhaCartao();
            }
          })
          .catch(function (error) {
            console.log(error);
            etapaEscolhaCartao();
          });
      } else {
        etapaEscolhaCartao();
        initCardList(customer.IdPagarme);
      }

      FoneclubeService.getPersonFlags(customer.Id).then(
        function (result) {
          var lista = result;
          lista.reverse();
          vm.flags = lista
        }
      );



      FoneclubeService.getStatusChargingOfCustomer(customer.Id, vm.month, vm.year).then(
        function (result) {
          vm.charged_status = result[0];
        }
      );

      FoneclubeService.getChargeAndServiceOrderHistory(customer.Id).then(function (result) {

        vm.chargesAndOrders = result;
        vm.chargesArray = [];
        vm.osArray = [];
        vm.osDescArray = [];
        // debugger;

        for (var i in vm.chargesAndOrders) {
          // if (parseInt(i) >= 203) {
          //   // debugger
          // }

          var data = vm.chargesAndOrders[+i];

          if (data.IsCharge) {
            try {
              vm.chargesAndOrders[i].Charges.resentMessage = 'Reenviar email';
            } catch (e) { }


            data.Charges.descriptionType = data.Charges.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';

            var DEBITO = 3;
            if (data.Charges.PaymentType == DEBITO)
              data.Charges.descriptionType = "Débito";

            if (data.Charges) {
              if (data.Charges.BoletoExpires) {
                var expiryDate = new Date(data.Charges.ExpireDate);
                var expiryDateAfter4 = new Date(data.Charges.ExpireDate);
                expiryDateAfter4.setDate(expiryDateAfter4.getDate() + 3);

                var currentDate = new Date();
                if (data.Charges.PaymentStatusDescription == "Paid") {
                  data.Charges.statusColor = "Green";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate <= expiryDate) {
                  //  change status to "Aguardando Pagamento" = Green Icon
                  data.Charges.statusColor = "Green";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate < expiryDateAfter4) {
                  //change status to "Pendente Pagamento"   Yello Icon
                  data.Charges.statusColor = "Yellow";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate > expiryDateAfter4) {
                  // change status to "Pendente Pagamento"   RED Icon
                  data.Charges.statusColor = "Red";
                }
                else {
                  data.Charges.statusColor = "grey";
                }
              }
              else {
                if (data.Charges.PaymentStatusDescription == "Paid") {
                  data.Charges.statusColor = "Green";
                }
                else {
                  data.Charges.statusColor = "grey";
                }
              }
            }

            if (data.Charges.PaymentType == CARTAO && data.Charges.PaymentStatusDescription == 'Paid') {
              data.Charges.PaymentStatusDescription = 'Accepted';
            }
            data.open = true;
            vm.chargesArray.push(data); // na moral ning merece
          }
          if (data.IsServiceOrder) {
            // debugger
            vm.osArray.push(data);
          }
        }
        // debugger
        for (var i in vm.osArray) {
          vm.osDescArray.push(vm.osArray[vm.osArray.length - i]);
        }

        customer.chargesAndOrders = vm.chargesAndOrders;
        vm.chargesArray.forEach(function (e) {
          e.open = vm.expanded;
        });
      });

      FoneclubeService.getHistoryPayment(customer.Id)
        .then(function (result) {
          vm.histories = result;
          for (var i in vm.histories) {
            var history = vm.histories[i];
            history.descriptionType =
              history.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';

            if (history.PaymentType == BOLETO) {
            }
          }
          customer.histories = vm.histories;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });

      FoneclubeService.getTblServiceOrders(customer.Id)
        .then(function (result) {
          console.log('FoneclubeService.getTblServiceOrders');
          console.log(result);
          vm.orders = result;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });

      FoneclubeService.getChargingLog(customer.Id)
        .then(function (result) {
          console.log('getChargingLog');
          // debugger;
          vm.historyLog = [];
          for (var i in result) {
            vm.historyLog.push(JSON.parse(result[i]));
          }
          // debugger;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });

      FoneclubeService.getChargingScheduleHistory(customer.Id)
        .then(function (result) {
          console.log('------- getChargingScheduleHistory');
          // debugger;
          vm.historyScheduleLog = [];

          result.sort(function (o1, o2) {
            return o1.DataExecucao ? -1 : o2.DataExecucao ? 1 : 0;
          });

          for (var i in result) {
            vm.historyScheduleLog.push(result[i]);
          }
          // debugger;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function formatDate(date) {
      date = date.split(' ')[0];
      var dateOut = new Date(date);
      dateOut = dateOut.getDate() + "/" + getMonth(dateOut.getMonth()) + "/" + dateOut.getFullYear().toString().substring(2);
      return dateOut;
    }

    function getMonth(monthNumber) {
      var months = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      return months[monthNumber];
    }

    function onTapInternationDeposits() {
      ViewModelUtilsService.showInternationDeposits(customer);
    }

    function onTapUpdatePagarme() {
      if (!carregandoPagarme) {
        carregandoPagarme = true;
        vm.mensagemPagarme = 'Aguarde...';
        FoneclubeService.getUpdatePagarme().then(function (result) {
          if (result)
            alert('Lista pagarme atualizada, por favor recarregue a página sem cache.');
          else alert('Lista pagarme não atualizada');

          carregandoPagarme = false;
          vm.mensagemPagarme = 'Refresh DB';
        });
      }
    }

    function onTapExcluir() {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber
      };
      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.postDeletePerson(personCheckout)
            .then(function (result) {
              console.log(result);
              if (result) {
                DialogFactory.showMessageDialog({
                  message:
                    'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido'
                });
                closeThisDialog(0);
              } else DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
            })
            .catch(function (error) {
              console.log('catch error');
              console.log(error);
            });
        }
      });
    }

    function setStatusBoleto(history) {
      console.log('setStatusBoleto');
      console.log(history);
      PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
        history.StatusPayment = result[0].status;
        boleto_url;
      });
    }

    function updatePagarmeId(pagarmeID) {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber,
        IdPagarme: pagarmeID
      };

      FoneclubeService.postUpdatePerson(personCheckout)
        .then(function (result) {
          console.log(result);
          initCardList(pagarmeID);
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function onTapNewCardPayment() {
      console.log('onTapNewCardPayment');
      ViewModelUtilsService.showModalNewCardPayment(customer);
    }

    function onTapComment() {
      ViewModelUtilsService.showModalComment(customer);
    }

    function onTapFlag() {
      ViewModelUtilsService.showModalFlag(customer);
    }

    function initCardList(customerId) {
      PagarmeService.getCard(customerId)
        .then(function (result) {
          vm.cards = result.sort(function (a, b) {
            return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
          });
        })
        .catch(function (error) {
          console.log(error);
          vm.message = 'falha ao recuperar cartão';
        });
    }

    function onTapCard(card) {
      ViewModelUtilsService.showModalExistentCardPayment(customer, card);
    }

    function onTapBoleto(card) {
      ViewModelUtilsService.showModalBoleto(customer);
    }

    function onTapPagar() {
      vm.message = 'Transação iniciada';
      var customer;

      if (
        !vm.customer.address ||
        !vm.customer.phone ||
        !vm.customer.email ||
        !vm.customer.document_number ||
        !vm.customer.name
      ) {
        customer = {
          name: vm.customer.name,
          document_number: vm.customer.document_number,
          email: vm.customer.email,
          address: {
            street: 'empty',
            street_number: '10',
            neighborhood: 'empty',
            zipcode: '01452000'
          },
          phone: {
            ddd: '00',
            number: '000000000'
          }
        };
      }

      PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer).then(
        function (result) {
          vm.message = 'Transação efetuada';
          PagarmeService.postCaptureTransaction(result.token, vm.amount)
            .then(function (result) {
              vm.message = 'Transação concluída';
            })
            .catch(function (error) {
              try {
                vm.message = 'Erro na captura da transação' + error.status;
              } catch (erro) {
                vm.message = 'Erro na captura da transação';
              }
              console.log(error);
            });
        }
      );
    }

    function etapaEscolhaCartao() {
      vm.amount = '';
      vm.etapaEscolhaCartao = true;
      vm.etapaQuantia = false;
    }

    function etapaQuantia() {
      vm.etapaEscolhaCartao = false;
      vm.etapaQuantia = true;
    }

    function onTapEditar() {
      customer.view = 1;
      FlowManagerService.changeEdicaoView(customer);
    }

    function onTapPaymentHistoryDetail(history) {
      ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
    }

    function onTapOrdemServico() {
      FlowManagerService.changeOrdemServicoView(customer);
    }

    function onResentEmail(charge) {
      //debugger;
      var DEBITO = 3;
      var PIX_EmailTemplate_Type = 30;
      var qrcodelink = "http://api.foneclube.com.br/api/pagarme/pix/qrcode/";
      // if(charge.PaymentType == DEBITO)
      // {
      //  alert('ainda não é possível reenviar email de cobrança de débito');
      //  return;
      // }

      DialogFactory.dialogConfirm({
        mensagem: 'Tem certeza que deseja reenviar o email dessa cobrança?'
      }).then(function (value) {
        if (value) {
          if (charge.resentMessage != 'Enviando...') {
            charge.resentMessage = 'Enviando...';
            console.log(vm.customer);
            if (charge.PaymentType == BOLETO) {
              var boletoUrl = '';
              if (charge.boleto_url) boletoUrl = charge.boleto_url;

              var emailObject = {
                Id: vm.customer.Id,
                To: vm.customer.Email,
                TargetName: vm.customer.Name,
                TargetTextBlue: boletoUrl,
                TargetSecondaryText: charge.CommentEmail,
                TemplateType: BOLETO,
                DiscountPrice: (charge.Ammount / 100).toFixed(2).replace('.', ',')
              };

              // emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',');

              FoneclubeService.postSendEmail(emailObject)
                .then(function (result) {
                  console.log(result);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email reenviado com sucesso',
                    titulo: 'Informação'
                  });
                })
                .catch(function (error) {
                  console.log('catch error');
                  console.log(error);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email não reenviado ' + error.message,
                    titulo: 'Informação'
                  });
                });
            }

            if (charge.PaymentType == CARTAO) {
              var emailObject = {
                Id: vm.customer.Id,
                To: vm.customer.Email,
                TargetName: vm.customer.Name,
                TargetTextBlue: (charge.Ammount / 100).toFixed(2).replace('.', ','),
                TargetSecondaryText: charge.CommentEmail,
                TemplateType: CARTAO
              };

              FoneclubeService.postSendEmail(emailObject)
                .then(function (result) {
                  console.log(result);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email reenviado com sucesso',
                    titulo: 'Informação'
                  });
                })
                .catch(function (error) {
                  console.log('catch error');
                  console.log(error);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email não reenviado ' + error.message,
                    titulo: 'Informação'
                  });
                });
            }


            if (charge.PaymentType == DEBITO) {
              var emailObject = {
                Id: vm.customer.Id,
                To: vm.customer.Email,
                TargetName: vm.customer.Name,
                TargetTextBlue: qrcodelink + charge.Id,
                TargetSecondaryText: "<b>Total da sua conta: R$ " + (charge.Ammount / 100).toFixed(2).replace('.', ',') + "</b>",
                TemplateType: PIX_EmailTemplate_Type
              };

              FoneclubeService.postSendEmail(emailObject)
                .then(function (result) {
                  console.log(result);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email reenviado com sucesso',
                    titulo: 'Informação'
                  });
                })
                .catch(function (error) {
                  console.log('catch error');
                  console.log(error);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email não reenviado ' + error.message,
                    titulo: 'Informação'
                  });
                });
            }
          }
        }
      });
    }

    function onClickCardTitle() {
      console.log('teste')
      vm.showCards = !vm.showCards;
    }

    function onClickChargingsTitle() {
      vm.showChargings = !vm.showChargings;
    }

    function onClickServiceOrdersTitle() {
      vm.showServiceOrders = !vm.showServiceOrders;
    }

    function onClickSecundaryChargingsTitle() {
      vm.showSecundaryChargings = !vm.showSecundaryChargings;
    }

    function onClickFlagsTitle() {
      vm.showFlags = !vm.showFlags;
      console.log(vm.showFlags)
    }

    function onTapDebito(customer) {
      ViewModelUtilsService.showModalDebito(customer);
    }

    function onTapPix(customer) {
      console.log(customer);
      ViewModelUtilsService.showModalPIX(customer);
    }

    function editPendingFlag(flag) {
      // alert('Edição ainda não implementada')
      //debugger;
      var tempFlag = {
        'Id': flag.Id,
        'PendingInteraction': !flag.PendingInteraction
      }

      FoneclubeService.postUpdateFlag(tempFlag).then(function (result) {
        //debugger
        console.log(result);
        if (result) {
          flag.PendingInteraction = !flag.PendingInteraction
          DialogFactory.showAlertDialog({ message: 'Flag alterada com sucesso' });
        } else {
          DialogFactory.showAlertDialog({ message: 'Update de flag falhou' });
        }
      });
    }

    function onTapLiberarBeneficio(customer) {
      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá dar baixa nos benefícios do cliente, tem certeza que o cliente recebeu a comissão e bônus e deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
            if (result) {
              DialogFactory.showAlertDialog({ message: 'Baixa efetuada com sucesso' });
            }
            else {
              DialogFactory.showAlertDialog({ message: 'Ocorreu um problema ao tentar dar baixa' });
            }

          })
            .catch(function (error) {

            })
        }

      });
    }

    function onTapDesfazer(item) {

      console.log(item);
      //debugger;


      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá desfazer o agendamento, deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.getDeleteAgendamentoCobranca(item.Id)
            .then(function (result) {

              //debugger;
              console.log(result);
              if (result) {

                DialogFactory.showMessageDialog({
                  mensagem: 'o agendamento foi removido com sucesso',
                  titulo: 'Informação'
                });

              }
              else {

                DialogFactory.showMessageDialog({
                  mensagem: 'o agendamento não foi removido',
                  titulo: 'Informação'
                });
              }

            })
            .catch(function (error) {
              console.log('catch error');
              console.log(error);
            });
        }
      });
    }

    function onTapEditor(item) {
      console.log(item);
      item.CustomerName = vm.customer.Name;
      item.CustomerId = vm.customer.Id;
      ViewModelUtilsService.showScheudleEditModal(item);
    }

    function CopyCodigoAndPix(DueDate, Vingencia, total, ChargeId, PixCode, emailMessage) {
      var chargesummaryurl = window.location.origin + "/#/resumocobranca/" + vm.customer.Id + "/" + ChargeId;
      var text_to_share = `🤖 FoneClube: *FoneBot*

*Prezado Cliente FoneClube*,

Segue resumo da sua última cobrança que já foi enviado para seu email.

*Vencimento:${DueDate}*
*Vigencia:${Vingencia}*
*Total:R$${total}*

*Detalhes para pagamento no link abaixo.*

${chargesummaryurl}

*Para visualizar seu QrCode siga o link abaixo*

http://api.foneclube.com.br/api/pagarme/pix/qrcode/${ChargeId}

Caso tenha alguma dúvida envie um *whatsapp para ${'https://wa.me/5521981908190'}* ou email para *financeiro@foneclube.com.br*.

Obrigado pela Atenção:
*FoneClube*  👍`;

      ClipBoardCopy(text_to_share);

    }

    function CopyQRCodePix(DueDate, Vingencia, total, ChargeId, PixCode, emailMessage) {

      var text_to_share = `🤖 FoneClube: *FoneBot*

*Prezado Cliente FoneClube*,

Segue resumo da sua última cobrança que já foi enviado para seu email.

*Vencimento:${DueDate}*
*Vigencia:${Vingencia}*
*Total:R$${total}*

${decodeURIComponent(emailMessage)}

*Para visualizar seu QrCode siga o link abaixo*

*http://api.foneclube.com.br/api/pagarme/pix/qrcode/${ChargeId}*

Caso tenha alguma dúvida envie um *whatsapp para ${'https://wa.me/5521981908190'}* ou email para *financeiro@foneclube.com.br*.

Obrigado pela Atenção:
*FoneClube*  👍`;

      ClipBoardCopy(text_to_share);

    }

    function CopyCodigo(PixCode) {


      var text_toShare = `${PixCode}


*ATTENÇÃO: A parte azul do texto acima não é um link e se clicar nele vai dar erro!*

É necessario copiar todo texto do codigo PIX acima e colar ele no aplictivo do seu banco.`;

      ClipBoardCopy(text_toShare);
    }

    function CopyBoletoMsg(DueDate, Vingencia, total, boletoUrl, boletoCode, emailMessage, ChargeId) {
      var chargesummaryurl = window.location.origin + "/#/resumocobranca/" + vm.customer.Id + "/" + ChargeId;
      var text_to_share = `🤖 FoneClube: *FoneBot*

*Prezado Cliente FoneClube*,

Segue resumo da sua última cobrança que ja foi enviado para seu email.

*Vencimento:${DueDate}*
*Vigencia:${Vingencia}*
*Total:R$${total}*

${decodeURIComponent(emailMessage)}

*Detalhes para pagamento no link abaixo.*

${chargesummaryurl}

Caso tenha alguma dúvida envie um *whatsapp para ${'https://wa.me/5521981908190'}* ou email para *financeiro@foneclube.com.br*.

Obrigado pela Atenção:
*FoneClube*  👍`;

      ClipBoardCopy(text_to_share);
    }

    function ClipBoardCopy(text_to_share) {
      // create temp element
      var copyElement = document.createElement("pre");
      copyElement.appendChild(document.createTextNode(text_to_share));
      copyElement.id = 'tempCopyToClipboard';
      angular.element(document.body.append(copyElement));

      // select the text
      var range = document.createRange();
      range.selectNode(copyElement);
      window.getSelection().removeAllRanges();
      window.getSelection().addRange(range);

      // copy & cleanup
      document.execCommand('copy');
      window.getSelection().removeAllRanges();
      copyElement.remove();
    }

    function DecodeURITextAndReplace(txt, cmt) {
      var text = '';
      if (decodeURIComponent(txt).includes("Detalhes.Cobrança")) {
        text = decodeURIComponent(txt).replace(/\n/g, '<br />').replace(/\*/g, '').replace(/\||/g, '').replace("Detalhes.Cobrança", cmt);
      }
      else {
        text = decodeURIComponent(txt).replace(/\n/g, '<br />').replace(/\*/g, '').replace(/\||/g, '');
      }
      return text;

    }

    //clientes com flag em aberto aparece icone de bandeira preenchida, os que não tiverem, bandeira vazia
    // ao clicar na bandeira cheia abre modal com flags expandidas, caso contrário abrem colapsado


    // Quando a chamada é concluida chama a função init para atualizar o custumers e alterar entre on/off
    function EnableDisableCharge(personId, isEnable) {
      FoneclubeService.setChargingFlagByUser(personId, isEnable).then(() => {
        init()
      });
    }

    function GetCardLastDigit(cardid) {
      if (cardid != undefined && vm.cards != null && vm.cards != undefined) {
        var selectedCard = vm.cards.find(x => x.id == cardid);
        if (selectedCard != null)
          return selectedCard.last_digits;
      }
      else
        return "";
    }

    function ExpandAll() {
      vm.expanded = !vm.expanded;
      vm.chargesArray.forEach(function (e) {
        e.open = vm.expanded;
      });
    }

    function GetFixedAmount(Amount) {
      return 'R$' + (Amount / 100).toFixed(2);
    }

    function GetLocalDate(date) {
      return new Date(date).toLocaleString('pt-br', { day: '2-digit', month: 'long', year: 'numeric' });
    }

    function GetInstallmentText(count) {
      if (count > 0)
        return "em " + count + "X";
      else
        return "";
    }

  }

})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('CustomerScheduleEditModalController', CustomerScheduleEditModalController);

  CustomerScheduleEditModalController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'FoneclubeService',
    'UtilsService',
    'FlowManagerService',
    'DialogFactory'
  ];

  function CustomerScheduleEditModalController(
    ViewModelUtilsService,
    PagarmeService,
    UtilsService,
    FoneclubeService,
    FlowManagerService,
    DialogFactory
  ) {
        var vm = this;
        vm.changeTextValue = changeTextValue;
        vm.changeTextValueChange = changeTextValueChange;
        vm.generateDefaults = generateDefaults;
        vm.Atualizar = Atualizar;

        vm.replaceIndex = 0;
        vm.AdditionalComment = "";

        vm.ParentData = ViewModelUtilsService.modalData;


        vm.paymentTypes = [ { Id:1, Name: "CARTÃO" }, { Id:2, Name:"BOLETO" }, { Id:3, Name:"PIX" } ];
        vm.amountTemp = parseInt(vm.ParentData.ValorCobrado);
        vm.vigenciaField =  moment(vm.ParentData.Vingencia).format("YYYY MM");
        vm.expirationDateField = moment(vm.ParentData.DataExecucao).format("DD MMMM YYYY");
        vm.dataExecucao = moment(vm.ParentData.DataExecucao).format("DD MMMM YYYY"); 
        vm.Name = vm.ParentData.CustomerName;
        vm.PaymentType = vm.ParentData.Tipo == "PIX" ? 3 : vm.ParentData.Tipo == "BOLETO" ? 2 : 1;
        
        vm.defaultTemplateText = `🤖 FoneClube: FoneBot
Prezado *|namevariable|*,

Segue resumo da sua última cobrança que que será enviada por email e whatsapp.  
*|Detalhes.Cobrança|*

Vigencia:*|vigenciavariable|* 
Vencimento:*|vencimentovariable|*
Total:*R$|amountvariable|*

Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}*

ou email para 

*financeiro@foneclube.com.br*.  

Obrigado pela Atenção: 
*FoneClube*  👍`;
        init();

        function init(){
            vm.customerComment = (vm.ParentData.CommentEmail != null &&  vm.ParentData.CommentEmail != "") ? decodeURIComponent(vm.ParentData.CommentEmail) :vm.defaultTemplateText;
            changeTextValue();
        }

        function changeTextValue(){
            if(vm.customerComment!=undefined){
                vm.replaceIndex = 0;
                vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
                vm.replaceIndex = 0;
          }
        }

        function changeTextValueChange(){
            //refreshVencimento(false);
            if(vm.customerComment!=undefined){
                vm.replaceIndex = 0;
                vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
                vm.replaceIndex = 0;
            }
          }
          function refreshVencimento(blnVal){ 
                var foDate = '';
                var currentDate = new Date();
                var selectedDt = new Date(new Date().getFullYear().toString(), vm.vigenciaField.split(" ")[1] - 1, vm.padroaValue);
                if(!blnVal){
                  selectedDt = new Date(vm.expirationDateField);
                }
                if(currentDate >= selectedDt){
                  foDate = UtilsService.formatDate(UtilsService.addDays(0));
                }
                else{
                  var datediff = UtilsService.diffBtDays(currentDate, selectedDt);
                  foDate = UtilsService.formatDate(UtilsService.addDays(datediff));
                }
                console.log("foDate: " + foDate);
                upDateCalendar(foDate);
            }

            function upDateCalendar(date){
              vm.expirationDateField = moment(date).format("DD MMMM YYYY");
            }

        function autoRepalceText(match, start, changeValue, end, offset, string) {
            var resStr = "";
            if(vm.replaceIndex == 0){
              resStr = vm.Name;
            }
            if(vm.replaceIndex == 1){
              vm.AdditionalComment = changeValue;
              resStr = changeValue;
            }
            if(vm.replaceIndex == 2){
              resStr = vm.vigenciaField.split(" ")[1] ? new Date(0,parseInt(vm.vigenciaField.split(" ")[1]),0).toLocaleDateString('pt-br', { month: 'long'}) : '';
            }
            if(vm.replaceIndex == 3){
              var dat = new Date(vm.expirationDateField);
              dat.setDate(dat.getDate());
              var expirationDt = dat.toLocaleDateString('pt-br', { day: '2-digit', month: 'long'});
              resStr = expirationDt.replace(' ',', ')
            }
            if(vm.replaceIndex == 4){
              resStr =  vm.amountTemp / 100;
            }
            vm.replaceIndex++;

            return start + resStr + end;
          }

          function generateDefaults(){
              vm.customerComment = vm.defaultTemplateText;
              changeTextValue();
          }

          function Atualizar(){
            var data = {
                Id: vm.ParentData.Id,
                DataExecucao: moment(vm.dataExecucao).format("YYYY-MM-DD"),
                Vingencia:  moment(vm.vigenciaField).format("YYYY-MM-DD"), 
                Vencimento: moment(vm.expirationDateField).format("YYYY-MM-DD"), 
                Tipo: vm.PaymentType,
                ValorCobrado: vm.amountTemp,
                CommentEmail: encodeURIComponent(vm.customerComment),
                AdditionalComment: vm.AdditionalComment  
            };

            FoneclubeService.postUpdateScheduledCharges(data).then(function (result) {
                if(result)
                    alert("Agendamento de cobrança atualizado com sucesso");
                else
                    alert("Ocorreu um erro ao atualizar a cobrança programada");
            });
          }
 }
  
})();
(function() {
    'use strict';

        angular
            .module('foneClub')
            .controller('BoletoModalController', BoletoModalController);


        BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
        function BoletoModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


            console.log('--- BoletoModalController ---');
            var vm = this;
            vm.date = new Date();
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.chargeDisabled = true;
            vm.cobrancaRealizada = false;
            vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.padroaValue = vm.customer.DefaultPaymentDay!= undefined ? vm.customer.DefaultPaymentDay : 25;
            vm.comment = '';
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.checkOne = checkOne;
            vm.enviaEmail = true;
            vm.enviaWhatsapp = true;
            vm.calculate = calculate;
            vm.amount = 0;
            vm.amountTemp = 0;
            vm.amountTemp1 = 0;
            vm.bonus = 0;
            vm.bothPP = 1;
 	          vm.showCopyButtons = true;
            vm.totaisComissoes = {};
            vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente = 0;
            vm.expirationDateField =  moment().subtract(1, 'day').format("DD MMMM YYYY");
            vm.vigenciaField = moment().subtract(1, 'day').format("YYYY MM");
            vm.changeTextValue = changeTextValue;
            vm.changeTextValueChange = changeTextValueChange;
            vm.incrementPadroa=incrementPadroa;
            vm.decrementPadroa=decrementPadroa;
            vm.incrementBothPP = incrementBothPP;
            vm.decrementBothPP = decrementBothPP;
            vm.refreshVencimento = refreshVencimento;
            vm.upDateCalendar = upDateCalendar;
            vm.CopyBoletoMsg = CopyBoletoMsg;
            vm.copyForWhatsapp = copyForWhatsapp;
            vm.copyForTelegram = copyForTelegram;
            vm.generateAndPasteDefaults = generateAndPasteDefaults;
            vm.validatePhone = validatePhone;
            var customerId = customer.Id;
            var botImage = "🤖";
            var thumbsImage = "👍";
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)

            }

            vm.Padrão = false;
            vm.Excepcional = false;
            vm.customerPhones="";
            vm.customersInvalidPhones = "";
            vm.AdditionalComment = "";
            vm.defaultBoletoText = `Vigencia: *|vigenciavariable|*
Vencimento: *|vencimentovariable|*
Total: *R$|amountvariable|*
`;
            vm.defaultTemplateText = `🤖 FoneClube: FoneBot
Prezado *|namevariable|*, 

Segue resumo da sua última cobrança que que esta sendo enviada por email e whatsapp.
*|Detalhes.Cobrança|*

Vigencia:*|vigenciavariable|* 
Vencimento:*|vencimentovariable|*
Total:*R$|amountvariable|* 

Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}* 

ou email para 

*financeiro@foneclube.com.br*.  

Obrigado pela Atenção: 
FoneClube  👍`;

            var CARTAO = 1;
            var BOLETO = 2;

            init();
            refreshVencimento();

          function init() {
            vm.chargeStatusfirst = true;
            vm.chargeStatus = 1;
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
              vm.histories = result;
              for (var i in vm.histories) {
                var history = vm.histories[i];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
                if (i == 0) {
                  if(history.CommentEmail !=undefined)
                  {
                    vm.customerComment = decodeURIComponent(history.CommentEmail);
                  }
                  else{
                    vm.customerComment =  vm.defaultTemplateText;
                  }
                  if(history.Comment !=undefined){
                    vm.comment = decodeURIComponent(history.Comment);
                  }
                  else{
                    vm.comment = vm.defaultTemplateText;
                  }
                  if(history.commentBoleto !=undefined){
                    vm.commentBoleto = decodeURIComponent(history.commentBoleto);
                  }
                  else{
                    vm.commentBoleto = vm.defaultBoletoText;
                  }
                  vm.amount = history.Ammount / 100;
                  vm.vigenciaField = moment(history.AnoVingencia + " " + history.MesVingencia).format("YYYY MM");
                  vm.expirationDateField = UtilsService.formatDate(new Date(history.DueDate).getFullYear() == 2000 ? moment(UtilsService.addDays(1)).format("DD MMMM YYYY"): moment(history.DueDate).format("DD MMMM YYYY"));
                  vm.amountTemp = vm.amount.toFixed(2);
                  vm.amountTemp1 = vm.amount.toFixed(2);
                  vm.padroaValue = history.DefaultPaymentDay;
                  vm.verificarValue = history.VerficarDay;
                  calculate();
                  refreshVencimento(true);

                  if(history.TxtWAPhones == undefined || history.TxtWAPhones == null)
                    vm.customerPhones = customer.Phones.filter(x=>!x.IsFoneclube)[0].DDD + customer.Phones.filter(x=>!x.IsFoneclube)[0].Number;
                else
                  vm.customerPhones=history.TxtWAPhones;
                validatePhone();
                }
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
                }
              }
              customer.histories = vm.histories;
            })
            .catch(function (error) {

            });

            FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
              console.log('FoneclubeService.getTotaisComissoes')
              console.log(result)
              vm.totaisComissoes = result;

            })


            FoneclubeService.getCommision(customer.Id).then(function (result) {
              vm.bonus = parseFloat(result.Ammount / 100).toFixed(2);
              calculate();
              changeTextValue();
            })
              .catch(function (error) {

              });
          }

          function checkOne(val) {
            //alert('xx');
            vm.chargeDisabled = false;
            if (val == '1') {
              vm.chargeStatusfirst = true;
              vm.chargeStatusSecond = false;
              vm.chargeStatus = 1;
            }
            if (val == '2') {
              vm.chargeStatusSecond = true;
              vm.chargeStatusfirst = false;
              vm.chargeStatus = 2;
            }
          }

      function changeTextValue(){
            //refreshVencimento(true);
            if(vm.customerComment!=undefined){
            vm.replaceIndex = 0;
            vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
            vm.replaceIndex = 0;

            vm.replaceIndexBoleto = 0;
            vm.commentBoleto = vm.commentBoleto.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceTextBoleto);
            vm.replaceIndexBoleto = 0;
            }
      }

      function changeTextValueChange(){
        refreshVencimento(false);
        if(vm.customerComment!=undefined){
            vm.replaceIndex = 0;
            vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
            vm.replaceIndex = 0;

            vm.replaceIndexBoleto = 0;
            vm.commentBoleto = vm.commentBoleto.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceTextBoleto);
            vm.replaceIndexBoleto = 0;
        }
      }

      function autoRepalceText(match, start, changeValue, end, offset, string) {
        var resStr = "";
        if(vm.replaceIndex == 0){
          resStr = vm.customer.Name;
        }
        if(vm.replaceIndex == 1){
          vm.AdditionalComment = changeValue;
          resStr = changeValue;
        }
        if(vm.replaceIndex == 2){
          resStr = vm.vigenciaField.split(" ")[1] ? new Date(0,parseInt(vm.vigenciaField.split(" ")[1]),0).toLocaleDateString('pt-br', { month: 'long'}) : '';
        }
        if(vm.replaceIndex == 3){
          var dat = new Date(vm.expirationDateField);
          dat.setDate(dat.getDate());
          var expirationDt = dat.toLocaleDateString('pt-br', { day: '2-digit', month: 'long'});
          resStr = expirationDt.replace(' ',', ')
        }
        if(vm.replaceIndex == 4){
          resStr =  vm.amount;
        }
        vm.replaceIndex++;

        return start + resStr + end;
      }

      function autoRepalceTextBoleto(match, start, changeValue, end, offset, string) {
        var resStr = "";
        if(vm.replaceIndexBoleto == 0){
          resStr = vm.vigenciaField.split(" ")[1] ? new Date(0,parseInt(vm.vigenciaField.split(" ")[1]),0).toLocaleDateString('pt-br', { month: 'long'}) : '';
        }
        if(vm.replaceIndexBoleto == 1){
          var dat = new Date(vm.expirationDateField);
          dat.setDate(dat.getDate());
          var expirationDt = dat.toLocaleDateString('pt-br', { day: '2-digit', month: 'long'});
          resStr = expirationDt.replace(' ',', ')
        }
        if(vm.replaceIndexBoleto == 2){
          resStr =  vm.amount;
        }
        vm.replaceIndexBoleto++;

        return start + resStr + end;
      }

          function calculate() {
            var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
            var bonus = vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente.toString().indexOf('.') > -1 ? parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) : parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) / 100;
            vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
            if (vm.pagar) {
              vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
            }
            else {
              vm.amount = parseFloat(amount).toFixed(2);
            }

            if (isNaN(vm.amount)) {
              vm.amount = 0;
            }

            vm.amountTemp1 = vm.amount;
            changeTextValue();
          }

          function onTapConfirmarPagamento() {
            //alert(vm.Excepcional);
            //if (!vm.claro) {
            //  vm.Excepcional
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }

                if (parseInt(vm.amount) < 1) {
                  DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
                  return;
                }

                if (!vm.chargeStatus) {
                  vm.chargeStatusDiv = true;
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = false;
                }
                else {
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = true;
                  vm.chargeStatusDiv = false;
                }
            }

            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                vm.chargeStatusDiv = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;
                }
            }

            function SaveDefaults()
            {
              //debugger;
              var paymentInfo = {
                Id : vm.customer.Id,
                DefaultPaymentDay : vm.padroaValue,
                DefaultVerificar : vm.verificarValue,
                DefaultWAPhones : vm.customerPhones
              };
              FoneclubeService.saveDefaultPaymentInfo(paymentInfo).then(function (result) {
                    return false;
              });
            }

            function onTapPagar(isScheduled, isBothPPClick){
              //debugger;
              var process = true;
              if(isScheduled){
                  if(!isBothPPClick)
                  {
                      if(moment(new Date()).add(5, 'day') > moment(vm.expirationDateField))
                      {
                        ViewModelUtilsService.showConfirmDialog('Atenção!', 'A data é inferior a 5 dias no futuro, clique OK para criar e   enviar a cobrança agora ou "CANCELA" para trocar a data').then(function(confirm) {
			                    if (confirm) {
                            vm.etapaDados = false;
                            vm.etapaConfirmacao = true;
                            vm.chargeStatusDiv = false;
                            ProcessCharging(false, isBothPPClick);
                          }
                          else
                          {
                            return;
                          }
                        });
                      }
                  else
                    ProcessCharging(true, isBothPPClick);
                }
                else
                  ProcessCharging(true, isBothPPClick);
              }
              else{
                ProcessCharging(isScheduled, isBothPPClick);
              }
            }

            function ProcessCharging(isScheduled, isBothPPClick){
              SaveDefaults();
              console.log('tap pagar boleto')
              console.log(parseInt(vm.amount))
              var em = vm.amount.toString().split(".");
              console.log(em[0]);
              if (em[1] != undefined) {
                vm.amount = vm.amount.toString().replace(".", "")
              }

                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                // debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                // if(!vm.expirationDateField)
                // {
                //     vm.expirationDateField = 5;
                // }
                // else{
                //    if(vm.expirationDateField <= 0)
                //    {
                //     vm.expirationDateField = 5;
                //    }
                // }


                    if(isScheduled)
                    {
                      if(moment(new Date()).add(5, 'day') > moment(vm.expirationDateField))
                      {
                          vm.disableTapPay = false;
                          DialogFactory.showMessageDialog({mensagem:'a data é inferior a 5 dias no futuro, iremos criar e enviar esta cobrança agora'});
                          return;
                      }
                      vm.etapaDados = false;
                      vm.etapaConfirmacao = true;
                      vm.chargeStatusDiv = false;
                      var chargeDataArray = [];
                      var bothPPValue = 0;
                      
                      if(vm.bothPP == 0 || vm.bothPP == 1) 
                        bothPPValue = 0;
                      else
                        bothPPValue = isBothPPClick ? vm.bothPP : 0;

                      var completeCount = 1;
                      var strMessage = 'Favor confirmar agendamento abaixo: <br/>Numero total de cobranças: ' + (bothPPValue == 0 ? 1 : bothPPValue) +'<br/>'; 
                      for(var ibothcount = bothPPValue == 0 ? 0 : 1; ibothcount <= bothPPValue; ibothcount++)
                      {
                          var expiryDate = moment(vm.expirationDateField).add(ibothcount, 'month').format("DD MMMM YYYY");
                          var vigenciaYear = parseInt(vm.vigenciaField.split(" ")[0]);
                          var vigenciaMonth = parseInt(vm.vigenciaField.split(" ")[1]);
                          var vy = vigenciaMonth + ibothcount <= 12? vigenciaYear + " " + (vigenciaMonth + ibothcount): vigenciaYear + 1 + " " + ((vigenciaMonth + ibothcount) - 12);

                          strMessage += '<br/><label>' + (ibothcount == 0 ? 1: ibothcount) + '. Vencimento:<strong>' + moment(expiryDate).format("DD/MMM/YYYY")+'</strong></label>';
                          strMessage += '<label>Vigencia:<strong>' + vy.split(" ")[1] + '/' + vy.split(" ")[0]+'</strong></label>';
                          strMessage += '<label>Total:<strong>R$' + vm.amount/100 +'</strong></label>';

                         
                          var customerCharging = {
                            Id: vm.customer.Id,
                            Charging:{
                                Comment: vm.bothPP == 1 ? encodeURIComponent(vm.comment): encodeURIComponent(vm.defaultTemplateText),
                                CommentEmail: vm.bothPP == 1 ? encodeURIComponent(vm.customerComment) : encodeURIComponent(vm.defaultTemplateText),
                                CommentBoleto: vm.bothPP == 1 ? encodeURIComponent(vm.commentBoleto): encodeURIComponent(vm.defaultBoletoText),
                                Ammount: vm.amount,
                                CollectorName: MainUtils.getAgent(),
                                PaymentType: BOLETO,
                                AnoVingencia: vy.split(" ")[0],
                                MesVingencia: vy.split(" ")[1],
                                ChargeStatus: vm.chargeStatus,
                                ScheduledMonth:moment(expiryDate).format("MM"),
                                ScheduledYear:moment(expiryDate).format("YYYY"),
                                ScheduledDay:moment(expiryDate).format("DD"),
                                TxtWAPhones:vm.customerPhones,
                                ChargingComment: vm.AdditionalComment
                            }
                          }

                          console.log(customerCharging);
                          chargeDataArray.push(customerCharging); 
                      }
                      DialogFactory.dialogConfirm({ title: 'Atenção!', mensagem: strMessage, btn1: 'Yes', btn2: 'No, edit Charge' }).then(function(confirm) {
                        if(confirm==0){
                          for(var cc = 0 ; cc< chargeDataArray.length; cc++){
                            //posso colocar na lista de cobranças e ser o primeiro com vingencia
                            FoneclubeService.postSchedulePayment(customerCharging).then(function(result){
                            
                               if(completeCount == chargeDataArray.length)
                                {
                                    vm.message = 'Agendamento feito com sucesso';
                                    vm.showCopyButtons = false;
                                    vm.cobrancaRealizada = true;
                                    vm.disableTapPay = false;
                                }
                              completeCount++;        
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                            });
                          }
                        }
                        else{
                          vm.etapaDados = true;
                          vm.etapaConfirmacao = false;
                          vm.chargeStatusDiv = false;
                          vm.disableTapPay = false;
                        }
                        });
                  return;
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, UtilsService.formatDateYYYYmmDD(addExpirationDays(vm.expirationDateField))).then(function(resultCapture){

                      vm.boleto_url = resultCapture.boleto_url;
                      vm.boleto_code = resultCapture.boleto_barcode;

                        try{
                            var chargingLog = {
                                'customer': existentCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': resultCapture,
                                'boletoComment':vm.commentBoleto,
                                'customerComment':vm.customerComment,
                                'foneclubeComment' : vm.comment
                            };

                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro)
                        {
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                        // debugger;
                            if(vm.enviaEmail)
                            {
                                // debugger;
                                if(vm.customerComment == undefined)
                                    vm.customerComment = ''

                                //debugger;
                                var emailObject = {
                                    'Id': customerId,
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.customerComment,
                                    // 'CustomerComment':vm.customerComment,
                                    'TemplateType' : 2
                                }


                                // debugger;

                                if(vm.pagar && vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente != '0.00')
                                {
                                    emailObject.DiscountPrice = ($filter('currency')(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente / 100, "")).replace('.',',')
                                }


                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }

                            if(vm.enviaWhatsapp){
                               // debugger;
                              //Send message to whatsapp
                              if(vm.customerComment == undefined)
                                    vm.customerComment = ''

                                var messageObject = {
                                    'ClientId': vm.customer.Id, //existentCustomer.email
                                    'ClientName' : vm.customer.Name,
                                    'CurrentYear': vm.vigenciaField.split(" ")[0],
                                    'CurrentMonth' : vm.vigenciaField.split(" ")[1].trim(),
                                    'CurrentDate' : parseInt(moment(vm.expirationDateField).format("DD")),
                                    'AmountTemp':vm.amountTemp,
                                    'ValorTotalLiberadoParaPagarCliente':vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente,
                                    'AmountTemp1':vm.amountTemp1,
                                    'CustomerComment':vm.customerComment,
                                    'CommentBoleto':vm.commentBoleto,
                                    'Comment':vm.comment
                                }
                                FoneclubeService.postSendChargeMessage(messageObject).then(function(result){
                                    console.log('Whatsapp Message sent');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('Whats app message could not sent. See error log bellow:');
                                    console.log(error);
                                });
                            }


                            try{
                              vm.TransactionId = resultCapture.tid;
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;
                                    }
                                    console.log(error);

                                });

                            }
                            catch(erro){

                            }


                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id, resultCapture.boleto_expiration_date, resultCapture.boleto_url, resultCapture.boleto_barcode);

                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });

            }

            function saveHistoryPayment(idBoleto, acquirer_id, boleto_expiration_date, boleto_url, boleto_barcode){

                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:encodeURIComponent(vm.comment),
                        CommentEmail:encodeURIComponent(vm.customerComment),
                        CommentBoleto:encodeURIComponent(vm.commentBoleto),
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia: vm.vigenciaField.split(" ")[0],
                        MesVingencia: vm.vigenciaField.split(" ")[1],
                        ChargeStatus: vm.chargeStatus,
                        TransactionId: vm.TransactionId,
                        ComissionConceded: vm.pagar, // need to see the property nameComissionConceded
                        ExpireDate:boleto_expiration_date,
                        DueDate: moment(vm.expirationDateField).add(1, "days").toDate(),
                        TxtWAPhones:vm.customerPhones,
                        ChargingComment: vm.AdditionalComment,
                        BoletoUrl : boleto_url,
                        BoletoBarcode: boleto_barcode
                    }
                }

                FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {

                   FoneclubeService.getLastPersonCharging(customer.Id).then(function (res) {
                              // debugger
                   vm.customerChargingPaymentInfo = res;
                   vm.cobrancaRealizada = true;
                   vm.disableTapPay = false;

                  //  if(vm.enviaWhatsapp){
                  //       var dataMessage = {
                  //         ClientIds: vm.customerPhones,
                  //         Message: CopyBoletoMsgCopy(),
                  //         Buttons: ["Ok Recebi", "Problema"]
                  //       };
                      
                  //       FoneclubeService.postSendWhatsappMessageWithButton(dataMessage).then(function(result){
                  //           DialogFactory.showMessageDialog({mensagem:'Mensagem enviada ao usuário via WhatsApp'});
                  //       });
                  //   }
                            
                    if(vm.pagar)
                    {
                        FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
                          if(!result)
                            alert('Não foi possível dar baixa em comissão');


                            // FoneclubeService.dispatchedBonus(vm.customer.Id).then(function (result) {

                            //   debugger
                            //   if(!result)
                            //     alert('Não foi possível dar baixa em comissão');

                            // })
                            // .catch(function (error) {
                            //   alert('Não foi possível dar baixa em comissão');
                            // })

                        })
                        .catch(function (error) {
                          alert('Não foi possível dar baixa em comissão');
                        })
                    }
                  })

                    })
                    .catch(function(error){
                        // debugger
                        alert('Aviso em verificação secundária, printar tela -  '
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + '  bc372'
                        )
                        console.log('catch error');
                        console.log(error);
                    });


                }
                function getContactPhone(customer){

                    try{
                        return {
                            'ddd' : customer.Phones[0].DDD.toString(),
                            'number' : customer.Phones[0].Number.toString()
                        }
                    }
                    catch(e){
                        return {
                            'ddd' : '21',
                            'number' : '997865645'
                        }
                    }


                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    // debugger
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }

            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }

            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            function addExpirationDays(days) {
              var dat = new Date(days);
              if(vm.addVencimentoDays)
                dat.setDate(dat.getDate());
              return dat.toISOString();
              }

              function incrementPadroa(){
                vm.padroaValue++;
                refreshVencimento(true);
                changeTextValue();
              }
  
              function decrementPadroa(){
                vm.padroaValue--;
                refreshVencimento(true);
                changeTextValue();
              }
  
              function refreshVencimento(blnVal){ 
                var foDate = '';
                var currentDate = new Date();
                var selectedDt = new Date(new Date().getFullYear().toString(), vm.vigenciaField.split(" ")[1] - 1, vm.padroaValue);
                if(!blnVal){
                  selectedDt = new Date(vm.expirationDateField);
                }
                if(currentDate >= selectedDt){
                  foDate = UtilsService.formatDate(UtilsService.addDays(1));
                }
                else{
                  var datediff = UtilsService.diffBtDays(currentDate, selectedDt);
                  foDate = UtilsService.formatDate(UtilsService.addDays(datediff));
                }
                console.log("foDate: " + foDate);
                upDateCalendar(foDate);
            }

            function upDateCalendar(date){
              vm.expirationDateField = moment(date).format("DD MMMM YYYY");
            }

          
            function CopyBoletoMsgCopy() {
              var infoPay = vm.customerChargingPaymentInfo;
              var addComment = infoPay.txtChargingComment !=undefined && infoPay.txtChargingComment!=null?"*"+infoPay.txtChargingComment+"*":"";
              var chargesummaryurl = window.location.origin+"/#/resumocobranca/"+vm.customer.Id+"/"+infoPay.intId;
              return `🤖 FoneClube: *FoneBot*
              
*Prezado Cliente FoneClube*,
              
Segue resumo da sua última cobrança que que esta sendo enviada por email e whatsapp.
${addComment}

*Vencimento:${moment(infoPay.dteDueDate).format("DD/MM")}*
*Vigencia:${moment(infoPay.dteValidity).format("MM") + "/" + moment(infoPay.dteValidity).format("YYYY")}*
*Total:R$${infoPay.txtAmmountPayment / 100}*
              
*Detalhes para pagamento no link abaixo.*
              
${chargesummaryurl}
              
Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}* 

ou email para 
*financeiro@foneclube.com.br*.
              
Obrigado pela Atenção:
*FoneClube*  👍`;
        
            }

            function CopyBoletoMsg(){
              var text_to_share = CopyBoletoMsgCopy();
              ClipBoardCopy(text_to_share);
        
            }
        
            function copyForWhatsapp(){
              ClipBoardCopy(vm.customerComment.replace(/\|/g, ''));
            }

            function copyForTelegram(){
              ClipBoardCopy(vm.customerComment.replace(/\|/g, '').replace(/\*/g, '**'));
            }

            function ClipBoardCopy(text_to_share) {
              // create temp element
              var copyElement = document.createElement("pre");
              copyElement.appendChild(document.createTextNode(text_to_share));
              copyElement.id = 'tempCopyToClipboard';
              angular.element(document.body.append(copyElement));
        
              // select the text
              var range = document.createRange();
              range.selectNode(copyElement);
              window.getSelection().removeAllRanges();
              window.getSelection().addRange(range);
        
              // copy & cleanup
              document.execCommand('copy');
              window.getSelection().removeAllRanges();
              copyElement.remove();
            }
            
            function generateAndPasteDefaults(){
              vm.customerComment = vm.defaultTemplateText;
              changeTextValue();
              ClipBoardCopy(vm.customerComment);
            }

            function incrementBothPP(){
              vm.bothPP++;
            }

            function decrementBothPP(){
              vm.bothPP--;
            }

            function validatePhone(){
              var checkPhoneNums = vm.customerPhones.replace(/[^0-9\.,]/g, "");
              FoneclubeService.validatePhoneForWA(checkPhoneNums).then(function(result){
                if(result){
                  var validNumbers = result.split('|')[0];
                  var invalidNumbers = result.split('|')[1];
                  vm.customerPhones = validNumbers;
                  if(invalidNumbers)
                    vm.customersInvalidPhones = "Invlaid numbers : "+ invalidNumbers;
                  else
                    vm.customersInvalidPhones ="Ok";
                }
              });
            }
        }
    })();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('DebitoModalController', DebitoModalController);
    
        DebitoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
        function DebitoModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


            console.log('--- DebitoModalController ---');
            var vm = this;
            vm.date = new Date();
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.chargeDisabled = true;
            vm.cobrancaRealizada = false;
            vm.amount 
            try{
              vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            }
            catch(e){}
            vm.comment = '';
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.checkOne = checkOne;
            vm.enviaEmail = true;
            vm.enviaWhatsapp = true;
            vm.calculate = calculate;
            vm.years = [2021, 2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
            vm.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

            vm.amount = 0;
            vm.amountTemp = 0;
            vm.amountTemp1 = 0;
            vm.bonus = 0;
            vm.totaisComissoes = {};
            vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente = 0;
            vm.expirationDateField = 3;
            vm.year = new Date().getFullYear().toString();
            vm.month = (new Date().getMonth() + 1).toString();
            vm.hasDebitoCard = true;
            
            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
            }

            vm.Padrão = false;
            vm.Excepcional = false;

            var CARTAO = 1;
            var BOLETO = 2;
            var DEBITO = 3;

            init();
            calculate();

          function init() {
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
              vm.histories = result;
              for (var i in vm.histories) {
                var history = vm.histories[i];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
                if (i == 0) {
                  vm.commentBoleto
                  vm.comment = history.Comment;
                  vm.amount = history.Ammount / 100;

                  vm.amountTemp = vm.amount.toFixed(2);
                  vm.amountTemp1 = vm.amount.toFixed(2);
                }
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
                }
              }
              customer.histories = vm.histories;
            })
            .catch(function (error) {

            });

            FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
              console.log('FoneclubeService.getTotaisComissoes')
              console.log(result)
              vm.totaisComissoes = result;

            })
            

            FoneclubeService.getCommision(customer.Id).then(function (result) {
              vm.bonus = parseFloat(result.Ammount / 100).toFixed(2);
              calculate();
            })
              .catch(function (error) {

              });


              FoneclubeService.getStatusCardDebito(customer.Id).then(function (result) {
                console.log('cartao debito')
                console.log(result)
                vm.hasDebitoCard = result;
              })
              .catch(function (error) {

              });
          }

          function checkOne(val) {
            //alert('xx');
            vm.chargeDisabled = false;
            if (val == '1') {
              vm.chargeStatusfirst = true;
              vm.chargeStatusSecond = false;
              vm.chargeStatus = 1;
            }
            if (val == '2') {
              vm.chargeStatusSecond = true;
              vm.chargeStatusfirst = false;
              vm.chargeStatus = 2;
            }
          }



          function calculate() {
            var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
            var bonus = vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente.toString().indexOf('.') > -1 ? parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) : parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) / 100;
            vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
            if (vm.pagar) {
              vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
            }
            else {
              vm.amount = parseFloat(amount).toFixed(2);
            }

            if (isNaN(vm.amount)) {
              vm.amount = 0;
            }

            vm.amountTemp1 = vm.amount;
          }

          function onTapConfirmarPagamento() {
            debugger
            if(!vm.hasDebitoCard && !vm.newDebitCard)
            {
              alert('cliente sem cartão de débito')
              return;
            }

            var card = getCardData();

            if(!card && vm.newDebitCard){
              alert('pendente dados de cartão de débito')
               return;
            }

            if(vm.newDebitCard)
            {
              if((card.HolderName == '' || card.HolderName == undefined) ||
              (card.ExpirationMonth == '' || card.ExpirationMonth == undefined) ||
              (card.ExpirationYear == '' || card.ExpirationYear == undefined) ||
              (card.Number == '' || card.Number == undefined) ||
              (card.Cvv == '' || card.Cvv == undefined)){
               alert('pendente dados de cartão de débito')
               return;
              }
            }
            

            // HolderName: vm.cardHolderName.toUpperCase(),
            // ExpirationMonth: vm.cardExpirationMonth,
            // ExpirationYear: vm.cardExpirationYear,
            // Number: vm.cardNumber,
            // Cvv:vm.cardCVV

            //alert(vm.Excepcional);
            //if (!vm.claro) {
            //  vm.Excepcional
                // if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                //     return;
                // }

                if (parseInt(vm.amount) < 1) {
                  DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
                  return;
                }

                if (!vm.chargeStatus) {
                  vm.chargeStatusDiv = true;
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = false;
                }
                else {
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = true;
                  vm.chargeStatusDiv = false;
                }
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                vm.chargeStatusDiv = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    
              console.log('tap pagar Debito');
              console.log(parseInt(vm.amount));

              var em = vm.amount.toString().split(".");
              if (em[1] != undefined) 
                vm.amount = vm.amount.toString().replace(".", "")
    
              vm.disableTapPay = true;
              vm.message = 'Iniciando transação';
              vm.instructions = 'FoneClub - 2017'

              if(!vm.expirationDateField)
                  vm.expirationDateField = 5; 
              else{
                  if(vm.expirationDateField <= 0)
                  vm.expirationDateField = 5; 
              }


              debugger;
              var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    CommentEmail:vm.customerComment,
                    CommentBoleto:vm.commentBoleto,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: DEBITO,
                    // BoletoId: idBoleto,
                    // AcquireId: acquirer_id,
                    AnoVingencia:vm.year,
                    MesVingencia: vm.month,
                  ChargeStatus: vm.chargeStatus,
                  TransactionId: vm.TransactionId,
                  ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                },
                Card:getCardData()
            }

            debugger;
            FoneclubeService.postDebitoTransaction(customerCharging).then(function(result){
                console.log(result);
                debugger;
                if(result.Charged)
                {
                  vm.message = 'Cobrança por débito gerada'
                  vm.cobrancaRealizada = true;
                  vm.disableTapPay = false;
                }
                else{
                  vm.message = 'Cobrança com falha'
                  vm.cobrancaRealizada = false;
                  vm.disableTapPay = false;
                }

            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                var teste1 = emailObject;
                var teste2 = existentCustomer;
                var teste3 = vm.amount;
                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
            });
                    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
              
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        CommentEmail:vm.customerComment,
                        CommentBoleto:vm.commentBoleto,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                      ChargeStatus: vm.chargeStatus,
                      TransactionId: vm.TransactionId,
                      ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {

                    if(vm.pagar)
                    {
                        FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {

                          if(!result)
                            alert('Não foi possível dar baixa em comissão');
                            

                        })
                        .catch(function (error) {
                          alert('Não foi possível dar baixa em comissão');
                        })
                    }
                   
                     
                    })
                    .catch(function(error){
                        // debugger
                        alert('Aviso em verificação secundária, printar tela -  ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + '  bc372'
                        )
                        console.log('catch error');
                        console.log(error);
                    });
        
        
                }
                function getContactPhone(customer){

                    try{
                        return {
                            'ddd' : customer.Phones[0].DDD.toString(),
                            'number' : customer.Phones[0].Number.toString()
                        }
                    }
                    catch(e){
                        return {
                            'ddd' : '21',
                            'number' : '997865645'
                        }
                    }
                    

                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    // debugger
                    // DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    // return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    // DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    // return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            
            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
            }

            function getCardData(){  
              try{
                return {
                  HolderName: vm.cardHolderName.toUpperCase(),
                  ExpirationMonth: vm.cardExpirationMonth,
                  ExpirationYear: vm.cardExpirationYear,
                  Number: vm.cardNumber,
                  Cvv:vm.cardCVV,
                  Flag:vm.cardFlag
              }
              }
              catch(e){
                return false;
              }
          }
    
        }
    })();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EdicaoController', EdicaoController)
    .directive('ngPrism', function () {
      return {
        restrict: 'A',
        link: function (scope, element, attrs) {
          element.ready(function () {
            Prism.highlightElement(element[0]);
          });
        }
      };
    });


  EdicaoController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope', 'localStorageService', '$templateCache'];
  function EdicaoController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope,localStorageService, $templateCache) {

    var checkvalidate = localStorageService.get("userid");
    if (checkvalidate == null) {
      FlowManagerService.changeLoginView();
    }
    var vm = this;
    vm.showLoader = false;
    vm.data = DataFactory;
    vm.onTapSendUser = onTapSendUser;
    vm.onTapCancel = onTapCancel;
    vm.onTapSendUserAllCheck = onTapSendUserAllCheck;
    vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
    vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
    vm.validarCEP = validarCEP;
    vm.validarCPF = validarCPF;
    vm.validatePhoneNumber = validatePhoneNumber;
    vm.changeCustomerAtivity = changeCustomerAtivity;
    vm.showAddNewPhone = showAddNewPhone;
    vm.saveUserSettings = saveUserSettings;
    vm.goBack = goBack;
    vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
    var index = $stateParams.data ? $stateParams.data.index : '';
    vm.calledView = $stateParams.data.view;
    vm.singlePriceLocal = 0;
    vm.singlePrice = 0;
    vm.allOperatorOptions = MainUtils.operatorOptions();
    vm.requesting = true;
    vm.onCheckCNPJ = onCheckCNPJ
    vm.CNPJField = false;
    vm.CPFField = true;
    vm.opemEmailpopup = opemEmailpopup;
    vm.onTapAtualizaPai = onTapAtualizaPai;
    vm.changeExtraService = changeExtraService;
    vm.changeSelectedService = changeSelectedService;
    vm.onClickFlag = onClickFlag;
    vm.onedit = onedit;
    vm.openChargeSummary = openChargeSummary;

    vm.search = "";
    vm.showall = false;
    vm.linhaAtiva = false;
    vm.iccid = false;
    vm.noPortar = false;
    vm.claro = true;
    vm.vivo = true;
    vm.history = [];
    vm.sp = 1;

    function changeExtraService(index, serviceId, phoneNumber, service){
      
      if(serviceId != null)
      {
        for(var i in phoneNumber.Servicos){
          if(phoneNumber.Servicos[i].Id == serviceId){
            DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser adicionado pois já faz parte da linha' });
            service.Id = 1;
            return;
          }
        }

        if(phoneNumber.Servicos.length > 0){
          DialogFactory.showMessageDialog({ mensagem: 'Linha já tem serviço' });
          return;
        }

        var selectedService;
        for(var i in vm.extraServices)
        {
          if(vm.extraServices[i].Id == serviceId){
            selectedService = vm.extraServices[i];
          }
        }

        DialogFactory.dialogConfirm({ title: 'Adicionar serviço', mensagem: 'Tem certeza que deseja adicionar o serviço '+ selectedService.Descricao +' ?:', btn1: 'não', btn2: 'sim' })
        .then(function (result) {
          
          if (result == 1) {
            console.log('clicou em sim')
            //todo validar falta de id de phone ou de serivço
            var servico = {
              Id:phoneNumber.Id,
              Servicos:[{
                Id: serviceId
              }]
            }
            FoneclubeService.postIsertServiceActive(servico).then(function (result) {
              if(result)
              {
                DialogFactory.showMessageDialog({ mensagem: 'Serviço adicionado' });
                for(var i in vm.customer.Phones){
          
                  var currentPhone = vm.customer.Phones[i];
        
                  if(currentPhone.Id == phoneNumber.Id){
                      vm.customer.Phones[i].Price += selectedService.AmountFoneclube;
                      vm.pricelist[i] = 'R$'+ (vm.customer.Phones[i].Price / 100).toFixed(2);
                  }
                }

                service.Id = 1;
                phoneNumber.Servicos.push(selectedService)
              }
              else{
                DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser adicionado' });
                service.Id = 1;
              }
            })
          } else {
            console.log('clicou em não')
            service.Id = 1;
          }
        })
      }

    }

    var changingSelectedService = false;
    function changeSelectedService(index,serviceId, phoneNumber, fromUser, service){
      if(serviceId != null)
      {
        if(!changingSelectedService)
        {
          changingSelectedService = true;
          var currentService;
          for(var i in vm.extraServices)
          {
            if(vm.extraServices[i].Id == serviceId){
              currentService = vm.extraServices[i];
            }
          }


          DialogFactory.dialogConfirm({ title: 'Remover serviço', mensagem: 'Tem certeza que deseja remover o serviço '+ currentService.Descricao +' ?:', btn1: 'não', btn2: 'sim' })
          .then(function (result) {
            if (result == 1) {
              console.log('clicou em sim')
              //todo validar falta de id de phone ou de serivço
              var servico = {
                Id:phoneNumber.Id,
                Servicos:[{
                  Id: serviceId
                }]
              }

              FoneclubeService.postIsertServiceDeactive(servico).then(function (result) {
                if(result)
                {
                  for(var i in phoneNumber.Servicos){
                    if(phoneNumber.Servicos[i].Id == serviceId){
                      phoneNumber.Servicos.splice(i,1)
                    }
                  }
                  DialogFactory.showMessageDialog({ mensagem: 'Serviço removido' });

                  for(var i in vm.customer.Phones){
          
                    var currentPhone = vm.customer.Phones[i];
          
                    if(currentPhone.Id == phoneNumber.Id){
                        vm.customer.Phones[i].Price -= currentService.AmountFoneclube;
                        vm.pricelist[i] = 'R$'+ (vm.customer.Phones[i].Price / 100).toFixed(2);
                    }
                  }

                  service.Id = 1;
                  $timeout(function () {
                    changingSelectedService = false;
                  }, 1000)
                  
                }
                else{
                  service.Id = 1;
                  DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser removido' });
                  changingSelectedService = false;
                }
              })
              
            } else {
              console.log('clicou em não');
              service.Id = 1;
              changingSelectedService = false;
            }
          })
        }
      }
    }

    function opemEmailpopup(emailstatus, phone, email, operator) {
      if (emailstatus != "") {
        ViewModelUtilsService.showModalEmailDetail(emailstatus, phone, email, operator, vm.customer);
      }
    }

    function onTapAtualizaPai(selectedPai){
      
      if(selectedPai == undefined)
      {
        alert('Sem nenhum pai selecionado.');
        return;
      }

      if(vm.customer.Id == selectedPai.Id){
        alert('Cliente não pode ser pai dele mesmo.');
        return;
      }
     
      var customObj = {
        Id:vm.customer.Id,
        Pai:{
          Id:selectedPai.Id,
          Name:selectedPai.Name
        }
      }

      

      FoneclubeService.postCustomerUpdateParent(customObj).then(function (result) {
        if(result){
          alert('Pai alterado com sucesso')

          vm.nomePai = selectedPai.Name;
          vm.telefonePai = '';

          FoneclubeService.getCustomerById(selectedPai.Id).then(function (result) {
            
            vm.nomePai = selectedPai.Name;

            for(var i in result.Phones){
              if(result.Phones[i].IsFoneclube != true){
                vm.telefonePai = result.Phones[i].DDD + result.Phones[i].Number;
              }
            }

          })
          
        }
        else{
          alert('Não foi possível alterar o Pai nesse cliente')
        }
      })
      //postCustomerUpdateParent

      //faz o post
      //vc não pode selecionar um pai como o próprio cliente
      //no sucesso atualiza
      //vm.telefonePai = "2187554657"
      //vm.nomePai = "Nome do pai"
    }

    function onCheckCNPJ() {
      console.log("andando " + vm.checkboxCNPJ)

      if (vm.checkboxCNPJ) {
        onShowCNPJField();
      }
      else {
        onShowCPFField();
      }

    }

    function onShowCPFField() {
      vm.CNPJField = false;
      vm.CPFField = true;
    }

    function onShowCNPJField() {
      vm.CNPJField = true;
      vm.CPFField = false;
    }

    init();


    function init() {
      FoneclubeService.getServices().then(function (result) {
        vm.extraServices = result;
      })

      $templateCache.removeAll();

      if (!vm.cpf) {
        FlowManagerService.changeCustomersView();
        return;
      }
      var showDialog = DialogFactory.showLoader('Carregando dados...');

      var documentnum = UtilsService.clearDocumentNumber(vm.cpf);

      FoneclubeService.getActiveCustomers().then(function (result) {
        vm.testeResult = result;
        
      })

      



      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
        
        vm.DocumentNumberFreeze = angular.copy(result.DocumentNumber);
        vm.customer = result;
        vm.autoSum = vm.customer.IsPrecoPromoSum;
        vm.autoSumNormal = vm.customer.IsPrecoFCSum;
        vm.linhaAtiva = vm.customer.IsLinhaAtiva;
        vm.noPortar = vm.customer.IsShowPort;
        vm.iccid = vm.customer.IsShowICCID;
        
        vm.customer.linkIndicacao = "https://foneclube.com.br/convite/" + btoa(vm.customer.Id)
        
        vm.linkRoot = "https://foneclube.com.br/convite/" + btoa(vm.customer.Id)

        console.log('vm.linkRoot')
        console.log(vm.linkRoot)

        if(vm.customer.DocumentNumber.length > 11)
          onShowCNPJField()

        vm.customerAtivo = !vm.customer.Desativo;
        
        if(vm.customer.Pai != null)
        {
          vm.telefonePai = vm.customer.Pai.ContatoPai;
          vm.nomePai = vm.customer.Pai.Name;
        }
        


        if(result.Id == 4158)
        {
          vm.hideColunaLinhaAtiva = true;
          vm.hideColunaPrecoVip = true;
          vm.hideColunaPrecoFC = true;
          vm.hideColunaPerfil = true;
          vm.hideColunaApelido = true;
        }
          
        //desusar
        getPersonParent(vm.customer.IdParent);

        vm.singlePriceLocal = result.SinglePrice > 0  ? 'R$'+ (vm.customer.SinglePrice / 100).toFixed(2) : 0; //single place formatado;
        vm.singlePrice = 'R$0';
        if (vm.customer.Adresses) {
          for (var i = 0; i < vm.customer.Adresses.length; i++) {
            vm.customer.Adresses[i].StreetNumber = parseInt(vm.customer.Adresses[i].StreetNumber); //deve ser int por causa da mascara
          }
        }

        FoneclubeService.getStatusTelefonesOperadora().then(function (result) {
          
          for(var i in vm.customer.Phones)
          {
            var telefone = vm.customer.Phones[i].DDD + vm.customer.Phones[i].Number;
            vm.customer.Phones[i].usoLinha = -1;
            vm.customer.Phones[i].divergente = -1;
            for(var r in result){
              if(telefone == result[r].phone){
                
                var operadora; 
                if(result[r].operadora == 1)
                {
                  operadora = 'CLARO'
                } 
                else if(result[r].operadora == 2)
                {
                  operadora = 'VIVO'
                }
                  

                vm.customer.Phones[i].plano = operadora + " " + result[r].plano;
                vm.customer.Phones[i].usoLinha = result[r].usoLinha ? 1 : 0;
                if(parseInt(vm.customer.Phones[i].IdOperator) == result[r].operadora)
                {
                  vm.customer.Phones[i].divergente = 0
                }
                else if(parseInt(vm.customer.Phones[i].IdOperator) != result[r].operadora)
                {
                  vm.customer.Phones[i].divergente = 1
                }
              }
            }
          }

          // vm.concluiuVerificacaoStatus = 'S';

          vm.tempPhones = angular.copy(vm.customer.Phones);
          for (var number in vm.customer.Phones) {
            // FoneclubeService.getPhoneServices(vm.customer.Phones[number].Id, index).then(function (result) {
            //   vm.customer.Phones[result.index].Servicos = result.Servicos;
            // })
            var contactPhone = !vm.customer.Phones[number].IsFoneclube;

            if(contactPhone){
              vm.actual_phone = vm.customer.Phones[number].DDD + vm.customer.Phones[number].Number;
            }

          }

          });

          FoneclubeService.getPlans().then(function (result) {


            FoneclubeService.getCustomerWithPhoneStatus(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
              
              // se der divergencia fazer foreach
              // vm.tempPhones = angular.copy(result.Phones);
              
            })


            vm.plans = result;
            
            var listaPlanosUsados = [];

            for (var number in vm.customer.Phones) {
              vm.customer.Phones[number].key = Math.random();

              vm.customer.Phones[number].StatusOperator = { 'background-color': 'grey' }
              vm.customer.Phones[number].StatusDescription = 'C'

              if (vm.customer.Phones[number].Portability) {
                vm.customer.Phones[number].Portability = 'true';
              } 
              else {
                vm.customer.Phones[number].Portability = 'false';
              }

              vm.customer.Phones[number].NovoFormatoNumero = getNumberString(vm.customer.Phones[number]); //popula o novo campo vm.<telefone>

              for (var plan in vm.plans) {

                listaPlanosUsados.push(vm.customer.Phones[number].IdPlanOption);

                if (vm.plans[plan].Id == vm.customer.Phones[number].IdPlanOption) {
                  if (vm.plans[plan].Description.endsWith('VIVO')) {
                    vm.customer.Phones[number].operadora = '1'; //seta a operadora local
                  } 
                  else {
                    vm.customer.Phones[number].operadora = '2'; //seta a operadora local

                    // FoneclubeService.getStatusLinhaClaro(vm.customer.Phones[number].DDD, vm.customer.Phones[number].Number, number).then(function (result) {
                      
                    //   console.log('-- retorno ' + vm.customer.Phones[result.index].DDD + ' ' + vm.customer.Phones[result.index].Number)
                    //   console.log(result)

                      
                    //   vm.tempPhones = angular.copy(vm.customer.Phones);
                      

                    // });
                    vm.tempPhones = angular.copy(vm.customer.Phones);

                  }
                }

              }

            }

            listaPlanosUsados = listaPlanosUsados.filter(vm.onlyUnique)
            for (var i in listaPlanosUsados) {
              var teste = listaPlanosUsados[i];
            }

            console.info(vm.customer);

            populaPai(vm.customer)
            showDialog.close();
            // Fix caso não exista numero de telefone -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
            var dontHaveContact = vm.customer.Phones.filter(function (element, index, array) {
              return element.IsFoneclube == null || element.IsFoneclube == false;
            });
            if (dontHaveContact.length == 0) {
              vm.actual_phone = '(11) 11111-1111'
            }

            // Fix caso não exista endereço -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
            if (vm.customer.Adresses.length == 0) {
              vm.customer.Adresses.push({
                Cep: '',
                Street: '',
                StreetNumber: '',
                Complement: '',
                Neighborhood: '',
                City: '',
                State: ''
              });
            }

            $timeout(function () {
              vm.requesting = false;
            }, 2000)

            $timeout(function () {
              document.getElementById('cpf').focus();
            }, 200);

            vm.pricelist = [];
            for (var i = 0; i < vm.customer.Phones.length; i++) {

              var phoneNumber = vm.customer.Phones[i];
              var totalServicos = 0;

              if(phoneNumber.Servicos.length > 0 ){
                for(var o in phoneNumber.Servicos){
                  totalServicos += phoneNumber.Servicos[o].AmountFoneclube;
                }
              }
              

              if (phoneNumber.IdPlanOption == '') {
                vm.pricelist.push(0);
                // customer.Phones[i].PriceFoneclube = 0;
              } 
              else {
                var valorPlano = 0;
                try{
                  valorPlano = vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value;
                }
                catch(e){}
                
                vm.pricelist.push(valorPlano + totalServicos);
                vm.customer.Phones[i]['Price'] = valorPlano + totalServicos;
                // customer.Phones[i].PriceFoneclube = valorPlano + totalServicos;
              }

            }
              
            for (var i = 0; i < vm.customer.Phones.length; i++) {
                var phoneNumber = vm.customer.Phones[i];
                if(phoneNumber.IdPlanOption == 0){
                  vm.actual_phone = phoneNumber.NovoFormatoNumero;
                  vm.actual_id = i;
                  break
                }

            }
            if(!vm.actual_phone){
                for (var i = 0; i < vm.customer.Phones.length; i++) {
                    var phoneNumber = vm.customer.Phones[i];
                    if(phoneNumber.LinhaAtiva == false){
                        vm.actual_phone = phoneNumber.NovoFormatoNumero;
                        vm.actual_id = i;
                        break
                    }
                }
            }

            vm.tempPhones = angular.copy(vm.customer.Phones);

            vm.sp = 1;
            
            if(vm.autoSumNormal)
              autmaticSumNormal();
            if(vm.autoSum)
              autmaticSum();

            // // 
            addHistory();
          });

        

      });
    };


    vm.loading = false;
    vm.autoCompleteOptions = {
      minimumChars: 1,
      //selectedTextAttr: 'PhoneParent',
      data: function (searchTerm) {
        return FoneclubeService.getAllParents()
          .then(function (response) {
            vm.loading = true;
            console.log(response);
            // ideally filtering should be done on server
            searchTerm = searchTerm.toUpperCase();


            return _.filter(response, function (info) {
              if (info.NameParent != null)
                //return info.NameParent.startsWith(searchTerm);
                return removeAccents(info.NameParent.toString().toLowerCase()).indexOf(removeAccents(searchTerm.toLowerCase())) > -1;
            });

          }).catch(function (error) {
            console.log('error: ' + error);
          });
      },
      renderItem: function (item) {
        return {
          value: item.NameParent,
          label: $sce.trustAsHtml(
            "<p class='auto-complete' style='margin-bottom:0px;'>"
            + item.NameParent +
            "</p>")
        };
      },
      itemSelected: function (e) {
    
        var contactNo = "(" + e.item.DDDParent + ") " + e.item.PhoneParent.toString().substring(0, 5) + "-" + e.item.PhoneParent.toString().substring(5, 9);
        vm.contactParent = contactNo;
      }
    }

    vm.getParentDataByPhone = getParentDataByPhone;

    function getParentDataByPhone(phoneparent, personid) {
  
      if (phoneparent && personid) {
        phoneparent = phoneparent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
        FoneclubeService.getCustomerParentByPhone(phoneparent, personid).then(function (result) {
          console.log(result);
          vm.customer.NameContactParent = result.NameParent;
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    };



    function populaPai(customer) {

      vm.customer.NameContactParent = customer.NameParent;

      if (customer.PhoneDDDParent != null && customer.PhoneNumberParent != null)
        vm.contactParent = customer.PhoneDDDParent + customer.PhoneNumberParent;

    }

    function getPersonParent(id) {
      if (id) {
        FoneclubeService.getCustomerById(id).then(function (result) {

          vm.customerPai = result;
          console.log('parent - ')
          console.log(result)

          if (result.Phones.length > 0) {
            vm.contactParent = result.Phones[0].DDD.concat(result.Phones[0].Number);
          }
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    }

    function getFormatedDate(param) {
      var date = new Date(param);
      var day = date.getDate();
      var month = date.getMonth() + 1;
      var year = date.getFullYear();
      if (day < 10) { day = "0" + day; }
      if (month < 10) { month = "0" + month; }
      return day + '/' + month + '/' + year;
    }

    function onTapSendUser(customer) {
       

      if (vm.requesting == true)
        return;

      vm.requesting = true;

      var dontHaveContact = vm.tempPhones.filter(function (element, index, array) {
        return element.IsFoneclube == null || element.IsFoneclube == false;
      });

      if(dontHaveContact.length == 0)
      {
        var contactPhone = {
          "DDD":UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).DDD,
          "Number":UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).Number,
          "IsFoneclube": false
        }

        vm.tempPhones.push(contactPhone);
      }

      // update phones of input
      for (var i in vm.tempPhones) {
        vm.tempPhones[i].DDD = UtilsService.getPhoneNumberFromStringToJson(vm.tempPhones[i].NovoFormatoNumero).DDD;
        vm.tempPhones[i].Number = UtilsService.getPhoneNumberFromStringToJson(vm.tempPhones[i].NovoFormatoNumero).Number;


        if(vm.tempPhones[i].IsFoneclube != true)
        {
          vm.tempPhones[i].IsFoneclube = false;
          vm.tempPhones[i].DDD = UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).DDD;
          vm.tempPhones[i].Number = UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).Number;
        }
        
      }
      
      var customerSend = {
        "Id": customer.Id,
        "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
        "Register": customer.Register,
        "Name": customer.Name,
        "NickName": customer.NickName,
        "Email": customer.Email,
        "Born": customer.Born,
        "Gender": customer.Gender,
        "IdPlanOption": customer.IdPlanOption,
        "IdPagarme": customer.IdPagarme,
        "IdRole": customer.IdRole,
        "Adresses": customer.Adresses,
        "Phones": vm.tempPhones,
        "Photos": customer.Photos,
        "IdParent": customer.IdParent,
        "NameContactParent": customer.NameContactParent,
        "IdCommissionLevel": customer.IdCommissionLevel,
        "SinglePrice": vm.singlePriceLocal,
        "DescriptionSinglePrice": customer.DescriptionSinglePrice
      }

      try{
        customerSend.SinglePrice = customerSend.SinglePrice.replace('R','').replace('$','').replace('.','').replace(',','');
      }
      catch(erro){}

      var newFoneclubeDocument = false;
      FoneclubeService.getStatusDocument(customerSend.DocumentNumber).then(function (result) {
        newFoneclubeDocument = result;

      var totalPriceValidade = 0;
      for (var i in vm.customer.Phones) {
        vm.plans.find(function (element, index, array) {
          if (element.Id == vm.customer.Phones[i].IdPlanOption) {
            totalPriceValidade = totalPriceValidade + element.Value / 100;
          }
        });
      }

      // if (vm.singlePriceLocal) {
      //   if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
      //     DialogFactory.showMessageDialog({ mensagem: 'Preço único aplicado é maior do que o preço de todos os planos somados.' });
      //     // vm.requesting = false;
      //     // return;
      //   }
      // }

      var digitosMinimosTelefone = 11
      
      //Regra: o telefone não pode ser incompleto, mass pode estar em branco, se for de contato foge da regra
      for (var item in customerSend.Phones) {

        customerSend.Phones[item].NovoFormatoNumero = customerSend.Phones[item].DDD + customerSend.Phones[item].Number
        if (customerSend.Phones[item].NovoFormatoNumero.length < digitosMinimosTelefone && customerSend.Phones[item].NovoFormatoNumero.length > 0 && customerSend.Phones[item].IsFoneclube) {
          // debugger;
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.') });
          vm.requesting = false;
          return;
        }

      }
      
      var arrayFiltered = customerSend.Phones.filter(function (number) {
        return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.Delete == null && number.LinhaAtiva;
      });

      for (var i in customerSend.Adresses) {
        if (customerSend.Adresses[i].Cep == '')
          customerSend.Adresses.splice(i, 1);
      }
      var showLoader = DialogFactory.showLoader('Enviando Dados...');

      if (arrayFiltered.length == 0) {
        runPostUpdateCustomer(customerSend);
      } 
      else {

        validadeNumbers(arrayFiltered).then(function (result) {
          var right = true;
          for (var item in result) {
            if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber) && !newFoneclubeDocument) {

              var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                .concat(arrayFiltered[item].NovoFormatoNumero).concat('</strong>, pertence ao cliente ')
                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: msg });
              right = false;
              vm.requesting = false;
              showLoader.close();
            }
          }
          for (var x in arrayFiltered) {
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = arrayFiltered.filter(function (element, index, array) {
              return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
            });
            if (twiceNumber.length > 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
              right = false;
              vm.requesting = false;
              showLoader.close();
              break;
            }
          }
          // // 
          if (right) {
            runPostUpdateCustomer(customerSend);
          }
        });
      }

      function runPostUpdateCustomer(customerSend) {
        
        
        // valida preenchimento de telefones
        for(var i in customerSend.Phones)
        {
          var ddd = customerSend.Phones[i].DDD;
          var number = customerSend.Phones[i].Number;

          var dddIsNum = /^\d+$/.test(ddd);
          var numberIsNum = /^\d+$/.test(number);

          if(!dddIsNum || !numberIsNum || ddd.length == 0 || number.length == 0)
          {
            alert("Os telefones devem estar preenchidos com DDD e Número. Ajuste e refaça o envio.");
            vm.requesting = false;
            showLoader.close();
            return;
          }
        }

        UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function (result) {
          for (var i in result) {
            customerSend.Photos = customerSend.Photos.filter(function (element) {
              return element.Tipo != result[i].tipo;
            });
          
            customerSend.Photos.push({ Name: result[i].filename, Tipo: result[i].tipo });
          }

          var parentDDD = "";
          var parentNumber = "";
          if (vm.contactParent != undefined)
          {
            var parentDDD = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2);
            var parentNumber = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
          }

          var parentName = vm.customer.NameContactParent;

          var customerObj = {
            'NameParent': vm.customer.NameContactParent,
            'Id': customerSend.Id,
            'PhoneDDDParent': parentDDD,
            'PhoneNumberParent': parentNumber
          }
          
          FoneclubeService.postCustomerParent(customerObj).then(function (result) {
            if (result)
              FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
            else {
              DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '1 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
                .then(function (result) {
                  if (result) {
                    FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                  } else {
                    return;
                  }
                })
            }
          }).catch(function (erro) {

            DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '2 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
              .then(function (result) {
                if (result) {
                  FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                } else {
                  return;
                }
              })

          });

        })

      }

      function postUpdateCustomerSucess(result) {
        if (result) {
          DialogFactory.dialogConfirm({ title: 'Edição Realizada', mensagem: 'Todos os dados pessoais enviados, edição Foneclube feita com sucesso.', btn1: 'Voltar para Clientes', btn2: 'Cobrança Cliente' })
            .then(function (result) {
              if (result) {
                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
                  ViewModelUtilsService.showModalCustomer(result);
                });
              } else {
                if(vm.calledView == 1)
                    FlowManagerService.changeNewHomeView();
                  else
                    FlowManagerService.changeAllPhoneLinesNewView();
              }
            });
        }
        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerError(error) {
        DialogFactory.showMessageDialog({ mensagem: error.statusText });
        vm.requesting = false;
        showLoader.close();
      }

      });
      // aqui
    };

    function onTapCancel() {
      if(vm.calledView == 1)
        FlowManagerService.changeNewHomeView();
      else
        FlowManagerService.changeAllPhoneLinesNewView();
    }

    function onTapSendUserAllCheck(customer) {


      if (vm.requesting == true) return;
      vm.requesting = true;

      for (var i = 0; i < vm.tempPhones.length; i++) {
        vm.customer.Phones[i] = angular.copy(vm.tempPhones[i]);

      }

      // customer.Photos = vm.customer.Phones;

      //TODO
      //colocar breakpoint nos metodos localhost API, validar se novos atributos chegam--Putting breakpoint the methods localhost API, validate the new assets come.
      //revisar todos nomes entidade .net apos refact de nomes atributos -- Revisar of names or. net apos refact of attributes.
      var customerSend = {
        "Id": customer.Id,
        "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
        "Register": customer.Register,
        "Name": customer.Name,
        "NickName": customer.NickName,
        "Email": customer.Email,
        "Born": customer.Born,
        "Gender": customer.Gender,
        "IdPlanOption": customer.IdPlanOption,
        "IdPagarme": customer.IdPagarme,
        "IdRole": customer.IdRole,
        "Adresses": customer.Adresses,
        "Phones": customer.Phones,
        "Photos": customer.Photos,
        "IdParent": customer.IdParent,
        "NameContactParent": customer.NameContactParent,
        "IdCommissionLevel": customer.IdCommissionLevel,
        "SinglePrice": vm.singlePriceLocal,
        "DescriptionSinglePrice": customer.DescriptionSinglePrice
      }
      var totalPriceValidade = 0;
      for (var i in vm.customer.Phones) {
        vm.plans.find(function (element, index, array) {
          if (element.Id == vm.customer.Phones[i].IdPlanOption) {
            totalPriceValidade = totalPriceValidade + element.Value / 100;
          }
        });
      }

      // if (vm.singlePriceLocal) {
      //   if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
      //     DialogFactory.showMessageDialog({ mensagem: 'Preço único aplicado é maior do que o preço de todos os planos somados.' });
      //     //showLoader.close();
      //     // vm.requesting = false;
      //     // return;
      //   }
      // }


      var digitosMinimosTelefone = 11
      //Regra: o telefone não pode ser incompleto, mass pode estar em branco
      for (var item in customerSend.Phones) {
        if (customerSend.Phones[item].NovoFormatoNumero.length < digitosMinimosTelefone && customerSend.Phones[item].NovoFormatoNumero.length > 0) {
          // // ;
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.') });
          //showLoader.close();
          vm.requesting = false;
          return;
        } else {

          customerSend.Phones[item].DDD = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).DDD;
          customerSend.Phones[item].Number = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).Number;
          customerSend.Phones[item].PortNumber = (customerSend.Phones[item].PortNumber != "inativo") ? UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].PortNumber).DDD + '' + UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].PortNumber).Number: customerSend.Phones[item].PortNumber;
        }
      }

      var arrayFiltered = customerSend.Phones.filter(function (number) {
        return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.Delete == null && number.LinhaAtiva;
      });

      //Fix se o usuario não add CEP o array deve estar vazio;
      for (var i in customerSend.Adresses) {
        if (customerSend.Adresses[i].Cep == '')
          customerSend.Adresses.splice(i, 1);
      }
      var showLoader = DialogFactory.showLoader('Enviando Dados...');
      if (arrayFiltered.length == 0) {
        runPostUpdateCustomer(customerSend);
      } else {

        // // ;
        validadeNumbers(arrayFiltered).then(function (result) {
          var right = true;
          for (var item in result) {
            if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {

              // // ;
              var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                .concat(arrayFiltered[item].NovoFormatoNumero).concat('</strong>, pertence ao cliente ')
                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: msg });
              right = false;
              vm.requesting = false;
              showLoader.close();
            }
          }
          for (var x in arrayFiltered) {
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = arrayFiltered.filter(function (element, index, array) {
              return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
            });
            if (twiceNumber.length > 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
              right = false;
              vm.requesting = false;
              showLoader.close();
              break;
            }
          }
          if (right) {
            runPostUpdateCustomer(customerSend);
          }
        });
      }

      function runPostUpdateCustomer(customerSend) {

        UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function (result) {
          for (var i in result) {
            customerSend.Photos = customerSend.Photos.filter(function (element) {
              return element.Tipo != result[i].tipo;
            });
            // for (var x in customerSend.Photos) {
            //     if (result[i].tipo == customerSend.Photos[x].Tipo) {
            // //         ;
            //         customerSend.Photos.splice(x, 1);
            //     }
            // }
            customerSend.Photos.push({ Name: result[i].filename, Tipo: result[i].tipo });
          }

          var parentDDD = "";
          var parentNumber = "";
          if (vm.contactParent != undefined) {
            var parentDDD = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2);
            var parentNumber = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
          }

          var parentName = vm.customer.NameContactParent;
          // // ;


          var customerObj = {
            'NameParent': vm.customer.NameContactParent,
            'Id': customerSend.Id,
            'PhoneDDDParent': parentDDD,
            'PhoneNumberParent': parentNumber
          }

          FoneclubeService.postCustomerParent(customerObj).then(function (result) {
            
            if (result)
              FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);
            else {
              DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '3 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
                .then(function (result) {
                  if (result) {
                    return;
                   // FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);
                  } else {
                    return;
                  }
                })
            }
          }).catch(function (erro) {

            FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);

          });






        })

      }

      

      function postUpdateCustomerSucess(result) {
        if (result) {
          DialogFactory.dialogConfirm({ title: 'Edição Realizada', mensagem: 'Todos os dados pessoais enviados, edição Foneclube feita com sucesso.', btn1: 'Ir para Home', btn2: 'Visualizar Cliente' })
            .then(function (result) {
              if (result) {
                if(vm.calledView == 1)
                    FlowManagerService.changeCustomersView();
                  else
                    FlowManagerService.changeAllPhoneLinesNewView();
                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
                  vm.data.customers.splice(index, 1, result);
                  ViewModelUtilsService.showModalCustomer(result);
                });
              } else {
                if(vm.calledView == 1)
                  FlowManagerService.changeNewHomeView();
                else
                  FlowManagerService.changeAllPhoneLinesNewView();
              }
            })
        }
        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerSucesscheck(result) {

        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerError(error) {
        DialogFactory.showMessageDialog({ mensagem: error.statusText });
        vm.requesting = false;
        showLoader.close();
      }
    };

    function setPlansList(operadora) {
      vm.selectedPlansList = [];
      for (var item in vm.plans) {
        if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        }
      }
    }

    function validarCEP(index) {
      if (vm.customer.Adresses[index].Cep.length < 9) return;
      var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
      HubDevService.validaCEP(vm.customer.Adresses[index].Cep.replace(/[-.]/g, '')).then(function (result) {
        if (!result.erro) {
          vm.customer.Adresses[index].Street = result.logradouro;
          vm.customer.Adresses[index].Neighborhood = result.bairro;
          vm.customer.Adresses[index].City = result.localidade;
          vm.customer.Adresses[index].State = result.uf;
        } else {
          DialogFactory.showMessageDialog({ mensagem: "CEP incorreto." });
        }
        showLoader.close();
      }, function (error) {
        showLoader.close();
      });
    }

    function validarCPF() {


      if (vm.customer.DocumentNumber.length < 11) { 
        return 
      }
      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (existentClient) {
        if (existentClient.Id == 0) {
          HubDevService.validaCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (result) {
            if (result.status) {
              vm.name = result.nome;
            }
          }, function (error) { });
        } else if (existentClient.DocumentNumber != vm.DocumentNumberFreeze) {
          DialogFactory.showMessageConfirm({ titulo: 'CPF já cadastrado', mensagem: 'Você não pode cadastrar um cpf repetido.' })
            .then(function (param) {
              var cpf = angular.copy(vm.DocumentNumberFreeze);
              // vm.customer.DocumentNumber = cpf.substr(0, 3) + '.' + cpf.substr(3, 3) + '.' + cpf.substr(6, 3) + '-' + cpf.substr(9)
            })
        }
      }, function (result) {
        if(vm.calledView == 1)
            FlowManagerService.changeCustomersView();
          else
            FlowManagerService.changeAllPhoneLinesNewView();
      }).catch(function (error) {
        if(vm.calledView == 1)
            FlowManagerService.changeCustomersView();
          else
            FlowManagerService.changeAllPhoneLinesNewView();
      });
    }

    function onTapNewPhoneNumber() {
      // 
      vm.customer.Phones.push(
        {
          'Id': null,
          'DDD': '',
          'Number': '',
          'IsFoneclube': true,
          'IdOperator': 0,
          'Portability': 'false',
          'NickName': '',
          'IdPlanOption': 0,
          'Inative': false,
          'Delete': null,
          'NovoFormatoNumero': '',
          'operadora': '1',
          'key': Math.random(),
          'LinhaAtiva': true
        }
      );

      vm.tempPhones = angular.copy(vm.customer.Phones);
      resizeScroll();
    }

    function onTapRemoveNewNumber(position) {
      // // 
      DialogFactory.dialogConfirm({ titulo: 'Excluir Número', mensagem: 'Deseja realmente remover este número?' })
        .then(function (res) {
          if (res) {
            if (vm.customer.Phones[position].Id !== null) {
              vm.customer.Phones[position].Delete = true;
            } else {
              vm.customer.Phones.splice(position, 1);
            }

          }
        })
    }

    function validadeNumbers(numbers) {
      var promises = numbers.map(function (number) {
        return FoneclubeService.getCustomerByPhoneNumber({
          ddd: clearPhoneNumber(number.DDD),
          numero: clearPhoneNumber(number.Number)
        });
      });
      return $q.all(promises);
    }

    function validatePhoneNumber(position) {

      // // ;

      if (vm.requesting || vm.customer.Phones[position].NovoFormatoNumero.length < 14) return;
      var number = {
        ddd: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).DDD,
        numero: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).Number
      }
      //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
      var twiceNumber = vm.customer.Phones.filter(function (element, index, array) {
        return element.NovoFormatoNumero == vm.customer.Phones[position].NovoFormatoNumero
          && element.IsFoneclube == true
          && element.Delete == null;
      });
      if (twiceNumber.length > 1) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
        return;
      }
      FoneclubeService.getCustomerByPhoneNumber(number).then(function (res) {
        if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Este telefone já pertence a um cliente.' });
        }
      });
    }

    function getNumberString(param) {
      return param.DDD.concat(param.Number);
    }

    function clearPhoneNumber(number) {
      return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
    }

    function showAddNewPhone() {
      function filterPhones(number) {
        return number.IsFoneclube == true;
      }
      return vm.customer.Phones.filter(filterPhones);
    }

    function goBack() {
      FlowManagerService.goBack();
      FoneclubeService.getCustomerByCPF(vm.cpf).then(function (result) {
        ViewModelUtilsService.showModalCustomer(result);
      });
    }

    function resizeScroll() {
      $ionicScrollDelegate.resize();
    }

    vm.imageSelf;
    vm.base64Self;
    vm.imageFrente;
    vm.base64Frente;
    vm.imageVerso;
    vm.base64Verso;
    vm.uploadImg = uploadImg;
    vm.viewImg = viewImg;
    
    function viewImg(img) {
      ngDialog.open({
        template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
        controller: ['$scope', 'DataFactory', function ($scope, DataFactory) {
          $scope.img = $scope.ngDialogData.img;
        }],
        className: 'ngDialog-custom-width popup-lista-imagens',
        plain: true,
        closeByDocument: true,
        data: {
          img: img
        }
      });
    }
    function uploadImg(param) {
      document.getElementById(param).click();
    }
    vm.getImageOftype = getImageOftype;
    function getImageOftype(type) {
      function base64img(tipo) {
        if (tipo == 1) {
          return vm.base64Self;
        } else if (tipo == 2) {
          return vm.base64Frente;
        } else if (tipo == 3) {
          return vm.base64Verso;
        }
        return null;
      }
      if (base64img(type)) {
        return base64img(type);
      }
      var img = vm.customer.Photos.filter(function (element) {
        return element.Tipo == type;
      });
      if (img[0]) {
        return 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + img[0].Name;
      }
      return '../../content/img/upload-cloud.png';
    }

    vm.onlyUnique = onlyUnique;

    function onlyUnique(value, index, self) {
      return self.indexOf(value) === index;
    }

    vm.getPrice = getPrice;
    function getPrice(id) {
      console.log(id);
      if (id == '')
        return 0;
      return vm.plans.find(x => x.Id == id).Value / 100;
    }

    vm.changedPlano = changedPlano;
    function changedPlano(position, id) {

      if (id == '' || id == null)
        vm.pricelist[position] = 0;
      else
        vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value;
      
      addHistory();
      autmaticSum();
      autmaticSumNormal();
    }

    vm.onfocusPreco = onfocusPreco;
    function onfocusPreco(position){
        vm.tempPrice = vm.pricelist[position];
    }

    vm.onBlurPreco = onBlurPreco;
    function onBlurPreco(position){
        if(vm.tempPrice != vm.pricelist[position]){
            addHistory();
        }
    }

    vm.onunchecked = onunchecked;
    function onunchecked(position) {

      var phone =
      {
        "Id": vm.tempPhones[position].Id,
      };

      if(phone.Id == null)
      {
        vm.tempPhones[position].Delete = true;
        vm.tempPhones.splice(position, 1);
        return;
      }
        

      var r = confirm("Deseja fazer um soft delete nessa linha?");
      if (r == true) {
          FoneclubeService.postSoftDeletePhone(phone).then(function(result){
              ;
              if(result){
                vm.tempPhones[position].Delete = true;
                vm.tempPhones.splice(position, 1);
              }
                
          })
      } 
      else {
          txt = "You pressed Cancel!";
      }

    }

    // TODO ajustar ou remover
    vm.onallunchecked = onallunchecked;
    function onallunchecked() {
      vm.tempPhones = angular.copy(vm.customer.Phones);
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
        if (id == '' || id == null)
          vm.pricelist[position] = 0;
        else{
          vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value;
          vm.tempPhones[position]['Price'] = vm.plans.find(x => x.Id == id).Value;
        }
          
      }
    }

    function onedit() {
      ViewModelUtilsService.showModalCustomer(vm.customer, -1);
    }

    vm.ignoreAccents = function (item) {
      if (vm.showall) {
        return true;
      } else {

        try{

        var text = item.NovoFormatoNumero!=undefined ? removeAccents(item.NovoFormatoNumero.toLowerCase()) : "";
        //alert(text);
        var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
        var flag1 = text.indexOf(search_text) > -1;
        var flag2 = true;
        if (vm.linhaAtiva && !item.LinhaAtiva) {
          flag2 = false;
        }
        var flag3 = true;
        if (!vm.claro) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag3 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag3 = !(text.indexOf('claro') > -1);
          }
        }
        var flag4 = true;
        if (!vm.vivo) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag4 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag4 = !(text.indexOf('vivo') > -1);
          }
        }
        console.log(item.Number + "-" + (flag1 && flag2 && flag3 && flag4));
        return flag1 && flag2 && flag3 && flag4;

        
      }
      catch(e){
        console.log('Erro lowercase');
        // console.log(e);
      }

      }
    };

    vm.changedFilterAll = changedFilterAll;
    function changedFilterAll() {
      if (vm.showall) {
        vm.search = "";
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
      }
    }

    vm.onUndo = onUndo;
    function onUndo() {
      vm.sp--;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
      }
    }

    vm.onRedo = onRedo;
    function onRedo() {
      vm.sp++;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
      }
    }

    vm.addHistory = addHistory;
    function addHistory() {
      if (vm.history.length > vm.sp) {
        vm.history.splice(vm.sp, vm.history.length - vm.sp);
      }
      var tmpPhones = angular.copy(vm.tempPhones);
      var tmpPricelist = angular.copy(vm.pricelist);
      vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
      vm.sp = vm.history.length;
    }

    vm.telephonechanged = telephonechanged;
    function telephonechanged($index, phone) {
      try{
        var ddd = phone.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2)
        var phone = phone.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11)
  
        vm.customer.Phones[$index].DDD = ddd;
        vm.customer.Phones[$index].Number = phone;
        vm.customer.Phones[$index].NovoFormatoNumero = ddd + phone;
  
        vm.tempPhones[$index].DDD = ddd;
        vm.tempPhones[$index].Number = phone;
        vm.tempPhones[$index].NovoFormatoNumero = ddd + phone;
      }
      catch(e){}
      
    }

    vm.activechanged = activechanged;
    function activechanged($index) {
      // debugger
      addHistory();
    }


    vm.pricechanged = pricechanged;
    function pricechanged($index) {
      autmaticSum();
      autmaticSumNormal();
    }
    vm.pricechangedVIP = pricechangedVIP;
    function pricechangedVIP($index) {
        autmaticSum();
    }
    vm.nicknamechanged = nicknamechanged;
    function nicknamechanged($index) {
      addHistory();
    }

     vm.changedAutoSum = changedAutoSum;
    function changedAutoSum() {
      if (vm.autoSum) {
        autmaticSum();
      }
      saveUserSettings();
    }

    vm.changedAutoSumNormal = changedAutoSumNormal;
    function changedAutoSumNormal() {
      if (vm.autoSumNormal) {
        autmaticSumNormal();
      }
      saveUserSettings();
    }
    function autmaticSum() {

      if (vm.autoSum) {
        vm.singlePriceLocal = 0;
        for (var i = 0; i < vm.pricelist.length; i++) {
          if(vm.tempPhones[i].LinhaAtiva && !vm.tempPhones[i].Delete && vm.tempPhones[i].IsFoneclube){
              if(vm.tempPhones[i].AmmountPrecoVip > 0){
                  vm.singlePriceLocal += parseInt(vm.tempPhones[i].AmmountPrecoVip) ;
              }
              else {
                  vm.singlePriceLocal += parseInt(vm.pricelist[i]) ;
              }
          }

        }
        vm.singlePriceLocal = vm.singlePriceLocal / 100;
        vm.singlePriceLocal = 'R$'+vm.singlePriceLocal.toFixed(2);
      }
    }

    function autmaticSumNormal() {

      if (vm.autoSumNormal) {
        vm.singlePrice = 0;
        for (var i = 0; i < vm.pricelist.length; i++) {
          if(vm.tempPhones[i].LinhaAtiva && !vm.tempPhones[i].Delete && vm.tempPhones[i].IsFoneclube){
              vm.singlePrice += parseInt(vm.pricelist[i]) ;
          }

        }
        vm.singlePrice = vm.singlePrice / 100;
        vm.singlePrice = 'R$'+vm.singlePrice.toFixed(2);
      }
    }

    function changeCustomerAtivity(id, status){
      console.log(' --- changeCustomerAtivity');
      // debugger

      var customer = {
        'Id':id,
        'Desativo': !status
      }
      // debugger;
      FoneclubeService.postPersonAtivity(customer).then(function(result){
        // debugger;
      })
    }

    function onClickFlag(phoneNumber){
      console.log('onClickFlag');
      console.log(phoneNumber);
      
      var cliente = vm.customer;
      cliente.flagPhone = true;
      cliente.selectedPhone = phoneNumber
      // debugger
      ViewModelUtilsService.showModalFlag(cliente);

    }

    function saveUserSettings()
    {
      var data = {
        IntIdPerson : vm.customer.Id,
        IsPrecoPromoSum : vm.autoSum,
        IsPrecoFCSum : vm.autoSumNormal,
        IsUse2Prices : vm.customer.Use2Prices,
        IsVIP : vm.customer.IsVIP,
        IsLinhaAtiva : vm.linhaAtiva,
        IsShowICCID : vm.iccid,
        IsShowPort : vm.noPortar
      };

      FoneclubeService.saveUserSettings(data).then(function (result) {
        console.log('Saved Usar2Preços');
      });
    }

    function openChargeSummary()
    {
       FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
          ViewModelUtilsService.showModalCustomer(result);
       });
    }
  }
})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EmailDetailController', EmailDetailController)
    .directive('ngFiles', ['$parse', function ($parse) {

      function fn_link(scope, element, attrs) {
        var onChange = $parse(attrs.ngFiles);
        element.on('change', function (event) {
          onChange(scope, { $files: event.target.files });
        });
      };

      return {
        link: fn_link
      }
    }]);

  EmailDetailController.inject = ['ViewModelUtilsService', 'MainUtils', '$scope', 'FoneclubeService'];
  function EmailDetailController(ViewModelUtilsService, MainUtils, $scope, FoneclubeService) {
    // debugger;
    var vm = this;
    vm.sendemail = sendemail;
    vm.saveemail = saveemail;
    vm.templates = [];
    vm.templateNames = [];
    vm.emailstatus = ViewModelUtilsService.modalEmailDetailemailstatus;
    vm.phone = ViewModelUtilsService.modalEmailDetailphone;
    vm.operator = ViewModelUtilsService.modalEmailDetailoperator;
    vm.oper = ViewModelUtilsService.modalEmailDetailoperator;
    vm.customerData = ViewModelUtilsService.modalEmailCustomer;
    vm.getEmailDetails = getEmailDetails;
    vm.from = 'marcio.franco@gmail.com';
    vm.bcc = "";
    vm.attachment1 = "";
    vm.attachment2 = "";
    vm.attachment3 = "";
    getTemplates();
    //getEmailDetails(vm);
    var formdata = new FormData();

    $scope.getTheFiles = function ($files) {
      // debugger;
      //formData.append("model", angular.toJson(vm));
      angular.forEach($files, function (value, key) {
        //formData.append("file" + key, value);
        formdata.append(key, value);
      });
    };

    function getTemplates(){
        FoneclubeService.getTemplates().then(function (result) {
            vm.emailstatus = "";
            vm.templates = result;
            vm.templateNames = result.filter(x=>x.ShowInAction==true);
        });
    }

    function saveemail(vm) {
      console.log(vm);
      FoneclubeService.saveemail(vm).then(function (result) {
        alert('Template Updated successfully');

      })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function sendemail(vm) {
      if(vm.emailstatus!="")
      {
        vm.emailData = { 
          TemplateType: parseInt(vm.emailstatus), 
          email: vm.email, 
          from: vm.from, 
          subject: vm.subject, 
          body: vm.body, 
          cc: vm.cc, 
          bcc: vm.bcc 
        };
        formdata.append("model", angular.toJson(vm.emailData));
        console.log(vm);
        FoneclubeService.SendEmailStatus(formdata).then(function (result) {
          alert('Email sent successfully');
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
      }
    }

     function getEmailDetails(index) {
      if(vm.emailstatus!="")
      {
          var result = vm.templates.find(x=>x.Id == vm.emailstatus);
          vm.from = result.From;
          vm.email = result.To;
          vm.cc = result.Cc;
          vm.bcc = result.Bcc;
          vm.subject = replaceVariables(result.Subject);
          vm.body = replaceVariables(result.Description);
          vm.template = result.Tipo;
      }
     }

     function replaceVariables(value){
       value = value.replace("$name", vm.customerData.Name);
       return value.replace("$phone", vm.phone.replace(/[^0-9]/g, ""));
     }

    // function getEmailDetails(vm) {
    //   if (vm.operator == "8" || vm.operator == "9" || vm.operator == "10" || vm.operator == "11" || vm.operator == "12" || vm.operator == "13" || vm.operator == "14") {
    //     vm.oper = "VIVO";

    //   }
    //   else {

    //     vm.oper = 'CLARO';
    //     vm.emailstatus = parseInt(vm.emailstatus) + 6;
       
    //   }
    //   FoneclubeService.getEmailDetails(vm).then(function (result) {
        
    //     vm.subject = result.Subject;
    //     vm.body = result.Body.replace(/#DDDeTELEFONE/g, vm.Phone);
    //     vm.cc = result.Cc;
    //     vm.bcc = result.Bcc;
    //     vm.email = result.Email;
    //     vm.from = result.From;

    //     if (vm.oper =="VIVO") {
    //       if (vm.emailstatus == "3" || vm.emailstatus == "4") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
            
            
           
    //       }
    //       else if (vm.emailstatus == "6") {

    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
            
            
    //       }

    //       else if (vm.emailstatus == "5") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
    //         }
    //         if (vm.cc == "") {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }

    //       else if (vm.emailstatus == "7") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }

    //       else if (vm.emailstatus == "8") {
    //         if (vm.email == "") {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }
    //       else {
    //         vm.subject = '';
    //         vm.cc = '';
    //         vm.body = '';
    //         vm.bcc = '';

    //       }

    //     }
    //     else {

    //       if (vm.emailstatus == "9" || vm.emailstatus == "10") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }
    //       else if (vm.emailstatus == "12") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }

    //       else if (vm.emailstatus == "11") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }

    //       else if (vm.emailstatus == "13") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }

    //       else if (vm.emailstatus == "14") {
    //         if (vm.email == null) {

    //           vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
    //         }
    //         if (vm.cc == null) {

    //           vm.cc = 'suporte@foneclube.com.br';
    //         }
    //       }
    //       else {
    //         vm.subject = '';
    //         vm.cc = '';
    //         vm.body = '';
    //         vm.bcc = '';

    //       }
    //     }

    //   })
    //     .catch(function (error) {
    //       console.log('catch error');
    //       console.log(error);
    //     });
    // }

   }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('ExistentCardPaymentModalController', ExistentCardPaymentModalController);

    ExistentCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'FoneclubeService', 'MainUtils', 'UtilsService', '$scope', 'DialogFactory', '$filter', '$timeout'];
    function ExistentCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, FoneclubeService, MainUtils, UtilsService, $scope, DialogFactory, $filter, $timeout) {

        console.log('ExistentCardPaymentModalController');
        var vm = this;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        var customer = ViewModelUtilsService.modalExistentCardPaymentData;
        var card = ViewModelUtilsService.modalExistentCardData;

        vm.etapaDados = true;
        vm.customer = customer;
        vm.card = card;
        vm.amount = '';
        vm.comment = '';
        vm.customerComment = '';
        vm.cobrancaRealizada = false;
        vm.chargeDisabled = true;
        vm.parcelasCount = 1;
        vm.checkOne = checkOne;
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.copyForWhatsapp = copyForWhatsapp;
        vm.copyForTelegram = copyForTelegram;

        vm.vigenciaField = moment().subtract(1, 'day').format("YYYY MM");
        vm.scheduledField = moment().subtract(1, 'day').format("YYYY MM DD");
        vm.onTapAddComment = onTapAddComment;
        vm.onTapCancel = onTapCancel;
        vm.changeTextValue = changeTextValue;
        vm.copyForWhatsapp = copyForWhatsapp;
        vm.copyForTelegram = copyForTelegram;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
        vm.generateAndPasteDefaults = generateAndPasteDefaults;
        vm.incrementBothPP = incrementBothPP;
        vm.decrementBothPP = decrementBothPP;
        vm.validatePhone = validatePhone;
        vm.customerPhones="";
        vm.date_time = new Date().getFullYear().toString();
        vm.calculate = calculate;
        vm.showCopyButtons = true;
        vm.amount = 0;
        vm.amountTemp = 0;
        vm.amountTemp1 = 0;
        vm.bonus = 0;
        vm.bothPP = 1;
        vm.AdditionalComment = "";
        vm.multiVigencia = false;
        vm.finalSelected = [];
        vm.selectDays = UtilsService.getNext12Months(moment(new Date()).format('MM-DD-YYYY'));
        vm.selectedList = {};
        vm.btnclass = "btn btn-success";
        vm.defaultTemplateText = `🤖 FoneClube: FoneBot
Prezado *|namevariable|*,

Segue resumo da sua última cobrança que que será enviada por email e whatsapp.  
*|Detalhes.Cobrança|*

Vigencia:*|vigenciavariable|* 
Total:*R$|amountvariable|*

Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}*

ou email para 

*financeiro@foneclube.com.br*.  

Obrigado pela Atenção: 
*FoneClube*  👍`;
        
        if (vm.customer.CacheIn) {
          vm.amount = vm.customer.CacheIn;
          vm.amountTemp = vm.amount.toFixed(2);
          vm.amountTemp1 = vm.amount.toFixed(2);
        }
        
        // debugger;
        var customerId = customer.Id;
        var existentCustomer = {
            'name' : customer.Name,
            'document_number' : customer.DocumentNumber,
            'email' : customer.Email,
            'address' : getAddress(customer),
            'phone' : getContactPhone(customer)
        }

        init();

        function init() {
        vm.chargeStatusfirst = true;
        vm.chargeStatus = 1;
        FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
            console.log('FoneclubeService.getTotaisComissoes')
            console.log(result)
            //debugger
            vm.bonus = parseFloat(result.ValorTotalLiberadoParaPagarCliente/ 100).toFixed(2);

          })

            
            FoneclubeService.getLastPersonCharging(customer.Id).then(function (result) {
                // debugger
               
                if(result.txtCommentEmail !=undefined)
                    vm.customerComment = decodeURIComponent(result.txtCommentEmail);
                else{
                    vm.customerComment =  vm.defaultTemplateText;
                }
                if(result.txtComment !=undefined){
                    vm.comment = decodeURIComponent(result.txtComment);
                }
                else
                    vm.comment =  vm.defaultTemplateText;
                vm.vigenciaField = moment(result.Validity).format("YYYY MM");
                vm.selectDays = UtilsService.getNext12Months(moment(result.Validity).format('MM-DD-YYYY'));
                vm.amount = result.txtAmmountPayment/100;
                vm.amountTemp = vm.amount.toFixed(2);
                vm.amountTemp1 = vm.amount.toFixed(2);
                vm.scheduledField = UtilsService.formatDate(new Date(result.dteDueDate
).getFullYear() == 2000 ? moment(UtilsService.addDays(1)).format("DD MMMM YYYY"): moment(result.dteDueDate).format("DD MMMM YYYY")); 

                calculate();

                if(result.txtWAPhones == undefined || result.txtWAPhones == null)
                   vm.customerPhones = customer.Phones.filter(x=>!x.IsFoneclube)[0].DDD + customer.Phones.filter(x=>!x.IsFoneclube)[0].Number;
                 else
                    vm.customerPhones=result.txtWAPhones;
                  validatePhone();
            })
        }

        vm.Padrão = false;
        vm.Excepcional = false;
        vm.existentCustomer = existentCustomer;

        // listener when clicking Schedule button
        function onTapAddComment(data, isBothPPClick){
            // debugger;
            data.intIdPerson=customer.Id;
            data.txtDescription = "Cartao nao passou R$" + data.amount +" on " + moment(vm.scheduledField).format("YYYY/MM/DD");
            // data.dteRegister = ""
            data.bitPendingInteraction = true;
            var em = vm.amount.toString().split(".");
            if (em[1] != undefined) {
              vm.amount = vm.amount.toString().replace(".", "")

            }

                  FoneclubeService.postCustomerComment(data).then(function(result){
                    var chargeDataArray = [];

                    var bothPPValue = 0;
                      
                    if(vm.bothPP == 0 || vm.bothPP == 1) 
                      bothPPValue = 0;
                    else
                      bothPPValue = isBothPPClick ? vm.bothPP : 0;
                    var completeCount = 1;
                    var strMessage = 'Favor confirmar agendamento abaixo: <br/>Numero total de cobranças: '+ (bothPPValue == 0 ? 1 : bothPPValue) +'<br/>'; 
                    for(var ibothcount = bothPPValue == 0 ? 0 : 1; ibothcount <= bothPPValue; ibothcount++)
                    {
                      var expiryDate = moment(vm.scheduledField).add(ibothcount, 'month').format("DD MMMM YYYY");
                      var vigenciaYear = parseInt(vm.vigenciaField.split(" ")[0]);
                      var vigenciaMonth = parseInt(vm.vigenciaField.split(" ")[1]);
                 
                      var vy = vigenciaMonth + ibothcount <= 12? vigenciaYear + " " + (vigenciaMonth + ibothcount): vigenciaYear + 1 + " " + ((vigenciaMonth + ibothcount) - 12);
                      
                      strMessage += '<br/><label>' + (ibothcount == 0 ? 1: ibothcount) + '. Vencimento:<strong>' + moment(expiryDate).format("DD/MMM/YYYY")+'</strong></label>';
                      strMessage += '<label>Vigencia:<strong>' + vy.split(" ")[1] + '/' + vy.split(" ")[0]+'</strong></label>';
                      strMessage += '<label>Total:<strong>R$' + vm.amount/100 +'</strong></label>';


                      var customerCharging = {
                      Id: vm.customer.Id,
                      Charging:{
                          Comment: vm.bothPP == 1 ? encodeURIComponent(vm.comment) : encodeURIComponent(vm.defaultTemplateText),
                          CommentEmail: vm.bothPP == 1 ? encodeURIComponent(vm.customerComment) : encodeURIComponent(vm.defaultTemplateText),
                          Ammount: vm.amount,
                          CollectorName: MainUtils.getAgent(),
                          PaymentType: CARTAO,
                          AnoVingencia: vy.split(" ")[0],
                          MesVingencia: vy.split(" ")[1],
                          ChargeStatus: vm.chargeStatus,
                          TransactionId: vm.TransactionId,
                          ScheduledMonth:moment(expiryDate).format("MM"),
                          ScheduledYear:moment(expiryDate).format("YYYY"),
                          ScheduledDay:moment(expiryDate).format("DD"),
                          TransactionComment: card.id,
                          ChargingComment: vm.AdditionalComment,
                      }
                    }
                    console.log(customerCharging);
                      chargeDataArray.push(customerCharging); 
                  }

                  DialogFactory.dialogConfirm({ title: 'Atenção!', mensagem: strMessage, btn1: 'Yes', btn2: 'No, edit Charge' }).then(function(confirm) {
                    if(confirm==0)
                    {
                        for(var cc = 0 ; cc< chargeDataArray.length; cc++){
                        //posso colocar na lista de cobranças e ser o primeiro com vingencia
                        FoneclubeService.postSchedulePayment(chargeDataArray[cc]).then(function(result){
                        
                        if(completeCount == chargeDataArray.length)
                        {
                          DialogFactory.showAlertDialog({message: 'Inserido com sucesso'});
                          return;
                        }
                        completeCount++;  
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                      }
                    }
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
            });
        }

        function checkOne(val) {
          //alert('xx');
          vm.chargeDisabled = false;
          if (val == '1') {
            vm.chargeStatusfirst = true;
            vm.chargeStatusSecond = false;
            vm.chargeStatus = 1;
          }
          if (val == '2') {
            vm.chargeStatusSecond = true;
            vm.chargeStatusfirst = false;
            vm.chargeStatus = 2;
          }
        }

        function changeTextValue(){
            if(vm.customerComment!=undefined){
            vm.replaceIndex = 0;
            vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/g, autoRepalceText);
            vm.replaceIndex = 0;
            }
            vm.selectDays = UtilsService.getNext12Months(moment(vm.vigenciaField).format('MM-DD-YYYY'));
      }

      function autoRepalceText(match, start, changeValue, end, offset, string) {
        GetVigencias();
        var resStr = "";

            if(vm.replaceIndex == 0){
              resStr = vm.customer.Name;
            }
            if(vm.replaceIndex == 1){
              vm.AdditionalComment = changeValue;
              resStr = changeValue;
            }
            if(vm.replaceIndex == 2){
              var rrresStr = vm.finalSelected.map(function(dd) { return (new Date(moment(dd)).toLocaleDateString('pt-br', { month: 'long', year:"numeric"}).replace(' de ', '-')) });
              resStr = rrresStr.join();
            }
            if(vm.replaceIndex == 3){
              resStr =  vm.amountTemp1;
            }
            vm.replaceIndex++;

            return start + resStr + end;
          }

        function calculate() {
            // debugger
          var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
          var bonus = vm.bonus.toString().indexOf('.') > -1 ? parseFloat(vm.bonus) : parseFloat(vm.bonus) / 100;
          vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
          if (vm.pagar) {
            vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
          }
          else {
            vm.amount = parseFloat(amount).toFixed(2);
          }

          if (isNaN(vm.amount)) {
            vm.amount = 0;
          }

          vm.amountTemp1 = vm.amount;
          changeTextValue();
        }

        function GetVigencias()
            {
              vm.finalSelected = [];
              var selList = Object.keys(vm.selectedList).map((key) => [key, vm.selectedList[key]]);
              for(var io=0; io < selList.length; io++ ){
                if(selList[io][1] == true)
                 vm.finalSelected.push(selList[io][0]);
              }
              if(!vm.finalSelected.includes(moment(vm.vigenciaField).format("MMM-YYYY")))
                vm.finalSelected.push(moment(vm.vigenciaField).format("MMM-YYYY"));

              vm.finalSelected = vm.finalSelected.filter(function( item, index, inputArray ) {
                  return inputArray.indexOf(item) == index;
                });

              var MONTHS = MONTHS = { Jan: 1, Feb: 2, Mar: 3, Apr: 4, May: 5, Jun: 6, Jul: 7, Aug: 8, Sep: 9, Oct: 10, Nov: 11, Dec: 12 };

              vm.finalSelected = vm.finalSelected.sort(function (a, b) {
                  var aa = a.split('-'),
                  bb = b.split('-');

                  return aa[1] - bb[1] || MONTHS[aa[0]] - MONTHS[bb[0]];
              });
            }

        function onTapConfirmarPagamento() {
            // debugger;
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }

            if (parseInt(vm.amount) < 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
              return;
            }

            GetVigencias();
            var strSel = vm.finalSelected.join();
            if(vm.finalSelected!=null && vm.finalSelected.length > 1)
                {
                  ViewModelUtilsService.showConfirmDialog('Atenção!', 'Confirme os vários vigencias desta cobrança <br/>'+ strSel).then(function(confirm) 
                    {
			                if (confirm) 
                      {
                        if (!vm.chargeStatus) {
                          vm.chargeStatusDiv = true;
                          vm.etapaDados = false;
                          vm.etapaConfirmacao = false;
                        }
                        else {
                          vm.etapaDados = false;
                          vm.etapaConfirmacao = true;
                          vm.chargeStatusDiv = false;
                        }
                      }
                    });
                }
                else{
                  if (!vm.chargeStatus) {
                     vm.chargeStatusDiv = true;
                     vm.etapaDados = false;
                     vm.etapaConfirmacao = false;
                   }
                   else {
                     vm.etapaDados = false;
                     vm.etapaConfirmacao = true;
                     vm.chargeStatusDiv = false;
                   }
                }
        }
        
        function onTapCancel(number){
            // debugger;
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            vm.chargeStatusDiv = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }

        function onTapPagar(){
            vm.btnclass = "btn btn-success";
            SaveDefaults();
            // debugger;
            console.log('tap pagar existente')
            console.log(parseInt(vm.amount))
            console.log(card.id)
            var em = vm.amount.toString().split(".");
            if (em[1] != undefined) {
              vm.amount = vm.amount.toString().replace(".", "")

            }

            var vigencias = vm.finalSelected.map(function(dd) { return moment(moment(dd).format('MMM-YYYY')).format("YYYY MM"); });

                      vm.disableTapPay = true;
                      vm.message = 'Iniciando transação';
                      PagarmeService.postTransactionExistentCard(vm.amount, card.id, existentCustomer, vm.parcelasCount).then(function(result){
                        if(result.status=="refused")
                        {
                          $timeout(function(){
                          vm.btnclass = "btn btn-danger";
                          FoneclubeService.getLastTransactionIdByCustomer(vm.customer.DocumentNumber).then(function(result){
                            //debugger;
                            vm.message = 'Transação recusada';
                            var customerCharging = {
                              Id: vm.customer.Id,
                                Charging: {
                                Comment:encodeURIComponent(vm.comment),
                                CommentEmail:encodeURIComponent(vm.customerComment),
                                Ammount: vm.amount,
                                CollectorName: MainUtils.getAgent(),
                                PaymentType: CARTAO,
                                AnoVingencia: vm.vigenciaField.split(" ")[0],
                                MesVingencia: vm.vigenciaField.split(" ")[1].trim(),
                                ChargeStatus: vm.chargeStatus,
                                TransactionId: result != ""? parseInt(result) : 0,
                                DueDate: moment().toDate(),
                                TransactionComment: card.id,
                                Token:result.token,
                                ChargingComment: vm.AdditionalComment,
                                TxtWAPhones:vm.customerPhones,
                                Installments : vm.parcelasCount,
                                MutliVigencias: vigencias
                              }
                            }
                            FoneclubeService.sendWhatsAppMessageCCRefused(customerCharging).then(function(result){
                              FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                                console.log('FoneclubeService.postHistoryPayment');
                                console.log(result);
                                vm.statusTransaction = 'Transação recusada';
                                vm.disableTapPay = false;
                                vm.cobrancaRealizada = true; 
                              });
                            });
                          });
                        }, 10000);
                        }
                        else
                        {
                          //vm.message = 'Transação efetuada';
                          // debugger;
                          //PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                            vm.message = 'Transação concluída';
                            vm.TransactionId = result.id;

                            if(vm.customerComment == undefined)
                                vm.customerComment = '';
    
                            var emailObject = {
                                'Id':vm.customer.Id,
                                'To': vm.existentCustomer.email, //vm.existentCustomer
                                'TargetName' : vm.existentCustomer.name,
                                'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                                // 'CustomerComment':vm.customerComment,
                                'TargetSecondaryText' : vm.customerComment,
                                'TemplateType' : 1
                            }
    

                            if(vm.pagar && vm.bonus != '0.00')
                            {
                                emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',')
                            }
    
                            try{
                                var chargingLog = {
                                    'customer': existentCustomer,
                                    'ammount': vm.amount,
                                    'pagarmeResponse': result,
                                    'customerComment':vm.customerComment,
                                    'foneclubeComment' : vm.comment
                                };
    
                                // debugger
                                FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                    var teste1 = emailObject;
                                    var teste2 = existentCustomer;
                                    var teste3 = vm.amount;
                                    alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em    contato com cardozo")
                                });
                            }
                            catch(erro){
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em    contato com cardozo")
                            }
    
    
                            FoneclubeService.postSendEmail(emailObject).then(function(result){
                                console.log('FoneclubeService.postHistoryPayment');
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                            });
    
                            saveHistoryPayment(vigencias);
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;                        
                          // })
                          // .catch(function(error){
                          //   vm.disableTapPay = false;
                          //   try{
                          //       vm.message = 'Erro na captura da transação' + error.status;
                          //   }
                          //   catch(erro){
                          //       vm.message = 'Erro na captura da transação'
                          //   }
                          //   console.log(error);
                          // });
                        }
                }, function(error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            }).catch(function (error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            });
          
        }

        function SaveDefaults()
            {
             // debugger;
              var paymentInfo = {
                Id : vm.customer.Id,
                DefaultWAPhones : vm.customerPhones
              };
              FoneclubeService.saveDefaultPaymentInfo(paymentInfo).then(function (result) {
                    return false;
              });
            }

        function saveHistoryPayment(vigencias){
            
            var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:encodeURIComponent(vm.comment),
                    CommentEmail:encodeURIComponent(vm.customerComment),
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: CARTAO,
                    AnoVingencia: vm.vigenciaField.split(" ")[0],
                    MesVingencia: vm.vigenciaField.split(" ")[1].trim(),
                    ChargeStatus: vm.chargeStatus,
                    TransactionId: vm.TransactionId,
                    TransactionComment: card.id,
                    ChargingComment: vm.AdditionalComment,
                    TxtWAPhones:vm.customerPhones,
                    DueDate: moment().toDate(),
                    Installments : vm.parcelasCount,
                    MutliVigencias: vigencias
                }
            }
            FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                
                if(vm.pagar)
                {   FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
                    //alert('success!!');
                  })
                    .catch(function (error) {

                    })
                }

            })
            .catch(function(error){
                alert('Aviso em verificação secundária, printar tela - ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + ' ecc333'
                        )
                console.log('catch error');
                console.log(error);
            });

        }

        function getContactPhone(customer){
            // debugger;
            try{
                return {
                    'ddd' : customer.Phones[0].DDD.toString(),
                    'number' : customer.Phones[0].Number.toString()
                }
            }
            catch(e){
                return {
                    'ddd' : '21',
                    'number' : '997865645'
                }
            }
            
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0 || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            // debugger;
            var address = customer.Adresses;
            if (!address || address.length == 0) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

        function incrementBothPP(){
            vm.bothPP++;
        }

        function decrementBothPP(){
            vm.bothPP--;
        }

        function copyForWhatsapp(){
            ClipBoardCopy(vm.customerComment.replace(/\|/g, ''));
          }

          function copyForTelegram(){
            ClipBoardCopy(vm.customerComment.replace(/\|/g, '').replace(/\*/g, '**'));
          }
          function ClipBoardCopy(text_to_share) {
            // create temp element
            var copyElement = document.createElement("pre");
            copyElement.appendChild(document.createTextNode(text_to_share));
            copyElement.id = 'tempCopyToClipboard';
            angular.element(document.body.append(copyElement));
      
            // select the text
            var range = document.createRange();
            range.selectNode(copyElement);
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
      
            // copy & cleanup
            document.execCommand('copy');
            window.getSelection().removeAllRanges();
            copyElement.remove();
          }

          function generateAndPasteDefaults(){
            vm.customerComment = vm.defaultTemplateText;
            changeTextValue();
            ClipBoardCopy(vm.customerComment);
          }

          function validatePhone(){
              var checkPhoneNums = vm.customerPhones.replace(/[^0-9\.,]/g, "");
              FoneclubeService.validatePhoneForWA(checkPhoneNums).then(function(result){
                if(result){
                  var validNumbers = result.split('|')[0];
                  var invalidNumbers = result.split('|')[1];
                  vm.customerPhones = validNumbers;
                  if(invalidNumbers)
                    vm.customersInvalidPhones = "Invlaid numbers : "+ invalidNumbers;
                  else
                    vm.customersInvalidPhones ="Ok";
                }
              });
            }
    }
})();

(function() {
  'use strict';

  function ActiveCustomersFilter() {
    return function(customers) {
      return customers.filter(customers, _isActive);
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  angular.module('foneClub').filter('activeCustomers', ActiveCustomersFilter);
})();

(function() {
  'use strict';

  function CustomerByFilter() {
    return function(customers, type) {
      switch (type) {
        case 'active':
          return customers.filter(_isActive);
        case 'inactive':
          return customers.filter(_isInactive);
        case 'regerror':
          return customers.filter(_hasRegerror);
        default:
          return customers;
      }
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  function _isInactive(c) {
    return c.Desativo;
  }

  function _hasRegerror(c) {
    return c.Orphan;
  }

  angular.module('foneClub').filter('customerBy', CustomerByFilter);
})();

(function() {
  'use strict';

  function ActiveCustomersFilter() {
    return function(customers) {
      return customers.filter(customers, _isActive);
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  angular.module('foneClub').filter('activeCustomers', ActiveCustomersFilter);
})();

(function() {
  'use strict';

  angular.module('foneClub').controller('FlagController', FlagController);

  FlagController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService'
  ];

  function FlagController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService
  ) {

    console.log('--- FlagController ---')
    var vm = this;
    vm.onTapAddComment = onTapAddComment;
    vm.changeFlag = changeFlag;
    vm.changeSelectedPhone = changeSelectedPhone;

    var customer = ViewModelUtilsService.modalFlagData;
    vm.customer = customer;

    vm.customerPhones = null;
    vm.flagsTypes = null;
    vm.txtDescription = '';
    vm.showPhones = true;
    vm.changePlan = changePlan;

    if(customer.flagPhone)
      vm.showPhones = false;

    if(customer.selectedPhone != null){
      debugger
      vm.selectedPhone = customer.selectedPhone.Id
    }
        

    FoneclubeService.getFlagsTypes(!vm.showPhones).then(function(result){
      vm.flagsTypes = result;
    })

    FoneclubeService.getPlans().then(function(result){
      vm.allPlans = result;
    })

    FoneclubeService.getPersonPhones(customer.Id).then(function(result){
      vm.customerPhones = result;
    })

    function changeSelectedPhone(phone){
      console.log('changeSelectedPhone = ')
      vm.selectedPhone = phone.PersonPhoneId;
    }

    function changeFlag(flag){
      
      vm.hasEmailTosend = false;
      var selectedFlag;
      vm.selectedFlag = flag;

      for(var i in vm.flagsTypes){
        if(flag.IdType == vm.flagsTypes[i].IdType)
        {
          selectedFlag = vm.flagsTypes[i]
        }
      }

      vm.hasEmailTosend = (selectedFlag.FullEmail.Title != "")
      

      debugger
      
      vm.email = selectedFlag.FullEmail.To
      vm.body = selectedFlag.FullEmail.Body
      vm.subject = selectedFlag.FullEmail.Title
      vm.cc = selectedFlag.FullEmail.Cc
      vm.bcc = selectedFlag.FullEmail.Bcc

      if(vm.selectedFlag.IdType == 1 || vm.selectedFlag.IdType == 2 || vm.selectedFlag.IdType == 11)
        vm.showPlanList = true;
      else
        vm.showPlanList = false;

    }

    function onTapAddComment(data, closeThisDialog) {

      debugger;
      if(vm.selectedFlag == null){
        alert('Não é possível atribuir flag sem selecionar qual')
        return;
      }
      else if((vm.selectedplan == null || vm.selectedplan == undefined) && (vm.selectedFlag.IdType == 1 || vm.selectedFlag.IdType == 2)){
        alert('Não é possível atribuir flag desse tipo sem selecionar qual plano')
        return;
      }
      else if(vm.hasEmailTosend && (vm.selectedPhone == null || vm.selectedPhone == undefined)){
        alert('Não é possível atribuir flag e enviar email sem selecionar telefone')
        return;
      }
      else {

        closeThisDialog(0)
        var showLoader = DialogFactory.showLoader('Fazendo envio...');

        var fullEmail = { 
          To: vm.email,
          Title: vm.subject, 
          Body: vm.body, 
          Cc: vm.cc, 
          Bcc: vm.bcc 
        };
          
        var flag;
  
        if(vm.selectedPhone == null){
          flag = {
            'IdFlagType' : vm.selectedFlag.IdType,
            'Description': vm.txtDescription,
            'PendingInteraction': vm.bitPendingInteraction == true,
            'IdPerson': customer.Id,
            'FullEmail':fullEmail
          };
        }
        else{
          flag = {
            'IdFlagType' : vm.selectedFlag.IdType,
            'Description': vm.txtDescription,
            'PendingInteraction': vm.bitPendingInteraction == true,
            'IdPhone': vm.selectedPhone,
            'FullEmail':fullEmail
          };
          
        }
  
        if(vm.showPlanList){
          flag.PlanId = vm.selectedplan.Id
        }

        FoneclubeService.postPersonFlag(flag).then(function(result) {
          debugger
          console.log(result);
          if(result.EmailSuccess &&  result.FlagSuccess)
          {
            DialogFactory.showAlertDialog({ message: 'Flag inserida com sucesso e email enviado' });
          }
          else if(result.EmailSuccess && !result.FlagSuccess){
            DialogFactory.showAlertDialog({ message: 'Inserção de flag falhou' });
          }
          else if(!result.EmailSuccess && result.FlagSuccess){
            DialogFactory.showAlertDialog({ message: 'Flag inserida com sucesso' });
          }
  
          showLoader.close();
  
        }); 
      }


    }

    function changePlan(plan){
      console.log('changePlan')
      console.log(plan)
      debugger
      vm.selectedplan = plan
    }

  }
})();

(function() {
    'use strict';

        angular
            .module('foneClub')
            .controller('InstaAddNewLineController', InstaAddNewLineController);



        function InstaAddNewLineController($scope, ViewModelUtilsService, PagarmeService, FoneclubeService, DialogFactory, UtilsService, $filter, localStorageService) {

            var vm = this;
            vm.scope = $scope;
            vm.ParentData = ViewModelUtilsService.modalData;
            vm.Plans = vm.ParentData.Plans;
            vm.Name = vm.ParentData.Client.Nome;
            vm.Address = vm.ParentData.Client.Address;
            vm.ESIMs = ["SIM", "NÃO"];
            vm.WhatsAppNum = "";
            vm._Amount = 0;
            vm.Charge = true;
            vm.SubTotal = "0.00";
            vm.TotalShipment = "0.00";
            vm.TotalAmount = "0.00";
            vm.ICCID = "";
            vm.Plan = 42;
            vm.SelectedCardId = "";
            vm.DDD = "";
            vm.Linha = "";
            vm.ESIM = "NÃO";
            vm.Amount = 0;
            vm.Port = "";
            vm.paymentType = 3;
            vm.IsActivateBeforePayment = false;
            vm.IsActivate = true;
            vm.ActivateDDD = "";
            vm.ActivateCPF = "";
            vm.Senha = "";
            vm.shipmentType = 1;
            vm.updateShipment = updateShipment;
            vm.selectedPlanChange = selectedPlanChange;
            vm.ActivateLine = ActivateLine;
            vm.calculate = calculate;
            vm.AddToCart = AddToCart;
            vm.validateCEP = validateCEP;
            vm.onTapCard = onTapCard;
            vm.phones = [];
            vm.cartItems = [];
            vm.ShowGrid = false;
            vm.loopCount = 1;
            vm.gridApi = {};
            vm.gridColumnApi = {};

            init();

            vm.gridOptions = {
                columnDefs: [
                    { field: 'Id', hide: true },
                    { field: 'PlanId', hide: true},
                    { field: 'IsActivate', headerName:"Ativação?", width: 50},
                    { field: 'Plano', headerName:"Plano", width: 200},
                    { field: 'ESim', headerName:"eSim", width: 80},
                    { field: 'DDD', headerName:"DDD da Ativação", width: 80,editable: true, cellEditor: "agTextCellEditor"},
                    { field: 'Contel', headerName:"Contel", width: 100,editable: true, cellEditor: "agTextCellEditor"},
                    { field: 'ICCID', headerName:"ICCID", width: 180,editable: true, cellEditor: "agTextCellEditor"},
                    { field: 'PortDDD', headerName:"DDD da Port", width: 80,editable: true, cellEditor: "agTextCellEditor"},
                    { field: 'Port', headerName:"Port", width: 100,editable: true, cellEditor: "agTextCellEditor"},
                    { field: 'Amount', headerName:"Plano R$", width: 80, editable: true, cellEditor: "agTextCellEditor",
                        onCellValueChanged: function (event) {
                            updateTotal();
                            updateShipment();
                        }
                    },
                    { field: 'Shipment', headerName:"CHIP R$", width: 80, editable: true, cellEditor: "agTextCellEditor",     onCellValueChanged: function (event) {
                        updateTotal();
                        updateShipment();
                    }},
                    { field: 'Action', width: 50, editable: false, cellRenderer: function (params) {
                        if(params.value != null){
                            return '<a title="ff"><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/Cancel.png" /></a>';
                        }
                        else return "";
                        },
                        suppressMenu: true,
                        floatingFilter: false,
                        onCellClicked:function(data)
                        {
                            var index = vm.cartItems.map(x => {  return x.Id;}).indexOf(data.data.Id);
                            vm.cartItems.splice(index, 1);
                            if (vm.gridOptions.api) {
                                vm.gridOptions.api.setRowData(vm.cartItems);
                                updateTotal();
                                updateShipment();
                            }
                        }
                    }
                ],
                 defaultColDef: {
                    sortable: true,
                    filter: true,
                    enableFilter: true,
                    resizable: true,
                    editable: false,
                },
                stopEditingWhenGridLosesFocus: true,
                enableCellTextSelection: true,
                autoSizeColumns: true,
                rowHeight: 30,
                headerHeight: 75,
                onGridReady: function (params) {
                    LoadNewLines();
                    vm.gridApi = params.api;
                    vm.gridColumnApi = params.columnApi;
                },
            };

            function init()
            {
                selectedPlanChange();
                initCardList(vm.ParentData.Client.IdPagarme);
                //initCardList(30660846);
            }

            function AddToCart(){
                vm.ShowGrid = true;
                var selectedPlan = vm.Plans.find(x=>x.Id == vm.Plan);
                vm.cartItems.push({
                    Id: vm.loopCount,
                    Plano : selectedPlan.Description,
                    PlanId: selectedPlan.Id,
                    ESim : vm.ESIM,
                    DDD : vm.ActivationDDD,
                    Contel: vm.Linha,
                    ICCID: vm.ICCID,
                    PortDDD: vm.PortDDD,
                    Port: vm.Port,
                    Amount: selectedPlan.Value,
                    Shipment : vm.ESIM == "SIM" ? 500 : 1000, 
                    Action : "N",
                    IsActivate : vm.IsActivate
                });
                if (vm.gridOptions.api) {
                    vm.gridOptions.api.setRowData(vm.cartItems);
                    updateTotal();
                    vm.loopCount++;
                }
            }

            function updateTotal(){
                vm.gridOptions.api.refreshCells();
                let pinnedBottomData = generatePinnedBottomData();
                vm.gridApi.setPinnedBottomRowData([pinnedBottomData])
                vm.gridOptions.api.refreshCells();
                updateShipment();
                vm.scope.$apply();
            }


            function generatePinnedBottomData(){
                // generate a row-data with null values
                let result = {};

                vm.gridColumnApi.getAllGridColumns().forEach(item => {
                    result[item.colId] = null;
                });
                return calculatePinnedBottomData(result);
            }

            function calculatePinnedBottomData(target){
                //console.log(target);
                //**list of columns fo aggregation**
                let columnsWithAggregation = ['Shipment', 'Amount']
                columnsWithAggregation.forEach(element => {
                console.log('element', element);
                vm.gridApi.forEachNodeAfterFilter((rowNode) => {
                    if (rowNode.data[element])
                        target[element] += parseInt(rowNode.data[element]);
                    });
                if (target[element])
                    target[element] = `${target[element]}`;
                })
                return target;
            }

            function updateShipment()
            {
                var amounts = vm.cartItems.reduce((n, {Amount,  Shipment}) => n + parseInt(Amount) + parseInt(Shipment), 0);
                var totalShip = vm.cartItems.reduce((n, {Shipment}) => n + parseInt(Shipment), 0);
                var totalAmount = amounts;
                if(vm.shipmentType == 2)
                {
                    vm.Amount =  "R$" + ((totalAmount  + 500) / 100).toFixed(2);
                    totalShip = totalShip + 500;
                }
                else if(vm.shipmentType == 3)
                {
                    vm.Amount =  "R$" + ((totalAmount  + 1000) / 100).toFixed(2);
                    totalShip = totalShip + 1000;
                }
                else
                {
                    vm.Amount =  "R$" + ((totalAmount) / 100).toFixed(2);
                }
                var items = vm.cartItems.reduce((n, {Amount}) => n + parseInt(Amount), 0);
                vm.SubTotal = ((items) / 100).toFixed(2);
                vm.TotalShipment = ((totalShip) / 100).toFixed(2);
                vm.TotalAmount = ((items + totalShip) / 100).toFixed(2);

            }
            
            function LoadNewLines()
            {
                if (vm.gridOptions.api) {
                    vm.gridOptions.api.setRowData([]);
                }
            }

            function selectedPlanChange(){
                //vm._Amount =  (vm.Plans.find(x=>x.Id == vm.Plan).Value/ 100).toFixed(2);
                //vm.Amount =  "R$" + (vm.Plans.find(x=>x.Id == vm.Plan).Value/ 100).toFixed(2);
            }

            function validateCEP() {
                var cep = vm.Address.Cep.replaceAll("-", "").replaceAll("_", "").replaceAll(".", "");
                if(cep.length == 8)
                {
                    FoneclubeService.validateCEP(cep).then(function (data) {
                    if (data != "error") {
                      //vm.address.CEP= cep;
                      vm.Address.Street = data.logradouro;
                      vm.Address.StreetNumber = "";
                      vm.Address.Complement = "";
                      vm.Address.Neighborhood = data.bairro;
                      vm.Address.City = data.localidade;
                      vm.Address.State = data.uf;
                      vm.Address.Cep = cep;
                    }
                    });
                }
            }

            function calculate() 
            {
                var amount = vm.Amount.toString().indexOf('.') > -1 ? parseFloat(vm.Amount) : parseFloat(vm.Amount) / 100;
                vm.Amount = "R$" + parseFloat(amount).toFixed(2);
            }

            function initCardList(customerId) {
                PagarmeService.getCard(customerId)
                  .then(function (result) {
                    vm.cards = result.sort(function (a, b) {
                      return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
                    });
                  })
                  .catch(function (error) {
                    console.log(error);
                    vm.message = 'falha ao recuperar cartão';
                  });
            }

             function onTapCard(card) 
             {
                vm.SelectedCardId = card.id;
                DialogFactory.showMessageDialog({mensagem: "You have selected card ending :" + card.last_digits});
             }

            function ActivateLine()
            {
                if(vm.paymentType == "1" && vm.SelectedCardId == ""){
                    DialogFactory.showMessageDialog({mensagem: "You have not selected any card"});
                    return;
                }
                vm.phones = [];
                if(vm.cartItems != null && vm.cartItems.length > 0)
                {
                   vm.cartItems.forEach(function(cart){
                   var data = {
                            DDD: cart.DDD == undefined || cart.DDD == "" ? 21 : cart.DDD,
                            Number: cart.Contel != "" ||  cart.Contel != undefined ? cart.Contel: "",
                            IdOperator: 4,
                            Activate : vm.IsActivate, 
                            Owner: vm.ParentData.Id,
                            PortDDD: cart.PortDDD  != undefined ? cart.PortDDD : "" ,
                            PortNumber: cart.Port != "" ||  cart.Port != undefined ? cart.Port : "" ,
                            ICCID: cart.ICCID != undefined ? cart.ICCID : "",
                            IdPlanOption: cart.PlanId,
                            ESIM: cart.ESim == "SIM" ? true : false,
                            Amount : cart.Amount,
                        };
                    vm.phones.push(data);
                   });
                }
                console.log(vm.phones);
                
                var client = vm.ParentData.Client;

                if(vm.Charge)
                {
                        var planselectionComment = vm.phones.map((x) => "ICCID: " + x.ICCID + ", Phone: " + x.Number+ ", Plan:" + x.IdPlanOption + ",  Port: " + x.Port).join('\r\n');

                        var planselection =  vm.phones.map((x) => x.ICCID + "|" + x.IdPlanOption + "|" + x.Amount + "|" + x.DDD +
                        "|" + (x.Number != 0 ? x.Number :  "" ) + "|" + x.PortDDD + "|" + (x.PortNumber != 0 ? x.PortNumber : "") + "|" + vm.IsActivate + "|" + vm.Charge + "|" + x.ESIM + "|" + vm.shipmentType).join('#');

                        var requestData = { 
                            Register:{
                                Person : {
                                    CPF : client.CPF.replaceAll(".","").replaceAll("-",""),
                                    CPFType : client.CpfType,
                                    Nome : client.Nome,
                                    WhatsAppNumber: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD + ""+ UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number : vm.WhatsAppNum,
                                    Email: client.Email,
                                    Parent: client.Parent,
                                },
                                CustomerPhone: {
                                    DDD: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD : UtilsService.getPhoneNumberFromStringToJson(vm.WhatsAppNum).DDD,
                                    Number: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number: UtilsService.getPhoneNumberFromStringToJson(vm.WhatsAppNum).Number,
                                    IsFoneclube: false,
                                    LinhaAtiva: true,
                                    ESim : false
                                },
                                Phones: vm.phones,
                                Address: client.Address,
                                IsActivateBeforePayment : vm.IsActivateBeforePayment,
                                ActivationPwd : vm.Senha,
                                ActivationCPF : vm.ActivateCPF.replaceAll(".","").replaceAll("-",""),
                                ShipmentType : vm.shipmentType,
                            },
                            ChargeData : {
                                Comment: client.Comment.replace("planvariable", planselectionComment).replace("amountvariable", vm.Amount),
                                DueDate : moment(client.Vencimento).format("DD/MM/YYYY"),
                                AnoVingencia: client.Vigencia.split(" ")[0],
                                MesVingencia: client.Vigencia.split(" ")[1].trim(),
                                InstaRegsiterData : planselection,
                                PaymentType: parseInt(vm.paymentType),
                                Ammount: vm.Amount.replace('R$','').replace('.',''),
                                CardId : vm.SelectedCardId
                            }
                        };
                        console.log(requestData);
                        var showLoader = DialogFactory.showLoader("Por favor, aguarde");
                        FoneclubeService.saveInstaRegisterClientOrLineWithCharge(requestData).then(function (result1) {
                            showLoader.close();
                            if(result1 == "sucesso")
                                DialogFactory.showMessageDialog({mensagem:'Cliente/Linha registado com sucesso'});
                            else
                                DialogFactory.showMessageDialog({mensagem: result1});
                            });
                   
                }
                else
                {
                            var client = vm.ParentData.Client;
                            var requestData = {
                                Person : {
                                    CPF : client.CPF.replaceAll(".","").replaceAll("-",""),
                                    CPFType : client.CpfType,
                                    Nome : client.Nome,
                                    WhatsAppNumber: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD + ""+ UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number : vm.WhatsAppNum,
                                    Email: client.Email,
                                    Parent: client.Parent,
                                },
                                CustomerPhone: {
                                    DDD: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD : UtilsService.getPhoneNumberFromStringToJson(vm.WhatsAppNum).DDD,
                                    Number: vm.WhatsAppNum == "" ? UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number: UtilsService.getPhoneNumberFromStringToJson(vm.WhatsAppNum).Number,
                                    IsFoneclube: false,
                                    LinhaAtiva: true,
                                    ESim : false
                                },
                                Phones: vm.phones,
                                Address: vm.Address,
                                IsActivateBeforePayment : vm.IsActivateBeforePayment,
                                ActivationPwd : vm.Senha,
                                ActivationCPF : vm.ActivateCPF.replaceAll(".","").replaceAll("-",""),
                                ShipmentType : vm.shipmentType,
                            };
                             console.log(requestData);
                            var showLoader = DialogFactory.showLoader("Por favor, aguarde");
                            FoneclubeService.saveInstaRegisterClientOrLine(requestData).then(function (result1) {
                                showLoader.close();
                                if(result1 == "sucesso")
                                    DialogFactory.showMessageDialog({mensagem:'Cliente/Linha registado com sucesso'});
                                else
                                    DialogFactory.showMessageDialog({mensagem: result1});
                            });
                        
                   }
               
            }
        }
         InstaAddNewLineController.inject = ['$scope', 'ViewModelUtilsService', 'PagarmeService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];
})();

           
(function() {
    'use strict';

        angular
            .module('foneClub')
            .controller('InstaChargeConfirmation', InstaChargeConfirmation);


            InstaChargeConfirmation.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

        function InstaChargeConfirmation(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, $filter, localStorageService) {

            var vm = this;
            vm.ParentData = ViewModelUtilsService.modalData;
            vm.Senha = "";
            vm.ActivateDDD = "";
            vm.ActivateCPF = "";
            vm.Message = "";
            vm.MessageAddress = "";
            vm.IsActivate = false;
            vm.amounts = {};
            vm.plans = [];
            vm.Amount = 0;
            vm.shipmentType = 2;
            vm.paymentType = 3;
            vm.index = 1;
            vm.phones = [];
            vm.showCharge = false;

            vm.updatePrice = updatePrice;
            vm.updateShipment = updateShipment;
            vm.registerAndChargeClient = registerAndChargeClient;
            vm.registerClientLine = registerClientLine;

            init();

            function init(){
                vm.phones = [];

                var msg = "<div class='row'>Você adicionou as linhas abaixo, clique em confirmar para salvar</div>";
                var msgPhone = "<div class='row'>";
                var phones = [];
                var filterNewRows = vm.ParentData.Selected;
                for(var i=0; i < filterNewRows.length; i++)
                {
                    msgPhone += "<div class='col-md-4'>Contel: " + filterNewRows[i].Contel + "<br/>Port: " + filterNewRows[i].Port + "<br/>ICCID: " + filterNewRows[i].ICCID + '<br/>Plano: ' + filterNewRows[i].PrecoFC + "<br/>Plano: " + "R$" + (filterNewRows[i].VIPPrice.replace("R$","").replace(".","")/100).toFixed(2) + "<br/>eSIM: " + filterNewRows[i].ESim + "<br/></div>"; 
                    var plan = vm.ParentData.Plans.find(x=>x.Description == filterNewRows[i].PrecoFC);
                    var data = {
                        DDD: filterNewRows[i].Contel != null ? filterNewRows[i].Contel.substr(0,2) : 0,
                        Number: filterNewRows[i].Contel != null ? filterNewRows[i].Contel.substr(2) : 0,
                        IdOperator: plan.IdOperator,
                        Owner: vm.ParentData.Id,
                        PortNumber: filterNewRows[i].Port != null ? filterNewRows[i].Port : "",
                        NickName:  filterNewRows[i].NickName,
                        ICCID: filterNewRows[i].ICCID,
                        IdPlanOption: plan.Id,
                        AmmountPrecoVip: filterNewRows[i].VIPPrice
                    };
                    vm.phones.push(data);
                    vm.ActivateCPF = vm.ParentData.Client.CPF;

                    if(vm.ParentData.IsCharge)
                    {
                        updatePrice(plan.Id, i, data.AmmountPrecoVip);
                        vm.showCharge = true;
                    }
                }
                
                 vm.Message = msg + msgPhone + "</div>";
                 
                 vm.MessageAddress += "<div>" ;
                 vm.MessageAddress += "<span style='color:red'>Shipment Address:</span><br/>" ;
                 vm.MessageAddress += "CEP: " + vm.ParentData.Client.Address.Cep + "<br />"
                 vm.MessageAddress += "StreetNumber: " + vm.ParentData.Client.Address.StreetNumber + "<br />"
                 vm.MessageAddress += "Street: " + vm.ParentData.Client.Address.Street + "<br />"
                 vm.MessageAddress += "Complement: " + vm.ParentData.Client.Address.Complement + "<br />"
                 vm.MessageAddress += "Neighborhood: " + vm.ParentData.Client.Address.Neighborhood + "<br />"
                 vm.MessageAddress += "City: " + vm.ParentData.Client.Address.City + "<br />"
                 vm.MessageAddress += "State: "  + vm.ParentData.Client.Address.State + "<br />"
                 vm.MessageAddress += "</div>" ;
            }

            function registerClientLine()
            {
                if(vm.ActivateDDD == "")
                {
                    DialogFactory.showMessageDialog({mensagem:'É obrigatório informar DDD do SIM card (chip) a ser ativado.'});
                }
                else{   
                var client = vm.ParentData.Client;
                var requestData = {
                    Person : {
                        CPF : client.CPF.replaceAll(".","").replaceAll("-",""),
                        CPFType : client.CpfType,
                        Nome : client.Nome,
                        WhatsAppNumber: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD + ""+ UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number,
                        Email: client.Email,
                        Parent: client.Parent,
                    },
                    CustomerPhone: {
                        DDD: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD,
                        Number: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number,
                        IsFoneclube: false,
                        LinhaAtiva: true,
                        ESim : false
                    },
                    Phones: vm.phones,
                    Address: client.Address,
                    IsActivate : vm.IsActivate,
                    ActivationPwd : vm.Senha,
                    ActivationDDD : vm.ActivateDDD,
                    ActivationCPF : vm.ActivateCPF.replaceAll(".","").replaceAll("-",""),
                };
                // var showLoader = DialogFactory.showLoader("Por favor, aguarde");
                // FoneclubeService.saveInstaRegisterClientOrLine(requestData).then(function (result1) {
                //     showLoader.close();
                //     if(result1 == "sucesso")
                //         DialogFactory.showMessageDialog({mensagem:'Cliente/Linha registado com sucesso'});
                //     else
                //         DialogFactory.showMessageDialog({mensagem: result1});
                // });
                }
            }

            function registerAndChargeClient()
            {
                debugger;
                if(vm.ActivateDDD == "")
                {
                    DialogFactory.showMessageDialog({mensagem:'É obrigatório informar DDD do SIM card (chip) a ser ativado.'});
                }
                else{ 
                var client = vm.ParentData.Client;
                var planselectionComment = vm.ParentData.Selected.map((x) => "ICCID: " + x.ICCID + ", Phone: " + x.Contel + ", Plan:" + x.PrecoFC + ",  Port: " + x.Port).join('\r\n');

                var planselection = vm.phones.map((x) => x.ICCID + "|" + x.IdPlanOption + "|" + x.AmmountPrecoVip + "|" + (x.DDD ? x.DDD : "") + "" + (x.Number ? x.Number : "") + "|" +  (x.PortNumber != 0 ? UtilsService.getPhoneNumberFromStringToJson(x.PortNumber).DDD : "" + "|" + x.PortNumber != 0 ? UtilsService.getPhoneNumberFromStringToJson(x.PortNumber).Number : "")).join('#');

                var requestData = {
                        Register:{
                            Person : {
                                CPF : client.CPF.replaceAll(".","").replaceAll("-",""),
                                CPFType : client.CpfType,
                                Nome : client.Nome,
                                WhatsAppNumber: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD + ""+ UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number,
                                Email: client.Email,
                                Parent: client.Parent,
                            },
                            CustomerPhone: {
                                DDD: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).DDD,
                                Number: UtilsService.getPhoneNumberFromStringToJson(client.WhatsAppNumber).Number,
                                IsFoneclube: false,
                                LinhaAtiva: true,
                                ESim : false
                            },
                            Phones: vm.phones,
                            Address: client.Address,
                            IsActivate : vm.IsActivate,
                            ActivationPwd : vm.Senha,
                            ActivationDDD : vm.ActivateDDD,
                            ActivationCPF : vm.ActivateCPF.replaceAll(".","").replaceAll("-",""),
                        },
                        Charge : {
                            Comment: client.Comment.replace("planvariable", planselectionComment).replace("amountvariable", vm.Amount),
                            DueDate : moment(client.Vencimento).format("DD/MM/YYYY"),
                            AnoVingencia: client.Vigencia.split(" ")[0],
                            MesVingencia: client.Vigencia.split(" ")[1].trim(),
                            InstaRegsiterData : planselection,
                            PaymentType: parseInt(vm.paymentType),
                        }
                    };
                    // var showLoader = DialogFactory.showLoader("Por favor, aguarde");
                    // FoneclubeService.saveInstaRegisterClientOrLineWithCharge(requestData).then(function (result1) {
                    //     showLoader.close();
                    //     if(result1 == "sucesso")
                    //         DialogFactory.showMessageDialog({mensagem:'Cliente/Linha registado com sucesso'});
                    //     else
                    //         DialogFactory.showMessageDialog({mensagem: result1});
                    //     });
                    }
            }

            function updatePrice(index, id, amount){
                var amount = amount / 100;
                vm.amounts[id] = amount;
                var totalAmount = Object.values(vm.amounts).reduce((a, b) => a + b);
                vm.Amount =  "R$" + totalAmount.toFixed(2);
                updateShipment();
            }

            function updateShipment(){
                if(Object.values(vm.amounts).length > 0)
                {
                    var totalCount = Object.values(vm.amounts).length * 7;
                    var totalAmount = Object.values(vm.amounts).reduce((a, b) => a + b);
                    if(vm.shipmentType == 1){
                        vm.Amount =  "R$" + ((totalAmount + totalCount + 8)).toFixed(2);
                    }
                    else if(vm.shipmentType == 2){
                        vm.Amount =  "R$" + ((totalAmount + totalCount)).toFixed(2);
                    }
                }
            }
        }
})();
(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('InstaChargeController', InstaChargeController);


  InstaChargeController.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

  function InstaChargeController(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, localStorageService, $filter) {
    var vm = this;
    vm.validateCPF = validateCPF;
    vm.validateCEP = validateCEP;
    vm.saveClientDetails = saveClientDetails;
    vm.clearSelectedName = clearSelectedName;
    var customer = ViewModelUtilsService.modalBoletoData;
    vm.chargeForm = {};
    vm.isMobile = UtilsService.mobileCheck();
    vm.address = {};
    vm.Phones = [];
    vm.customer = customer;
    vm.chargeForm.Vencimento = moment().subtract(1, 'day').format("DD MMMM YYYY");
    vm.chargeForm.Vigencia = moment().subtract(1, 'day').format("YYYY MM");
    vm.chargeForm.CpfType = 0;
    vm.chargeForm.CPF = "";
    vm.chargeForm.Id = 0;
    vm.chargeForm.Nome = "";
    vm.chargeForm.CountryCode = "55"
    vm.chargeForm.WhatsAppNumber= "";
    vm.chargeForm.Email = "";
    vm.chargeForm.IsPix = true;
    vm.chargeForm.IsCC = false;
    vm.chargeForm.ICCID = "";
    vm.chargeForm.Amount = 0;
    vm.chargeForm.Plano = "";
    vm.chargeForm.Portar = "";
    vm.chargeForm.Use2Prices = false;
    vm.chargeForm.IsVIP = false;
    vm.chargeForm.Referral = "";
    vm.validWhatsApp = "";
    vm.chargeForm.ExistingClient = "";
    vm.defaultComment = `Prezado *|namevariable|*,

planvariable

Vigencia: *|vigenciavariable|*
Vencimento: *|vigenciavariable|*
Total: *amountvariable*`;

    vm.chargeForm.Comment = vm.defaultComment;
    vm.chargeForm.Vencimento = moment().subtract(1, 'day').format("DD MMMM YYYY");
    vm.chargeForm.Vigencia = moment().subtract(1, 'day').format("YYYY MM");
    vm.ErrCPF = false;
    vm.ErrNome = false;
    vm.ErrAddress = false;
    vm.ErrWhatsAppNumber = false;
    vm.ErrValor = false;
    vm.ErrInvalidCPF = true;
    vm.customer = customer;
    vm.replaceIndex = 0;
    vm.chargeForm.ParentCPF = "";
    vm.chargeForm.ParentNome = "";
    vm.chargeForm.ParentWhatsAppNumber = "";
    vm.validWhatsAppParent = "";
    vm.ErrInvalidParentCPF = true;
    vm.IdPagarme = 0;
    vm.plans = [];

    vm.isParentSelected = true;
    vm.parentNames = [];
    vm.selectedParent = null;

    vm.isCustomerSelected = true;
    vm.customerNames = [];

    vm.validateCPF = validateCPF;
    vm.validateForm = validateForm;
    vm.updateVariable = updateVariable;
    vm.updatePrice = updatePrice;
    vm.validateParentCPF = validateParentCPF;
    vm.selectAndChargePlans = selectAndChargePlans;
    vm.sendWelcomeWhatsApp = sendWelcomeWhatsApp;
    vm.sendWelcomeWhatsAppParent = sendWelcomeWhatsAppParent;
    vm.selectParentItem = selectParentItem;
    vm.setSelectedParentName = setSelectedParentName;
    vm.confirmDados = confirmDados;
    vm.selectCustomerItem = selectCustomerItem;
    vm.setSelectedCustomerName = setSelectedCustomerName;
    vm.registerNewClient = registerNewClient;
    vm.copyToClipboard = copyToClipboard


    init();

    function init() {
      var showLoader1 = DialogFactory.showLoader("aguarde enquanto buscamos os dados");
      FoneclubeService.getPlans().then(function (result) {
        vm.plans = result.filter(x => x.IdOperator != 1).sort((a, b) => (a.IdOperator > b.IdOperator) ? -1 : ((b.IdOperator > a.IdOperator) ? 1 : 0));
      });

      FoneclubeService.getAllCustomersMinimal().then(function (result) {
        vm.parentNames = result;
        vm.customerNames = result;
        showLoader1.close();
      });
    }

    function selectParentItem(val) {
      vm.isParentSelected = val;
    }

    function selectCustomerItem(val) {
      vm.isCustomerSelected = val;
      vm.chargeForm.ExistingClient = "";
    }

    function setSelectedParentName(item) {
      console.log(item);
      vm.isParentSelected = true;
      vm.selectedParent = item;
      vm.chargeForm.ParentCPF = item.DocumentNumber;
      vm.chargeForm.ParentNome = item.Name;
      vm.chargeForm.ParentWhatsAppNumber = item.Telefone;
    }

    function clearSelectedName() {
      vm.chargeForm.Id = 0;
      vm.chargeForm.CPF = "";
      vm.chargeForm.Nome = "";
      vm.chargeForm.Email = "";
      vm.chargeForm.WhatsAppNumber = "";
      vm.chargeForm.Address = {};
      vm.validWhatsApp = "";
    }

    function setSelectedCustomerName(item) {
      console.log(item);
      vm.isCustomerSelected = true;
      vm.chargeForm.Id = item.Id;
      vm.chargeForm.CPF = item.DocumentNumber;
      vm.chargeForm.Nome = item.Name;
      vm.chargeForm.Email = item.Email;

      var contactPhone = item.Phones.filter(x => x.IsFoneclube == false);
      if(contactPhone != undefined && contactPhone != null && contactPhone.length > 0){
        vm.chargeForm.CountryCode = contactPhone[0].CountryCode;
        vm.chargeForm.WhatsAppNumber = '(' + contactPhone[0].DDD + ') ' + contactPhone[0].Number.toString().substr(0, 5) + '-' + contactPhone[0].Number.toString().substr(5);
      }
      else{
        if(item.Telefone != null)
        {
          vm.chargeForm.CountryCode = item.Telefone.substr(0, 2) == "55" ? "55" : item.Telefone.substr(0, 2);
          vm.chargeForm.WhatsAppNumber = item.Telefone.substr(0, 2) == "55" || item.Telefone.length > 10 ? item.Telefone.substr(2): item.Telefone;
        }
      }
      vm.chargeForm.Address = item.Address;
      vm.chargeForm.Use2Prices = item.Use2Prices;
      vm.chargeForm.IsVIP = item.IsVIP;
      vm.chargeForm.Referral = item.Referral;
      vm.Phones = item.Phones;
      vm.Pai = item.Pai;
      vm.IdPagarme = item.IdPagarme;
      validateForm();
    }

    var updateClient = document.querySelector('#update_client_details')
    var registerClient = document.querySelector('#register_client')
    var selectPlans = document.querySelector('#select_plans')



    // var input = document.querySelector("#phone");

    // window.intlTelInput(input, {
    //   initialCountry: "BR",

    // });

    // var input1 = document.querySelector("#phone1");

    // window.intlTelInput(input1, {
    //   initialCountry: "BR",
    // });

    function copyToClipboard() {
      var valor = document.querySelector('button[data-valor]').getAttribute('data-valor');
      var copyText = document.createElement('textarea');
      copyText.value = valor;
      document.body.appendChild(copyText);
      copyText.select();
      document.execCommand('copy');
      document.body.removeChild(copyText);
      alert('Link copiado para a área de transferência!');
    };


    function validateCPF() {
      vm.ErrInvalidCPF = true;
      vm.isCustomerSelected = true;
      var cpf = vm.chargeForm.CPF.replaceAll(".", "").replaceAll("-", "").replaceAll("/", "");
      if (cpf.length > 10) {
        FoneclubeService.getCustomerByCPF(cpf).then(function (cpfResult) {
          if (cpfResult != null && cpfResult.Id != 0) {
            vm.chargeForm.Id = cpfResult.Id;
            vm.chargeForm.Nome = cpfResult.Name;
            vm.chargeForm.Email = cpfResult.Email;
            vm.chargeForm.ExistingClient = "Cliente existente";
            vm.chargeForm.Use2Prices = cpfResult.Use2Prices;
            vm.chargeForm.IsVIP = cpfResult.IsVIP;
            vm.chargeForm.Address = cpfResult.Adresses[0];
            var contactPhone = cpfResult.Phones.filter(x => x.IsFoneclube == false);
            vm.Phones = cpfResult.Phones;
            vm.Pai = cpfResult.Pai;
            vm.chargeForm.CountryCode = contactPhone[0].CountryCode;
            vm.chargeForm.WhatsAppNumber = '(' + contactPhone[0].DDD + ') ' + contactPhone[0].Number.toString().substr(0, 5) + '-' + contactPhone[0].Number.toString().substr(5);


            updateVariable();
            validateForm();
          }
          else {
            FoneclubeService.validateCPF(cpf).then(function (result) {
              console.log(result);
              if (result != null && result.status == 400) {
                vm.ErrInvalidCPF = false;
                //vm.chargeForm.Nome = "";
                //vm.chargeForm.CPF = "";
                vm.chargeForm.ExistingClient = "";
              }
              else {
                vm.ErrInvalidCPF = true;
                vm.chargeForm.Nome = vm.chargeForm.Nome != "" ? vm.chargeForm.Nome : result.nome;
                vm.chargeForm.ExistingClient = "";

                vm.chargeForm.Address.Street = "";
                vm.chargeForm.Address.StreetNumber = "";
                vm.chargeForm.Address.Complement = "";
                vm.chargeForm.Address.Neighborhood = "";
                vm.chargeForm.Address.City = "";
                vm.chargeForm.Address.State = "";
                vm.chargeForm.Address.Cep = "";

                updateVariable();
              }
            })
          }
        });
      }
    }

    function validateForm() {
      vm.ErrInvalidCPF = true;
      vm.ErrAddress = true;
      vm.ErrCPF = false;
      vm.ErrNome = false;
      vm.ErrWhatsAppNumber = false;
      vm.ErrValor = false;
      var error = false;
      vm.validWhatsApp = "";

      if (vm.chargeForm.CPF == undefined || vm.chargeForm.CPF == "") {
        vm.ErrCPF = true;
        error = true;
      }
      if (vm.chargeForm.CPF.length < 10) {
        vm.ErrInvalidCPF = false;
        error = true;
      }
      if (vm.chargeForm.Nome == undefined || vm.chargeForm.Nome == "") {
        vm.ErrNome = true;
        error = true;
      }
      
      if (vm.chargeForm.WhatsAppNumber == undefined || vm.chargeForm.WhatsAppNumber == "") {
        vm.ErrWhatsAppNumber = true;
        error = true;
      }
      else
      {
        if (vm.chargeForm.WhatsAppNumber.length > 10 && vm.chargeForm.WhatsAppNumber.startsWith("55")) {
          vm.chargeForm.WhatsAppNumber = vm.chargeForm.WhatsAppNumber.slice(2);
        }
      }

      updateVariable();
      sendWelcomeWhatsApp();

      return error;
    }

    function sendWelcomeWhatsApp() {
      if (vm.chargeForm.WhatsAppNumber != undefined && vm.chargeForm.WhatsAppNumber != "") {
        var number = vm.chargeForm.CountryCode + UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.WhatsAppNumber).DDD + UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.WhatsAppNumber).Number;
        FoneclubeService.validatePhoneForWA(number).then(function (result) {
          var validNumbers = result.split('|')[0];
          var invalidNumbers = result.split('|')[1];
          if (validNumbers) {
            vm.validWhatsApp = "Número do WhatsApp válido";
          }
          else {
            vm.validWhatsApp = "Número do WhatsApp inválido";
          }
        });
      }
    }

    function updateVariable() {
      if (vm.chargeForm.Comment != undefined) {
        vm.replaceIndex = 0;
        vm.chargeForm.Comment = vm.chargeForm.Comment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
        vm.replaceIndex = 0;
      }
    }

    function autoRepalceText(match, start, changeValue, end, offset, string) {
      var resStr = "";
      if (vm.replaceIndex == 0) {
        resStr = vm.chargeForm.Nome == "" ? "namevariable" : vm.chargeForm.Nome;
      }
      if (vm.replaceIndex == 1) {
        resStr = vm.chargeForm.Vigencia;
      }
      if (vm.replaceIndex == 2) {
        resStr = vm.chargeForm.Vencimento;
      }
      vm.replaceIndex++;

      return start + resStr + end;
    }

    function updatePrice(index) {
      var amount = vm.plans.find(x => x.Id == index).Value / 100;
      vm.chargeForm.Amount = "R$" + amount.toFixed(2);
    }
    function validateCEP() {
      var cep = vm.chargeForm.Address.Cep.replaceAll("-", "").replaceAll("_", "").replaceAll(".", "");
      if(cep.length == 8){
      FoneclubeService.validateCEP(cep).then(function (data) {
        if (data != "error") {
          //vm.address.CEP= cep;
          vm.chargeForm.Address.Street = data.logradouro;
          vm.chargeForm.Address.StreetNumber = "";
          vm.chargeForm.Address.Complement = "";
          vm.chargeForm.Address.Neighborhood = data.bairro;
          vm.chargeForm.Address.City = data.localidade;
          vm.chargeForm.Address.State = data.uf;
          vm.chargeForm.Address.Cep = cep;
        }
      });
    }
    }
    function selectAndChargePlans() {
      selectPlans.disabled = true;
      var error = validateForm();
      if (!error) {
        if (vm.chargeForm.Address == undefined || vm.chargeForm.Address == {} || vm.chargeForm.Address.Street == "" || vm.chargeForm.Address.Cep == "" || vm.chargeForm.Address.StreetNumber == ""  || vm.chargeForm.Address.City == ""  || vm.chargeForm.Address.State == "" ) {
          DialogFactory.showMessageDialog({ mensagem: 'Please fill all address fields' });
          selectPlans.disabled = false;
          return;
        }

        var data = JSON.parse(JSON.stringify(vm.chargeForm));
        if (vm.chargeForm.ParentCPF != '' && vm.chargeForm.ParentNome != '' && vm.chargeForm.ParentWhatsAppNumber != '') {
          data.Parent = {
            ParentId: vm.selectedParent == null ? -1 : vm.selectedParent.Id,
            Name: vm.chargeForm.ParentNome,
            WhatsAppNumber: UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.ParentWhatsAppNumber).DDD + UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.ParentWhatsAppNumber).Number,
            CPF: vm.chargeForm.ParentCPF,
            Address: vm.chargeForm.Address
          };
          selectPlans.disabled = false
        }
        else
          data.Parent = null;

        data.Phones = vm.Phones;
        data.Parent = vm.Pai;
        data.IdPagarme = vm.IdPagarme;
        ViewModelUtilsService.showPlanSelectionModal(data);
        selectPlans.disabled = false;
      }
      else{
        selectPlans.disabled = false;
      }
    }


    function sendWelcomeWhatsAppParent() {

    }

    function validateParentCPF() {
      vm.ErrInvalidParentCPF = true;
      var cpf = vm.chargeForm.ParentCPF.replaceAll(".", "").replaceAll("-", "").replaceAll("/", "");
      if (cpf.length > 10) {
        FoneclubeService.getCustomerByCPF(cpf).then(function (cpfResult) {
          if (cpfResult != null && cpfResult.Id != 0) {
            vm.chargeForm.ParentNome = cpfResult.Name;
            var contactPhone = cpfResult.Phones.filter(x => x.IsFoneclube == false);
            vm.chargeForm.ParentWhatsAppNumber = '(' + contactPhone[0].DDD + ') ' + contactPhone[0].Number.toString().substr(0, 5) + '-' + contactPhone[0].Number.toString().substr(5)
          }
          else {
            FoneclubeService.validateCPF(cpf).then(function (result) {
              console.log(result);
              if (result != null && result.status == 400) {
                vm.ErrInvalidParentCPF = false;
                vm.chargeForm.ParentNome = "";
                vm.chargeForm.ParentCPF = "";
              }
              else {
                vm.ErrInvalidParentCPF = true;
                vm.chargeForm.ParentNome = result.nome;
              }
            })
          }
        });
      }
    }

    function confirmDados() {
      if (vm.chargeForm.ParentCPF != undefined && vm.chargeForm.ParentNome != undefined && vm.chargeForm.ParentWhatsAppNumber != undefined) {
        var parentdata = {
          ParentId: vm.selectedParent == null ? -1 : vm.selectedParent.Id,
          Name: vm.chargeForm.ParentNome,
          WhatsAppNumber: UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.ParentWhatsAppNumber).DDD + UtilsService.getPhoneNumberFromStringToJson(vm.chargeForm.ParentWhatsAppNumber).Number,
          CPF: vm.chargeForm.ParentCPF,
        };
        FoneclubeService.postInstaCustomerParent(parentdata).then(function (result) {
          alert("Parent data saved successfully");
        });
      }
    }


    function registerNewClient() {
      registerClient.disabled = true;
      var cpf = vm.chargeForm.CPF.replaceAll(".", "").replaceAll("-", "").replaceAll("/", "");
      if (cpf.length > 10) {
        FoneclubeService.getCustomerByCPF(cpf).then(function (cpfResult) {
          registerClient.disabled = false;
          if (cpfResult != null && cpfResult.Id != 0) {
            DialogFactory.showMessageDialog({ mensagem: 'Usuario já existe em FoneClube' });
          }
          else {
            var phone = UtilsService.clearPhoneNumber(vm.chargeForm.WhatsAppNumber);
            var person = {
              Name: vm.chargeForm.Nome == "" ? vm.chargeForm.CPF : vm.chargeForm.Nome,
              Email: vm.chargeForm.Email == "" ? phone + "@foneclube.com.br" : vm.chargeForm.Email,
              DocumentNumber: cpf,
              IntlPhone: {
                CountryCode : vm.chargeForm.CountryCode,
                Phone: phone
              }
            };
            FoneclubeService.saveInstaRegisterClient(person).then(function (res) {
              if (res) {
                DialogFactory.showMessageDialog({ mensagem: 'Usuario cadastrado com sucesso' });
              }
              registerClient.disabled = false;
            });
          }
        });
      }
      else
      {
        registerClient.disabled = false;
        DialogFactory.showMessageDialog({ mensagem: 'Invalid CPF' });
      }
    }

    function saveClientDetails() {
      updateClient.disabled = true;
      var phone = UtilsService.clearPhoneNumber(vm.chargeForm.WhatsAppNumber);

      var cpf = vm.chargeForm.CPF.replaceAll(".", "").replaceAll("-", "").replaceAll("/", "");
      var saveData = {
        Id: vm.chargeForm.Id,
        Name: vm.chargeForm.Nome,
        Email: vm.chargeForm.Email,
        DocumentNumber: cpf,
        Address: vm.chargeForm.Address,
        IntlPhone: {
                CountryCode : vm.chargeForm.CountryCode,
                Phone: phone
              },
        ParentId: vm.selectedParent == null ? -1 : vm.selectedParent.Id,
      };
      var showLoader = DialogFactory.showLoader("Aguarde enquanto atualizamos os detalhes do cliente");
      FoneclubeService.updateInstaEditClient(saveData).then(function (res) {
        showLoader.close();
        if (res > 0) {
          DialogFactory.showMessageDialog({ mensagem: 'Dados atualizados com sucesso' });
        }
        else {
          DialogFactory.showMessageDialog({ mensagem: 'Erro ocorreu ao atualizar os dados do cliente:' + vm.chargeForm.Nome });
        }
        updateClient.disabled = false;

      }, function (error) {
        showLoader.close();
        updateClient.disabled = false;
        DialogFactory.showMessageDialog({ mensagem: 'Erro ocorreu ao atualizar os dados do cliente:' + vm.chargeForm.Nome });
      });
    }



  }
})();

(function () {

  angular
    .module('foneClub')
    .controller('SelectPlanoModalController', SelectPlanoModalController);


  SelectPlanoModalController.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

  function SelectPlanoModalController(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, $filter, localStorageService) {

    var vm = this;
    vm.Message = 0;
    vm.PhoneLines = [];
    vm.ParentData = ViewModelUtilsService.modalData;
    vm.Invitation = "";
    vm.CustomeName = "";
    vm.CustomerPhone = "";
    vm.CpfType = 0;
    vm.CustomeCPF = "";
    vm.CustomeEmail = "";
    vm.originalRows = [];
    vm.agGridStates = ["All"];
    vm.defaultGridState = {};
    vm.gridHeight = 50;
    vm.phones = [];
    vm.plans = [];
    vm.plansDes = [];
    vm.address = {};
    vm.showAlert = {};
    vm.isParentSelected = true;
    vm.SoftDelete = false;
    vm.parentNames = [];
    vm.selectedParent = null;
    vm.copyToClipboard = copyToClipboard
    vm.saveNewLinesToExistingCustomer = saveNewLinesToExistingCustomer;
    vm.saveClientAndLine = saveClientAndLine;
    vm.saveClientAndLineWithCharge = saveClientAndLineWithCharge;
    vm.addNewLineRow = addNewLineRow;
    vm.saveUserSettings = saveUserSettings;
    vm.exportToExcel = exportToExcel;
    vm.setSelectedParentName = setSelectedParentName;
    vm.selectParentItem = selectParentItem;
    vm.UpdateActiveStatus = UpdateActiveStatus;
    vm.OpenChargeHistory = OpenChargeHistory;
    vm.OpenTopup = OpenTopup;
    vm.OpenTopupHistory = OpenTopupHistory;
    vm.OpenWhatsApp = OpenWhatsApp;
    vm.refreshPhones = refreshPhones;
    vm.onQuickFilterChanged = onQuickFilterChanged;
    vm.clearFilter = clearFilter;
    vm.getAgGridState = getAgGridState;
    vm.saveState = saveState;
    vm.deleteState = deleteState;
    vm.updateState = updateState;
    vm.onlyActive = onlyActive;
    vm.addNewLinePopup = addNewLinePopup;

    const filterParamsNumber = {
      filterOptions: [
        {
          displayKey: 'largerThan',
          displayName: 'Larger than',
          test: function (filterValue, cellValue) {
            cellValue = cellValue.replace(" GB").replace("R$", "").replace("OFF", "");
            return parseInt(cellValue) > parseInt(filterValue);
          }
        },
        {
          displayKey: 'smallerThan',
          displayName: 'Smaller than',
          test: function (filterValue, cellValue) {
            cellValue = cellValue.replace(" GB").replace("R$", "").replace("OFF", "");
            return parseInt(cellValue) < parseInt(filterValue);
          }
        },
        'equals',
        'notEqual'
      ]
    };

    var filterDateParams = {
      comparator: function (filterLocalDateAtMidnight, cellValue) {
        var dateAsString = new Date(cellValue);
        if (dateAsString == null) return -1;

        if (dateAsString < filterLocalDateAtMidnight) {
          return -1;
        }

        if (dateAsString > filterLocalDateAtMidnight) {
          return 1;
        }
      },
      browserDatePicker: true,
      minValidYear: 2000,
      filterOptions: [
        'lessThan',
        {
          displayKey: 'lessThanWithNulls',
          displayName: 'Less Than with Nulls',
          predicate: ([filterValue], cellValue) => cellValue == null || cellValue < filterValue,
        },
        'greaterThan',
        {
          displayKey: 'greaterThanWithNulls',
          displayName: 'Greater Than with Nulls',
          predicate: ([filterValue], cellValue) => cellValue == null || cellValue > filterValue,
        },
        {
          displayKey: 'betweenExclusive',
          displayName: 'Between (Exclusive)',
          predicate: ([fv1, fv2], cellValue) => cellValue == null || fv1 < cellValue && fv2 > cellValue,
          numberOfInputs: 2,
        }
      ]
    };

    const customNumberComparator = (valueA, valueB) => {
      valueA = valueA ? valueA.toString() : "";
      valueB = valueB ? valueB.toString() : "";
      valueA = (valueA == null || valueA == "" || valueA == "OFF") ? "-1" : valueA.replace(" GB", "").replace(",", "").replace("R$", "");
      valueB = (valueB == null || valueB == "" || valueB == "OFF") ? "-1" : valueB.replace(" GB", "").replace(",", "").replace("R$", "");
      if (parseInt(valueA) == parseInt(valueB)) return 0;
      return (parseInt(valueA) > parseInt(valueB)) ? 1 : -1;
    };

    vm.gridOptions = {
      columnDefs: [
        { field: 'Id', hide: true },
        { field: 'Mode', hide: true },
        {
          field: 'TopUpHistory',
          headerName: 'Top Up Hst',
          width: 60,
          cellRenderer: function (params) {
            var cellHtml = '<a ng-click="vm.openTopupPopup(' + params.node.data.Contel + ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup-history.png" /></a>';
            return cellHtml;
          },
          onCellClicked: function (params) {
            var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos o histórico de recarga.");
            FoneclubeService.getTopupHistory(params.node.data.Contel).then(function (result) {
              showLoader.close();
              if (result != null && result.Person != null) {
                ViewModelUtilsService.showModalPhoneTopUpHistoryTemplate(result);
              }
              else {
                alert('A linha selecionada não é um contel');
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        },
        {
          field: 'TopUp',
          headerName: 'Top Up', width: 60,
          cellRenderer: function (params) {
            var cellHtml = '<a ng-click="vm.openTopupPopup(' + params.node.data.Contel + ')" ><img class="imgWhatsapp link" style="max-width:20px;margin:10px 5px" src="content/img/topup.png" /></a>';
            return cellHtml;
          },
          onCellClicked: function (params) {
            var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos as informações da linha.");
            FoneclubeService.getContelDetailByPhone(params.node.data.Contel).then(function (result) {
              showLoader.close();
              if (result != null) {
                var resultData = {
                  result: result,
                  plans: JSON.parse(sessionStorage.getItem('contelplans') == null ? null : sessionStorage.getItem('contelplans'))
                };
                ViewModelUtilsService.showModalPhoneTopUpTemplate(resultData);
              }
              else {
                alert('A linha selecionada não é um contel');
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        },
        {
          field: 'ContelBlockStatus',
          headerName: 'Contel Status',
          width: 80,
          cellRenderer: function (params) {
            if (params.value == "A") {
              return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ', \'' + params.node.data.Nome_FC + '\')" title="Ativa"  href="javascript:void(0);"><img class="imgUsd link" style="max-width:16px; alt="Ativa" margin-top:10px" src="content/img/phone-green.png" /></a>';
            } else if (params.value == "B") {
              return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ',\'' + params.node.data.Nome_FC + '\')" title="Bloqueada"  style=""><img class="imgUsd link" style="max-width:16px; margin-top:10px" src="content/img/phone-red.png" /></a>';
            }
            else if (params.value == "C") {
              return '<a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', ' + params.node.id + ',\'' + params.node.data.Nome_FC + '\')" title="Cancelada"  style=""><img class="imgUsd link" style="max-width:16px; alt="Cancelada" margin-top:10px" src="content/img/phone-black.png" /></a>';
            }
            else {
              return '<div class="circle_red"><a ng-click="vm.BlockUnlockLine(\'' + params.value + '\', ' + params.node.data.IdPerson + ', \'' + params.node.data.Nome_FC + '\')" href="javascript:void(0);" title="Outras Operadoras" /></div>';
            }

          },
          onCellClicked: function (params) {
            if (params.node.data.ContelStatus != "CANCELADO") {
              BlockUnlockLine(params.value, params.node.data.IdPerson, params.node.id, params.node.data.Nome_FC, params.node.data.PhoneNumber);
            }
          }
        },
        {
          field: 'Contel', headerName: 'Contel', width: 150, cellEditor: NumericEditor,
          valueGetter: (params) => {
            var phone = UtilsService.clearPhoneNumber(params.data.Contel);
            var rowData = GetGridData();
            var filterRow = rowData.find(x => x.ActionId == params.node.data.ActionId);
            filterRow.Contel = phone;
            return phone != "" ? parseInt(phone) : "";
          },
          onCellValueChanged: (params) => {
            var rowData = GetGridData();
            var filterRow = rowData.find(x => x.ActionId == params.node.data.ActionId);
            filterRow.Contel = params.newValue;
            vm.gridOptions.api.updateRowData({ update: [filterRow] });
            vm.gridOptions.api.refreshCells({ columns: ["Contel"] });
            vm.gridOptions.api.stopEditing();
          },
          editable: true,
        },
        { field: 'Port', headerName: 'Portar', width: 150, editable: true, cellEditor: NumericEditor },
        {
          field: 'ICCID', headerName: 'ICCID', width: 180, editable: true, cellEditor: NumericEditor,
          onCellValueChanged: (params) => {
            if (params.newValue != undefined && params.newValue.length == 19) {
              FoneclubeService.validateICCID(params.newValue).then(function (data) {
                if (data != null) {
                  if (data.retorno) {
                    if (data.info != null) {
                      vm.currentPlan = data.info.plano_nome;
                      vm.Message = 1;
                    }
                  }
                  else {
                    vm.Message = 2;
                  }
                }
                else {
                  vm.Message = 4;
                }
              });
            }
            else {
              vm.Message = 3;
            }
          }
        },
        { field: 'NickName', headerName: 'Apelido', editable: true, width: 200 },
        {
          field: 'Active', headerName: 'Ativo', width: 80, editable: false, cellRenderer: function (params) {
            var cellHtml = '<a title="ff" ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/' + (params.value == "T" ? 'customeron.png' : 'customeroff.png') + '" /></a>';
            return cellHtml;
          },
        },
        {
          field: 'PrecoFC', headerName: 'Plano FC', editable: true, width: 150,
          cellRenderer: function (params) {
            return params.value;
          },
          cellEditor: 'agSelectCellEditor',
          cellEditorParams: {
            values: vm.plansDes
          },
          onCellValueChanged: (params) => {
            const delivery = vm.plans.find(x => x.Description == params.newValue);
            var rowData = GetGridData();
            var filterRow = rowData.find(x => x.ActionId == params.node.data.ActionId);
            filterRow.VIPPrice = 'R$' + (delivery.Value / 100).toFixed(2);
            filterRow.FCPrice = 'R$' + (delivery.Value / 100).toFixed(2);
            vm.gridOptions.api.updateRowData({ update: [filterRow] });
            //vm.gridOptions.api.setRowData(rowData);
            vm.gridOptions.api.refreshCells({ columns: ["VIPPrice"] });
            vm.gridOptions.api.refreshCells({ columns: ["FCPrice"] });
            var activeRows = rowData.filter(x => x.Active == "T");
            vm.PrecoFCSum = "R$" + (activeRows.reduce((a, { FCPrice }) => a + parseInt(FCPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
            vm.PrecoVIPum = "R$" + (activeRows.reduce((a, { VIPPrice }) => a + parseInt(VIPPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
            vm.gridOptions.api.stopEditing();
          }
        },
        {
          field: 'FCPrice', headerName: 'R$ FC', width: 80, editable: true,
          onCellValueChanged: (params) => {
            var rowData = GetGridData();
            var filterRow = rowData.find(x => x.ActionId == params.node.data.ActionId);
            filterRow.FCPrice = params.newValue;
            vm.gridOptions.api.setRowData(rowData);
            vm.gridOptions.api.refreshCells({ columns: ["FCPrice"] });
            var activeRows = rowData.filter(x => x.Active == "T");
            vm.PrecoFCSum = "R$" + (activeRows.reduce((a, { FCPrice }) => a + parseInt(FCPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
          },
        },
        {
          field: 'VIPPrice', headerName: 'R$ VIP', width: 80, editable: true,
          onCellValueChanged: (params) => {
            var rowData = GetGridData();
            var filterRow = rowData.find(x => x.ActionId == params.node.data.ActionId);
            filterRow.VIPPrice = params.newValue;
            vm.gridOptions.api.setRowData(rowData);
            vm.gridOptions.api.refreshCells({ columns: ["VIPPrice"] });
            var activeRows = rowData.filter(x => x.Active == "T");
            vm.PrecoVIPum = "R$" + (activeRows.reduce((a, { VIPPrice }) => a + parseInt(VIPPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
          }
        },
        {
          field: 'ESim', headerName: 'eSim', width: 70, editable: true,
          editable: function (params) {
            return params.data.Mode == "Add" ? true : false;
          },
          cellEditor: 'agSelectCellEditor',
          cellEditorParams: {
            values: ['SIM', 'NÃO']
          },
          cellRenderer: function (params) {
            var cellHtml = '<a title="ff" ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/' + (params.value == true ? 'customeron.png' : 'customeroff.png') + '" /></a>';
            return cellHtml;
          }
        },
        {
          field: 'Plano_Contel', headerName: 'P. Contel', width: 100, filterParams: filterParamsNumber,
          comparator: customNumberComparator
        },
        {
          field: 'Saldo', headerName: 'Saldo GB', width: 80,
          filterParams: filterParamsNumber,
          cellRenderer: function (params) {
            if (params.value != null) {
              return params.value == null ? "" : params.value.replace(" GB", "");
            }
          },
          comparator: customNumberComparator
        },
        {
          field: 'FimPlano', headerName: 'Fim Plano', width: 80, filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator
        },
        {
          field: 'Cancelation_Date',
          headerName: 'Perde Numero',
          width: 100,
          filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator,
          cellStyle: function (params) {
            var dataAtual = new Date();
            var dataFimPlano = new Date(params.value);
            var diffEmDias = Math.floor((dataFimPlano - dataAtual) / (1000 * 60 * 60 * 24));

            if (diffEmDias <= 10 && diffEmDias >= 0) {
              return { 'font-weight': 'bold', 'color': 'red' };
            }
            return null;
          },
        },
        {
          field: 'Ativacao',
          headerName: 'Ativação',
          width: 100,
          filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator,
          cellRenderer: function (params) {
            // Verifica se a data está disponível
            if (params.value) {
              // Converte a data para o formato desejado
              const dataFormatada = convertDate(params.value);

              // Retorna a data formatada
              return dataFormatada;
            }
            return params.value; // Retorna o valor original se não houver data
          },
        },
        {
          field: 'InicioPlano',
          headerName: 'Plano Inicio',
          width: 100,
          filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator
        },
        {
          field: 'AutoRec',
          headerName: 'Auto-Rec',
          width: 100,
          filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator
        },
        {
          field: 'ValorPago', width: 80, headerName: '$ Cob. Contel', filterParams: filterParamsNumber,
          comparator: customNumberComparator
        },
        {
          field: 'RecAutFCFlag',
          headerName: 'Rec. FC',
          width: 100,
          cellRenderer: function (params) {
            if (params.value != null) {
              var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;margin:10px" src="content/img/' + (params.value == false ? 'customeroff.png' : 'customeron.png') + '" /></a>';
              return cellHtml;
            }
          },
        },
        {
          field: 'RecAutFC',
          headerName: 'Rec.Aut.FC',
          width: 100,
          filter: 'agDateColumnFilter',
          filterParams: filterDateParams,
          comparator: DateComparator
        },

        {
          field: 'ContelStatus',
          headerName: 'Status',
          width: 100,
        },
        ,
        {
          field: 'PortIn',
          headerName: 'Port In',
          width: 100,
        },
        {
          field: 'Bloqueada',
          headerName: 'Bloq.',
          width: 100,
        },
        {
          field: 'UltPagDias',
          headerName: 'Ult. $',
          width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
        },
        {
          field: 'DaysSinceLastTopup',
          headerName: 'Dias ult. Rec.',
          width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
        },
        {
          field: 'LastPaidAmount',
          headerName: 'Ult. Pago $',
          width: 100, filterParams: filterParamsNumber, comparator: customNumberComparator
        },
        {
          field: 'StatusCob',
          headerName: 'Status $',
          width: 100,
        },
        { field: 'Propriedade', headerName: 'Dono', width: 120 },
        { field: 'CPF_FC', headerName: 'CPF FC', width: 120 },
        { field: 'CPF_DR', headerName: 'CPF Dr', width: 120 },
        { field: 'DocContel', headerName: 'Doc Contel', width: 120 },
        { field: 'Nome_DR', headerName: 'Nome Dr', width: 150 },
        { field: 'LinhaSemUso', width: 120, headerName: 'Sem Uso' },
        { field: 'Linha_DR', width: 120 },
        { field: 'Total_DR', headerName: 'Total Dr', width: 80, filterParams: filterParamsNumber, comparator: customNumberComparator },
        { field: 'PrecoUnico', headerName: '$ Unico', width: 80 },
        { field: 'Total_FC', headerName: 'Total FC', width: 80, filterParams: filterParamsNumber },
        { field: 'VIPSum', width: 80, headerName: 'VIP Sum', filterParams: filterParamsNumber, comparator: customNumberComparator },
        { field: 'FCSum', width: 80, headerName: '$ FC Sum', filterParams: filterParamsNumber, comparator: customNumberComparator },
        { field: 'Plugin_DR', headerName: 'Plano Dr', width: 150 },
        { field: 'Plano_DR', width: 150 },
        { field: 'Roaming', width: 80 },
        { field: 'PlanoContel', headerName: 'P. Contel', width: 150, editable: false },
        { field: 'FimPlano', headerName: 'Fim Plano', width: 150, editable: false },
        {
          field: 'AutoContel', headerName: 'Auto Contel', width: 80,
          cellRenderer: function (params) {
            if (params.value != null) {
              var cellHtml = '<a ng-click="" ><img class="imgWhatsapp link" style="max-width:15px;" src="content/img/' + (params.value == false ? 'customeroff.png' : 'customeron.png') + '" /></a>';
              return cellHtml;
            }
          },
        },
        { field: 'AutoRecFC', headerName: 'Auto Rec FC', width: 150, editable: false },
        { field: 'ContelStatus', headerName: 'Contel Status', width: 150, editable: false },
        { field: 'Cancela', headerName: 'Perde Numero', width: 150, editable: false },
        {
          field: 'Action', width: 50, editable: false, cellRenderer: function (params) {
            if (params.data.Delete) {
              return '<a title="ff"><img class="imgWhatsapp link" style="max-width:18px;margin:5px 2px" src="content/img/undelete.png" /></a>';
            }
            else {
              return '<a title="ff"><img class="imgWhatsapp link" style="max-width:15px;margin:10px 5px" src="content/img/Cancel.png" /></a>';
            }
          },
          suppressMenu: true,
          floatingFilter: false,
        }
      ],
      defaultColDef: {
        //flex: 1,
        sortable: true,
        filter: true,
        enableFilter: true,
        //floatingFilter: true,
        resizable: true,
        editable: false,
      },
      editType: 'fullRow',
      //stopEditingWhenGridLosesFocus: true,
      enableCellTextSelection: true,
      autoSizeColumns: true,
      rowHeight: 30,
      headerHeight: 75,
      onGridReady: function (params) {
        LoadUserLines();
      },
      //rowData: [],
      //rowData: LoadUserLines(),
      onFilterChanged: function () {
        vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + " of " + vm.PhoneLines.length + " items";
      },
      onRowValueChanged: onRowValueChanged,
      onCellClicked: onCellClicked,
      getRowStyle: function (params) {
        if (params.data.Mode === "Delete") {
          return { 'background-color': '#FFCCCB' }
        }
        if (params.data.Delete) {
          return { 'background-color': '#FFCCCB' }
        }
        return null;
      }
    }

    init();


    function onlyActive() {

      const filterCheckbox = document.getElementById('filterCheckboxModal');

      if (!filterCheckbox.checked) {
        vm.gridOptions.api.setRowData(vm.originalRows);
        vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + " of " + vm.PhoneLines.length + " items";

        return;
      }


      const phoneLinesAtivas = vm.originalRows.filter((phone) => phone.Active === 'T');

      vm.gridOptions.api.setRowData(phoneLinesAtivas);

      vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + " of " + vm.PhoneLines.length + " items";

    }

    function convertDate(dataString) {
      // Mapeamento de abreviações de meses para números
      const months = {
        Jan: '01', Feb: '02', Mar: '03',
        Apr: '04', May: '05', Jun: '06',
        Jul: '07', Aug: '08', Sep: '09',
        Oct: '10', Nov: '11', Dec: '12'
      };

      // Quebrar a string em partes (dia, mês, ano)
      const partes = dataString.split(' ');

      // Obter o ano, mês e dia
      const year = partes[2];
      const month = months[partes[1]];
      const day = partes[0];

      // Formar a data no formato "aaaa-mm-dd hh:mm"
      const finalDate = `${year}-${month}-${day} 00:00`;

      return finalDate;
    }


    function init() {
      vm.showAlert = DialogFactory.showLoader("Aguarde enquanto obtemos os detalhes da linha do cliente");
      vm.Use2Prices = vm.ParentData.Use2Prices;
      vm.IsVIP = vm.ParentData.IsVIP;
      vm.Referral = vm.ParentData.Referral;
      vm.CustomeName = vm.ParentData.Nome;
      vm.CpfType = vm.ParentData.CPF.length == 11 ? 0 : 1;
      vm.CustomeCPF = vm.ParentData.CPF;
      vm.CustomeEmail = vm.ParentData.Email;
      vm.SoftDelete = vm.ParentData.SoftDelete;
      vm.ParentNome = vm.ParentData.Parent != null ? vm.ParentData.Parent.Name : "";

      for (var i in vm.ParentData.Phones) {
        if (vm.ParentData.Phones[i].IsFoneclube != true) {
          vm.CustomerPhone = vm.ParentData.Phones[i].DDD + vm.ParentData.Phones[i].Number;
        }
      }

      FoneclubeService.getAgGridStates("CustomerDetail").then(function (result) {
        if (result != null)
          vm.agGridStates = result;
        var default1 = result.find(x => x.IsDefault == true);
        if (default1) {
          vm.defaultGridState = default1;

        }
      });

      FoneclubeService.getPlansById(4).then(function (result) {
        var rss = result.filter(x => x.IdOperator != 1).sort((a, b) => (a.IdOperator > b.IdOperator) ? -1 : ((b.IdOperator > a.IdOperator) ? 1 : 0));
        vm.plans = rss;
        onlyActive()

        var plans = rss.map(x => x.Description);
        plans.forEach(element => {
          vm.plansDes.push(element);
        });
      });
      FoneclubeService.getContelPlans().then(function (result) {
        sessionStorage.setItem('contelplans', JSON.stringify(result));
      });
      FoneclubeService.getAllCustomersMinimal().then(function (result) {
        vm.parentNames = result;
      });

    }

    function selectParentItem(val) {
      vm.isParentSelected = val;
    }

    function setSelectedParentName(item) {
      console.log(item);
      vm.isParentSelected = true;
      vm.selectedParent = item;
      vm.ParentCPF = item.DocumentNumber;
      vm.ParentNome = item.Name;
      vm.ParentWhatsAppNumber = item.Telefone;
    }

    function OpenChargeHistory() {
      vm.showAlert = DialogFactory.showLoader("Por favor, aguarde...");
      FoneclubeService.getCustomerByCPF(vm.CustomeCPF).then(function (result) {
        vm.showAlert.close();
        ViewModelUtilsService.showModalCustomer(result);
      });
    }

    function OpenWhatsApp(cpf) {
      vm.showAlert = DialogFactory.showLoader("Por favor, aguarde...");
      FoneclubeService.getCustomerByCPF(vm.CustomeCPF).then(function (result) {
        vm.showAlert.close();
        ViewModelUtilsService.showModalReport(result);
      });
    }

    function refreshPhones() {
      vm.showAlert = DialogFactory.showLoader("Aguarde enquanto obtemos os detalhes da linha mais recente");
      LoadUserLines();
    }

    function onQuickFilterChanged() {
      var filterText = vm.filterText.replace("(", "").replace(")", "").replaceAll(" ", "").replace("-", "");
      vm.filterText = isNaN(filterText) ? vm.filterText : filterText;
      vm.gridOptions.api.setQuickFilter(vm.filterText);
      vm.resultText = vm.gridOptions.api.getDisplayedRowCount() + " of " + vm.PhoneLines.length + " items";
    }

    function clearFilter() {
      vm.filterText = "";
      vm.gridOptions.api.setQuickFilter(null);
    }

    function OpenTopup(phone) {
      var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos as informações da linha.");
      FoneclubeService.getContelDetailByPhone(phone).then(function (result) {
        showLoader.close();
        if (result != null) {
          var resultData = {
            result: result,
            plans: JSON.parse(sessionStorage.getItem('contelplans') == null ? null : sessionStorage.getItem('contelplans'))
          };
          ViewModelUtilsService.showModalPhoneTopUpTemplate(resultData);
        }
        else {
          alert('Selected line is not available in Contel');
        }
      }, function (error) {
        showLoader.close();
        DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
      });
    }

    function OpenTopupHistory(phone) {
      var showLoader = DialogFactory.showLoader("Aguarde enquanto buscamos o histórico de recarga.");
      FoneclubeService.getTopupHistory(phone).then(function (result) {
        showLoader.close();
        if (result != null && result.Person != null) {
          ViewModelUtilsService.showModalPhoneTopUpHistoryTemplate(result);
        }
        else {
          alert('Information not available');
        }
      }, function (error) {
        showLoader.close();
        DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
      });
    }

    function LoadUserLines() {
      FoneclubeService.getCustomerPhonesByCPF(vm.ParentData.CPF).then(function (result) {
        if (result != null) {
          //result.Phones = result.Phones.filter(x=>x.Delete == null || x.Delete == false);
          var phones = result.sort(function (x, y) {
            return (x.Ativa === y.Ativa) ? 0 : x.Ativa ? -1 : 1;
          }).sort(function (x, y) {
            return (x.Delete === y.Delete) ? 0 : x.Delete ? 1 : -1;
          });
          vm.PhoneLines = phones;
          convertToViewModelOriginal(phones);
          bindAgGrid(phones);
          getAgGridState();
          vm.resultText = phones.length + " of " + phones.length + " items";
        }
        vm.showAlert.close();
      }, function (error) {
        vm.showAlert.close();
      });
    }

    function bindAgGrid(data) {
      var rowData = convertToViewModel(data);
      if (vm.gridOptions.api) {
        vm.gridOptions.api.setRowData(rowData);
      }
    }

    function convertToViewModelOriginal(data) {
      var templateDataList = [];
      if (data != null) {
        for (var i = 0; i < data.length; i++) {
          var datamodel = data[i];
          templateDataList.push({
            'ActionId': datamodel.Id.toString(),
            'Id': datamodel.Id,
            'Contel': datamodel.PhoneNumber,
            'Port': datamodel.PortNumber,
            'ICCID': datamodel.ICCID,
            'Active': datamodel.Ativa,
            'PrecoFC': datamodel.Plano_FC,
            'VIPPrice': datamodel.PrecoVIP,
            'FCPrice': datamodel.Preco_FC,
            'NickName': datamodel.Apelido,
            'Esim': datamodel.Esim == "SIM" ? true : false,
            'Plano_Contel': datamodel.Plano_Contel,
            'FimPlano': datamodel.FimPlano,
            'AutoContel': datamodel.Recarga_Automatica,
            'Ativacao': datamodel.Ativacao,
            'AutoRecFC': datamodel.RecAutFC,
            'ContelStatus': datamodel.ContelStatus,
            'Cancelation_Date': datamodel.Cancelation_Date,
            'Delete': datamodel.Delete,
            'ContelBlockStatus': datamodel.ContelBlockStatus,
            'PortIn': datamodel.PortIn,
            'Bloqueada': datamodel.Bloqueada,
            'Saldo': datamodel.Saldo,
            'InicioPlano': datamodel.InicioPlano,
            'AutoRec': datamodel.AutoRec,
            'ValorPago': datamodel.ValorPago,
            'RecAutFCFlag': datamodel.RecAutFCFlag,
            'RecAutFC': datamodel.RecAutFC,
            'UltPagDias': datamodel.UltPagDias,
            'DaysSinceLastTopup': datamodel.DaysSinceLastTopup,
            'LastPaidAmount': datamodel.LastPaidAmount,
            'StatusCob': datamodel.StatusCob,
            'Propriedade': datamodel.Propriedade,
            'CPF_FC': datamodel.CPF_FC,
            'CPF_DR': datamodel.CPF_DR,
            'DocContel': datamodel.DocContel,
            'Nome_DR': datamodel.Nome_DR,
            'LinhaSemUso': datamodel.LinhaSemUso,
            'Linha_DR': datamodel.Linha_DR,
            'Total_DR': datamodel.Total_DR,
            'PrecoUnico': datamodel.PrecoUnico,
            'VIPSum': datamodel.VIPSum,
            'FCSum': datamodel.FCSum,
            'Plugin_DR': datamodel.Plugin_DR,
            'Plano_DR': datamodel.Plano_DR,
            'Roaming': datamodel.Roaming,
            'Mode': 'Update',
            'Edited': 0,
            'Action': ''
          });
          // templateDataList.push({
          //     'ActionId': datamodel.Id.toString(),
          //     'Id': datamodel.Id,
          //     'Contel': datamodel.DDD + "" + datamodel.Number,
          //     'Port': datamodel.PortNumber,
          //     'ICCID': datamodel.ICCID,
          //     'Active': datamodel.LinhaAtiva,
          //     'PrecoFC': vm.plans.find(x=>x.Id == datamodel.IdPlanOption) == undefined ? "" : vm.plans.find(x=>x.Id == datamodel.IdPlanOption).Description,
          //     'VIPPrice': datamodel.AmmountPrecoVip ? datamodel.AmmountPrecoVip : 0,
          //     'FCPrice': datamodel.OperatorChargedPrice ? datamodel.OperatorChargedPrice : 0,
          //     'NickName': datamodel.NickName,
          //     'Esim': datamodel.Esim == "SIM" ? true : false,
          //     'PlanoContel': datamodel.Plano_Contel,
          //     'FimPlano': datamodel.FimPlano,
          //     'AutoContel': datamodel.Recarga_Automatica,
          //     'AutoRecFC': datamodel.RecAutFC,
          //     'ContelStatus': datamodel.ContelStatus,
          //     'Cancela': datamodel.Cancela,
          //     'Delete' : datamodel.Delete,
          //     'Mode': 'Update',
          //     'Edited': 0,
          //     'Action':''
          // });
        }
      }
      vm.originalRows = templateDataList;

      var activeRows = templateDataList.filter(x => x.Active == "T");
      vm.PrecoFCSum = "R$" + (activeRows.reduce((a, { FCPrice }) => a + parseInt(FCPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
      vm.PrecoVIPum = "R$" + (activeRows.reduce((a, { VIPPrice }) => a + parseInt(VIPPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
    }

    function convertToViewModel(data) {
      var templateDataList = [];
      if (data != null) {
        for (var i = 0; i < data.length; i++) {
          var datamodel = data[i];
          templateDataList.push({
            'ActionId': datamodel.Id.toString(),
            'Id': datamodel.Id,
            'Contel': datamodel.PhoneNumber,
            'Port': datamodel.PortNumber,
            'ICCID': datamodel.ICCID,
            'Active': datamodel.Ativa,
            'PrecoFC': datamodel.Plano_FC,
            'VIPPrice': datamodel.PrecoVIP,
            'FCPrice': datamodel.Preco_FC,
            'NickName': datamodel.Apelido,
            'Esim': datamodel.Esim == "SIM" ? true : false,
            'Plano_Contel': datamodel.Plano_Contel,
            'FimPlano': datamodel.FimPlano,
            'InicioPlano': datamodel.InicioPlano,
            'AutoContel': datamodel.Recarga_Automatica,
            'AutoRecFC': datamodel.RecAutFC,
            'ContelStatus': datamodel.ContelStatus,
            'Cancelation_Date': datamodel.Cancelation_Date,
            'Ativacao': datamodel.Ativacao,
            'Delete': datamodel.Delete,
            'Saldo': datamodel.Saldo,
            'AutoRec': datamodel.AutoRec,
            'ValorPago': datamodel.ValorPago,
            'RecAutFCFlag': datamodel.RecAutFCFlag,
            'RecAutFC': datamodel.RecAutFC,
            'ContelBlockStatus': datamodel.ContelBlockStatus,
            'PortIn': datamodel.PortIn,
            'Bloqueada': datamodel.Bloqueada,
            'UltPagDias': datamodel.UltPagDias,
            'DaysSinceLastTopup': datamodel.DaysSinceLastTopup,
            'LastPaidAmount': datamodel.LastPaidAmount,
            'StatusCob': datamodel.StatusCob,
            'Propriedade': datamodel.Propriedade,
            'CPF_FC': datamodel.CPF_FC,
            'CPF_DR': datamodel.CPF_DR,
            'DocContel': datamodel.DocContel,
            'Nome_DR': datamodel.Nome_DR,
            'LinhaSemUso': datamodel.LinhaSemUso,
            'Linha_DR': datamodel.Linha_DR,
            'Total_DR': datamodel.Total_DR,
            'PrecoUnico': datamodel.PrecoUnico,
            'VIPSum': datamodel.VIPSum,
            'FCSum': datamodel.FCSum,
            'Plugin_DR': datamodel.Plugin_DR,
            'Plano_DR': datamodel.Plano_DR,
            'Roaming': datamodel.Roaming,
            'Mode': 'Update',
            'Edited': 0,
            'Action': ''
          });
        }
      }
      return templateDataList;
    }

    function addNewLinePopup()
    {
      var data = {
          Plans: vm.plans,
          Client: vm.ParentData,
      };
      ViewModelUtilsService.showInstaAddNewLinePopup(data);
    }


    function addNewLineRow() {
      if (vm.gridOptions.api) {
        var rowData = GetGridData();
        var datt = {
            'ActionId': rowData.length + 1,
            'Id': -1,
            'Contel': "",
            'Port': "",
            'ICCID': "",
            'Active': "T",
            'PrecoFC': "",
            'VIPPrice': "",
            'FCPrice': "",
            'NickName':"",
            'Esim': false,
            'Plano_Contel': "",
            'FimPlano': "",
            'InicioPlano': "",
            'AutoContel':"",
            'AutoRecFC': "",
            'ContelStatus': "",
            'Cancelation_Date': "",
            'Ativacao': "",
            'Saldo': "",
            'AutoRec': "",
            'ValorPago': "",
            'RecAutFCFlag': "",
            'RecAutFC': "",
            'ContelBlockStatus': "",
            'PortIn': "",
            'Bloqueada': "",
            'UltPagDias': "",
            'DaysSinceLastTopup': "",
            'LastPaidAmount': "",
            'StatusCob': "",
            'Propriedade': "",
            'CPF_FC': "",
            'CPF_DR': "",
            'DocContel': "",
            'Nome_DR': "",
            'LinhaSemUso':"",
            'Linha_DR': "",
            'Total_DR': "",
            'PrecoUnico': "",
            'VIPSum': "",
            'FCSum': "",
            'Plugin_DR': "",
            'Plano_DR': "",
            'Roaming': "F",
            'Mode': 'Add',
            'Delete': false,
            'Edited': 0,
            'Action': ''
          };
        const newItems = [datt];
        vm.gridOptions.api.setFilterModel(null);
        vm.gridOptions.api.applyTransaction({
          add: newItems,
          addIndex: rowData.length
        });
        
        setTimeout(function () {
          var firstEditableColumn = 'Contel' || vm.gridOptions.columnDefs[2].field;
          vm.gridOptions.api.startEditingCell({
            rowIndex: rowData.length,
            colKey: firstEditableColumn
          });
        }, 100);
      }
    }

    function copyToClipboard() {
      var valor = document.querySelector('button[data-valor]').getAttribute('data-valor');
      var copyText = document.createElement('textarea');
      copyText.value = valor;
      document.body.appendChild(copyText);
      copyText.select();
      document.execCommand('copy');
      document.body.removeChild(copyText);
      alert('Link copiado para a área de transferência!');
    };


    function DateComparator(valueA, valueB) {
      var defDate = new Date(1900, 1, 1);
      valueA = valueA == "" ? defDate : new Date(valueA);
      valueB = valueB == "" ? defDate : new Date(valueB);
      if (valueA == valueB) return 0;
      return (valueA > valueB) ? 1 : -1;
    }

    function onCellClicked(event) {
      var rowData = GetGridData();
      if (event.column.getColId() == 'Action') {
        if (event.data.Delete) {
          ViewModelUtilsService.showConfirmDialog('Atenção!', "Tem certeza de que deseja recuperar a linha - " + event.data.Contel).then(function (confirm) {
            if (confirm) {
              var data = {
                Id: event.data.Id,
                Delete: false
              };
              FoneclubeService.softDeleteLine(data).then(function (result) {
                if (result) {
                  DialogFactory.showMessageDialog({ titulo: 'Sucesso', mensagem: "Linha " + event.dataContel + " incluída com sucesso" });
                  LoadUserLines();
                }
              });
            }
          });
        }
        else {
          ViewModelUtilsService.showConfirmDialog('Atenção!', "Tem certeza que deseja excluir a linha - " + event.data.Contel).then(function (confirm) {
            if (confirm) {
              if (vm.gridOptions.api) {
                if (event.data.Mode == "Update") {
                  var filterRow = rowData.find(x => x.ActionId == event.data.ActionId);
                  filterRow.Mode = "Delete";

                  var data = {
                    Id: event.data.Id,
                    Delete: true
                  };
                  FoneclubeService.softDeleteLine(data).then(function (result) {
                    if (result) {
                      DialogFactory.showMessageDialog({ titulo: 'Sucesso', mensagem: "Linha " + event.data.Contel + " excluída com sucesso" });
                      LoadUserLines();
                    }
                  });
                }
                else {
                  var filterRow = rowData.filter(x => x.ActionId != event.data.ActionId);
                  vm.gridOptions.api.setRowData(filterRow);
                }
              }
            }
          });
        }
      }
      else if (event.column.getColId() == 'Active') {
        var filterRow = rowData.find(x => x.ActionId == event.data.ActionId);
        filterRow.Active = event.data.Active == "T" ? "F" : "T";
        vm.gridOptions.api.setRowData(rowData);
        vm.gridOptions.api.refreshCells({ columns: ["Active"] });

        var planId = 0;
        if (vm.plans.find(x => x.Description == filterRow.PrecoFC + ' - Contel') == undefined) {
          planId = vm.plans.find(x => x.Description == filterRow.PrecoFC).Id;
        }
        else {
          planId = vm.plans.find(x => x.Description == filterRow.PrecoFC + ' - Contel').Id;
        }

        var data = {
          Id: filterRow.Id,
          DDD: filterRow.Contel.substr(0, 2),
          Number: filterRow.Contel.substr(2),
          PortNumber: filterRow.Port,
          LinhaAtiva: filterRow.Active == "T" ? true : false,
          NickName: filterRow.NickName,
          ICCID: filterRow.ICCID,
          IdPlanOption: planId,
          AmmountPrecoVip: parseInt(filterRow.VIPPrice.replace("R$", "").replace(".", ""))
        };
        FoneclubeService.updateInstaEditClientLine(data).then(function (result) {
          var activeRows = rowData.filter(x => x.Active == "T");
          vm.PrecoFCSum = "R$" + (activeRows.reduce((a, { FCPrice }) => a + parseInt(FCPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);
          vm.PrecoVIPum = "R$" + (activeRows.reduce((a, { VIPPrice }) => a + parseInt(VIPPrice.replace('R$', '').replace('.', '')), 0) / 100).toFixed(2);


          //DialogFactory.showMessageDialog({ titulo: 'Sucesso', mensagem: "Linha editada atualizada com sucesso" });
        });
      } else if (event.column.getColId() == "Saldo") {
        var showLoader = DialogFactory.showLoader(
          "Aguarde enquanto obtém o saldo mais recente"
        );
        FoneclubeService.getContelDetailBySaldoPhone(
          event.data.Contel
        ).then(
          function (result) {
            showLoader.close();
            if (result != null && result.data != null) {
              var saldo = parseFloat(
                result.data.restante_dados / 1024
              ).toFixed(2);
              const itemsToUpdate = [];
              let rowData = [];
              vm.gridOptions.api.forEachNodeAfterFilterAndSort(function (
                rowNode,
                index
              ) {
                if (rowNode.data.Id == event.data.Id) {
                  rowNode.data.Saldo = saldo;
                  rowNode.setSelected(true);
                  vm.gridOptions.api.refreshCells({ columns: ["Saldo"] });
                  vm.gridOptions.api.ensureIndexVisible(index, "middle");
                }
              });

            }
          },
          function (error) {
            showLoader.close();
          }
        );
      }
    }

    function GetGridData() {
      let rowData = [];
      vm.gridOptions.api.forEachNode(node => rowData.push(node.data));
      return rowData;
    }

    const objectsEqual = (o1, o2) =>
      typeof o1 === 'object' && o1 != null && Object.keys(o1).length > 0
        ? Object.keys(o1).length === Object.keys(o2).length
        && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))
        : o1 === o2;

    function onRowValueChanged(event) {
      var rowData = GetGridData();
      var filterRow = vm.originalRows.find(x => x.ActionId == event.data.ActionId);
      var isEdited = objectsEqual(filterRow, event.node.data);
      if (!isEdited) {
        if (vm.gridOptions.api) {
          if (event.data.Mode == "Update") {
            var valid = ValidatePhoneNumbers(event.data);
            if (valid) {
              var filterRow = rowData.find(x => x.ActionId == event.data.ActionId);
              filterRow.Edited = 1;
              vm.gridOptions.api.setRowData(rowData);
              vm.gridOptions.api.refreshCells({ columns: ["Edited"] });

              var data = {
                Id: event.data.Id,
                DDD: event.data.Contel.substr(0, 2),
                Number: event.data.Contel.substr(2),
                PortNumber: event.data.Port,
                LinhaAtiva: event.data.Active == "T" ? true : false,
                NickName: event.data.NickName,
                ICCID: event.data.ICCID,
                IdPlanOption: vm.plans.find(x => x.Description == event.data.PrecoFC).Id,
                AmmountPrecoVip: parseInt(event.data.VIPPrice.replace("R$", "").replace(".", ""))
              };
              FoneclubeService.updateInstaEditClientLine(data).then(function (result) {
                if (result) {
                  DialogFactory.showMessageDialog({ titulo: 'Sucesso', mensagem: "Linha editada atualizada com sucesso" });
                }
              });
            }
            else {
              vm.Message = valid;
            }
          }
          else {
            var valid = ValidatePhoneNumbers(event.data);
            if (valid) {
              vm.gridOptions.api.setRowData(rowData);
            }
            else {
              vm.Message = valid;
            }
          }
        }
      }
    }

    function exportToExcel() {
      var params = {
        skipHeader: false,
        skipFooters: true,
        skipGroups: true,
        fileName: vm.ParentData.Nome + ".csv"
      };
      var csvContent = vm.gridOptions.api.getDataAsCsv(params);
      let hiddenElement = document.createElement("a");
      let csvData = new Blob([csvContent], { type: "text/csv" });
      let csvUrl = URL.createObjectURL(csvData);
      hiddenElement.href = csvUrl;
      hiddenElement.target = "_blank";
      hiddenElement.download = vm.ParentData.Nome + ".csv";
      hiddenElement.click();
    }

    function BlockUnlockLine(value, custId, nodeId, custName, linha) {
      if (value == "A") {
        DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do Cliente ou apenas a linha selecionada' + custName + '</span>', btn1: 'TODAS', btn2: 'Selecionado' }).then(function (result) {
          if (result == 0) {
            DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' }).then(function (result) {
              if (!result) {
                DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' }).then(function (result) {
                  var showLoader = DialogFactory.showLoader("Um momento estamos bloqueando as linhas.");
                  if (!result) {
                    var data = {
                      PersonId: custId
                    }
                    FoneclubeService.permanentBlockLineForCustomer(data).then(function (result) {
                      if (result != null) {
                        showLoader.close();
                        var resDisplay = "";
                        for (var ir = 0; ir < result.length; ir++) {
                          resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                        }
                        DialogFactory.showMessageDialog({ mensagem: 'Success:' + resDisplay });

                      }
                      else {
                        DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
                      }
                    }, function (error) {
                      showLoader.close();
                      DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
                    });
                  }
                  else
                    showLoader.close();
                });
              }
            });
          }
          else {
            var showLoader = DialogFactory.showLoader("Um momento estamos bloqueando as linhas.");
            var data = { numero: linha };
            FoneclubeService.permanentBlockLine(data).then(function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay = "Linha: " + linha + " Status: " + result.mensagem + "<br/>";
                DialogFactory.showMessageDialog({ mensagem: 'Success:' + resDisplay });
              }
              else {
                DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        });
      }
      else {
        DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linha', mensagem: '<span>Deseja desbloquear <strong>TODAS</strong> as linhas de Cliente ou apenas a linha selecionada' + custName + '</span>', btn1: 'TODAS', btn2: 'Selecionado' }).then(function (result) {
          if (result == 0) {
            DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linha', mensagem: '<span>Deseja desbloquear <strong>TODOS</strong> de acordo com as linhas do ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' }).then(function (result) {
              if (!result) {
                DialogFactory.dialogConfirm({ titulo: 'Desbloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' }).then(function (result) {
                  if (!result) {
                    var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
                    var data = {
                      PersonId: custId
                    }
                    FoneclubeService.permanentUnBlockLineForCustomer(data).then(function (result) {
                      if (result != null) {
                        showLoader.close();
                        var resDisplay = "";
                        for (var ir = 0; ir < result.length; ir++) {
                          resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                        }

                        DialogFactory.showMessageDialog({ mensagem: 'Success:' + resDisplay });
                      }
                      else {
                        DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
                      }
                    }, function (error) {
                      showLoader.close();
                      DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
                    });
                  }
                });
              }
            });
          }
          else {
            var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
            var data = { numero: linha };
            FoneclubeService.permanentUnBlockLine(data).then(function (result) {
              if (result != null) {
                showLoader.close();
                var resDisplay = "Linha: " + linha + " Status: " + result.mensagem + "<br/>";

                DialogFactory.showMessageDialog({ mensagem: 'Success:' + resDisplay });
              }
              else {
                DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
              }
            }, function (error) {
              showLoader.close();
              DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + error });
            });
          }
        });
      }
    }

    function ValidatePhoneNumbers(rowData) {
      if (rowData.Contel != undefined && rowData.Contel != "" && rowData.Contel.length < 11) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "Por favor, insira o número de telefone de 11 dígitos do contel" });
        return false;
      }
      // else if (rowData.Port != undefined && rowData.Port != "" && rowData.Port.length < 11) {
      //   DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "Por favor, insira o número de telefone de 11 dígitos do portar" });
      //   return false;
      // }
      else if (rowData.ICCID != undefined && rowData.ICCID != "" && rowData.ICCID.length != 19) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "ICCID inserido com comprimento inválido" });
        return false;
      }
      return true;
    }

    function saveClientAndLineWithCharge() {
      vm.gridOptions.api.stopEditing();
      setTimeout(function(){
      var rowData = GetGridData();
      var filterNewRows = rowData.filter(x => x.Mode == "Add");
      var isInValid = false;
      filterNewRows.forEach(element => {
        var valid = ValidatePhoneNumbers(element);
        if (!valid)
          isInValid = true;
      });

      if (!isInValid) {
        if (filterNewRows != null && filterNewRows.length > 0) {
          var data = {
            Selected: filterNewRows,
            Plans: vm.plans,
            Client: vm.ParentData,
            IsCharge: true
          };
          ViewModelUtilsService.showInstaChargeConfirPopup(data);
        }
        else {
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "Você não adicionou novas linhas" });
        }
      }
      }, 1000);
    }

    function saveClientAndLine() {
      vm.gridOptions.api.stopEditing();
      var rowData = GetGridData();
      var filterNewRows = rowData.filter(x => x.Mode == "Add");
      var isInValid = false;
      filterNewRows.forEach(element => {
        var valid = ValidatePhoneNumbers(element);
        if (!valid)
          isInValid = true;
      });

      if (!isInValid) {

        if (filterNewRows != null && filterNewRows.length > 0) {
          var data = {
            Selected: filterNewRows,
            Plans: vm.plans,
            Client: vm.ParentData,
            IsCharge: false
          };
          ViewModelUtilsService.showInstaChargeConfirPopup(data);
        }
        else {
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "Você não adicionou novas linhas" });
        }
      }
    }

    function UpdateActiveStatus(status) {
      vm.SoftDelete = !status;
      var clientData = GetClientRequest();
      FoneclubeService.updateInstaEditClient(clientData).then(function (res) {

      });
    }

    function GetClientRequest() {
      return {
        Id: vm.ParentData.Id,
        Name: vm.CustomeName,
        Email: vm.CustomeEmail,
        DocumentNumber: vm.CustomeCPF,
        Telefone: UtilsService.clearPhoneNumber(vm.CustomerPhone),
        ParentId: vm.selectedParent == null ? vm.ParentData.Parent.Id : vm.selectedParent.Id,
        Desativo: vm.SoftDelete
      };
    }

    function saveNewLinesToExistingCustomer() {
      var clientData = GetClientRequest();
      FoneclubeService.updateInstaEditClient(clientData).then(function (res) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: "Dados alterados com sucesso." });
      });

      vm.gridOptions.api.stopEditing();
      var rowData = GetGridData();
      var filterNewRows = rowData.filter(x => x.Mode == "Add");


      var isInValid = false;
      filterNewRows.forEach(element => {
        var valid = ValidatePhoneNumbers(element);
        if (!valid)
          isInValid = true;
      });

      if (!isInValid) {
        if (filterNewRows != null && filterNewRows.length > 0) {
          var msg = "Você adicionou as linhas abaixo, clique em confirmar para salvar<br/>";
          var msgPhone = "";
          var phones = [];
          for (var i = 0; i < filterNewRows.length; i++) {
            msgPhone += "<br/>Contel: " + filterNewRows[i].Contel + "<br/>Port: " + filterNewRows[i].Port + "<br/>ICCID: " + filterNewRows[i].ICCID + '<br/>Plano: ' + filterNewRows[i].PrecoFC + "<br/>";
            var plan = vm.plans.find(x => x.Description == filterNewRows[i].PrecoFC);
            var data = {
              intDDD: filterNewRows[i].Contel.substr(0, 2),
              intPhone: filterNewRows[i].Contel.substr(2),
              intIdOperator: plan.IdOperator,
              intIdPerson: vm.ParentData.Id,
              txtPortNumber: filterNewRows[i].Port,
              txtNickname: filterNewRows[i].NickName,
              txtICCID: filterNewRows[i].ICCID,
              intIdPlan: plan.Id,
              intAmmoutPrecoVip: filterNewRows[i].VIPPrice
            };
            phones.push(data);
          }
          msg = msg + msgPhone;
          DialogFactory.dialogConfirm({ title: 'Atenção!', mensagem: msg })
            .then(function (result) {
              if (result) {
                FoneclubeService.saveInstaPhoneClient(phones).then(function (result1) {
                  if (result1)
                    DialogFactory.showMessageDialog({ mensagem: 'Linhas salva com sucesso' });
                  else
                    DialogFactory.showMessageDialog({ mensagem: 'A linha já existe ou ocorreu um erro ao adicionar esta linha' });
                });
              }
            });
        }
        else {

        }
      }
    }

    function saveUserSettings() {
      var data = {
        IntIdPerson: vm.ParentData.Id,
        IsPrecoPromoSum: true,
        IsPrecoFCSum: true,
        IsUse2Prices: vm.Use2Prices,
        IsVIP: vm.IsVIP,
      };

      FoneclubeService.saveUserSettings(data).then(function (result) {
        console.log('Saved Usar2Preços');
      });
    }

    function getAgGridState() {
      var res = vm.agGridStates.find(x => x.txtStateName == vm.defaultGridState.txtStateName);
      if (res != null && res.txtFilterModel != undefined && res.txtColumnState != undefined) {
        vm.gridOptions.api.setFilterModel(JSON.parse(res.txtFilterModel));
        vm.gridOptions.columnApi.setColumnState(JSON.parse(res.txtColumnState));
        if (res.txtSortModel != '{}')
          vm.gridOptions.api.setSortModel(JSON.parse(res.txtSortModel));
      }
      var saveStateData = {
        intId: vm.defaultGridState.intId,
        txtAgidName: 'CustomerDetail',
      }
      FoneclubeService.updateDefaultGridState(saveStateData).then(function (result) {
      });
    }

    function saveState() {
      var retVal = prompt("Enter save state name : ", "state name here");
      var saveStateData = {
        intId: -1,
        txtStateName: retVal,
        txtAgidName: 'CustomerDetail',
        txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
        txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
        txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
      }

      if (retVal != "null" && retVal != null) {
        FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
          alert('Saved successfully');
          FoneclubeService.getAgGridStates("CustomerDetail").then(function (result) {
            if (result != null)
              vm.agGridStates = result;
            var default1 = result.find(x => x.IsDefault == true);
            if (default1) {
              vm.defaultGridState = default1;
            }
          });
        });
      }
    }

    function updateState() {
      var retVal = prompt("Enter save state name to update: ", vm.defaultGridState.txtStateName);
      var saveStateData = {
        intId: vm.defaultGridState.intId,
        txtStateName: retVal,
        txtAgidName: 'CustomerDetail',
        txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
        txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
        txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
      }
      FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
        alert('Updated successfully')
      });
    }

    function deleteState() {
      ViewModelUtilsService.showConfirmDialog('Atenção!', 'Are you sure, you want to delete?').then(function (confirm) {
        if (confirm) {
          var deleteStateData = {
            intId: vm.defaultGridState.intId,
            txtAgidName: 'CustomerDetail'
          }
          FoneclubeService.deleteAgGridState(deleteStateData).then(function (result) {
            alert('Deleted successfully')
          });
        }
      });
    }

  }
})();

(function () {

  angular
    .module('foneClub')
    .controller('IntlDepositsModalController', IntlDepositsModalController);


  IntlDepositsModalController.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

  function IntlDepositsModalController(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, $filter, localStorageService) {

    var vm = this;
    vm.paymentTypes = [{ Id: 1, Name: "Bank - USA" }, { Id: 2, Name: "Bank - Brazil" }, { Id: 3, Name: "Paypal" }, { Id: 4, Name: "Online Transfer" }, { Id: 5, Name: "Refund" },{ Id: 6, Name: "Other" }];
    vm.Nome = ViewModelUtilsService.customerData.Name;
    vm.PersonId = ViewModelUtilsService.customerData.Id;
    vm.usdAmount = 0;
    vm.ccCharges = 0;
    vm.bramount = 0;
    vm.bankCharges = 0;
    vm.conversionrate = 0;
    vm.finalDeposit = 0;
    vm.handlingCharges = 0;
    vm.Comment = "";
    vm.refund = false;
    vm.PaymentType = 'Bank - USA';
    vm.dataAdded = moment().format("YYYY MM");
    vm.isSaving = false;
    vm.SaveDeposit = SaveDeposit;

    function SaveDeposit() {

      var lastDeposit = JSON.parse(localStorage.getItem('lastDeposit'));

      if(vm.FinalValue != '' && vm.dataAdded != null && vm.usdAmount != null && vm.PaymentType != null)
      {
      vm.isSaving = true;

      var data = {
        IdPerson: vm.PersonId,
        USDAmount: (parseFloat(vm.usdAmount) / 100).toFixed(2),
        BRAmount: (parseFloat(vm.bramount) / 100).toFixed(2),
        CCCharages: (parseFloat(vm.ccCharges) / 100).toFixed(2),
        BankCharges: (parseFloat(vm.bankCharges) / 100).toFixed(2),
        HandlingCharges: (parseFloat(vm.handlingCharges) / 100).toFixed(2),
        ConversionRate: (parseFloat(vm.conversionrate) / 100).toFixed(2),
        PaymentType: vm.PaymentType,
        DateAdded: vm.dataAdded,
        FinalValue: (parseFloat(vm.finalDeposit) / 100).toFixed(2),
        Comment : vm.Comment,
        Refund: vm.refund
      };


      if (lastDeposit) {
        if (lastDeposit.data.FinalValue === data.FinalValue && Date.now() - lastDeposit.timestamp < 60 * 60 * 1000) {
          // Se houver um último depósito dentro da última hora
          var confirmDuplicate = confirm("Você fez um depósito igual nos últimos 60 minutos. Tem certeza que deseja continuar?");
          if (!confirmDuplicate) {
            return; // Se o usuário escolher não continuar, a função termina aqui.
          }
        }
      }


      FoneclubeService.SaveIntlDeposits(data).then(function (result) {
        
        vm.isSaving = false;

        localStorage.setItem('lastDeposit', JSON.stringify({ timestamp: Date.now(), data: data }));

        if(result)
          DialogFactory.showMessageDialog({ mensagem: "Balance updated successfully" });
        else
          DialogFactory.showMessageDialog({ mensagem: "Error occured while updating Balance" });

      });
      vm.isSaving = false;
    }
    else{
      DialogFactory.showMessageDialog({ mensagem: 'Por favor preencha os campos obrigatórios' });
    }


    }

  }
})();

angular.module('foneClub').controller('CustomersControllerNew', CustomersControllerNew).directive('setFocus', function () {
  return {
    link: function (scope, element, attrs) {
      element.bind('click', function () {
        //alert(element.attr('id'));
        document.querySelector('#' + attrs.setFocus).focus();
      })
    }
  }
})

//CustomersControllerNew.inject = ['localStorageService']

function CustomersControllerNew($interval, FoneclubeService, PagarmeService, FlowManagerService, $filter, ViewModelUtilsService, localStorageService, DialogFactory, UtilsService) {

  var vm = this;
  var CARTAO = 1;
  var BOLETO = 2;
  var PIX = 3;
  var updateGrid = false;
  vm.isMobile = UtilsService.mobileCheck();
  var cpfregex = /^\d{3}\.\d{3}\.\d{3}\-\d{2}$/;
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.diffDays = diffDays;
  vm.hidefilters = true;
  vm.statusType = {
    COBRADO: 1,
    NAO_COBRADO: 2,
    PAGO: 3,
    REFUNDED: 4,
    VENCIDO: 5
  };
  vm.PagamentosType = {
    BOLETO: 1,
    CARTAO: 2
  };
  vm.AtivoType = {
    ATIVA: 2,
    CANCELADA: 1
  }
  vm.tiposStatus = [
    { id: "", title: "" },
    { id: 1, title: 'COBRADO' },
    { id: 2, title: 'NÃO COBRADO' },
    { id: 3, title: 'PAGO' },
    { id: 4, title: 'REFUNDED' },
    { id: 5, title: 'VENCIDO' }
  ];
  vm.tiposPagamento = [
    { id: "", title: "" },
    { id: 1, title: 'BOLETO' },
    { id: 2, title: 'CARTÃO' }
  ];
  vm.tipoAtiva = [
    { id: "", title: "" },
    { id: 1, title: 'CANCELADA' },
    { id: 2, title: 'ATIVA' }
  ]
  vm.tipoAcao = [
    { id: "", title: "" },
    { id: 1, title: 'A' },
    { id: 2, title: 'C' }
  ]
  vm.includeActive = true;
  vm.includeInActive = false;
  vm.excludeProblema = false;
  vm.excludeFlag = false;
  vm.loading = false;
  vm.excludeFather = false;
  vm.excludeAddress = false;
  vm.excludeWhatsappUsers = false;
  vm.includeWhatsappUsers = false;
  vm.includeStatusGreen = false;
  vm.includeStatusYellow = false;
  vm.includeStatusRed = false;
  vm.includeStatusGray = false;
  vm.includeStatusNan = false;
  vm.filterTextInAllCols = false;
  vm.filterTextInNameOnly = false;
  vm.searchText = "";
  vm.clipBoardCopiedText = "";
  vm.agGridStates = ["All"];
  vm.customerDataSource;
  vm.customerViewModel;
  vm.selectedState = {};
  vm.defaultGridState = {};
  // vm.customerGridOptions;

  vm.filterClients = filterClients;
  vm.onTapSwitchActivate = onTapSwitchActivate;
  vm.onTapCustomer = onTapCustomer;
  vm.onTapCustomerEdit = onTapCustomerEdit;
  vm.onTapMessage = onTapMessage;
  vm.onTapFlag = onTapFlag;
  vm.onTapComment = onTapComment;
  vm.onTapBoletoPayment = onTapBoletoPayment;
  vm.onTapBoleto = onTapBoleto;
  vm.onTapDebito = onTapDebito;
  vm.onDeleteCustomer = onDeleteCustomer;
  vm.onUnDeleteCustomer = onUnDeleteCustomer;
  vm.onPageLoad = onPageLoad;
  vm.exportToExcel = exportToExcel;
  vm.filterText = filterText;
  vm.refreshPage = refreshPage;
  vm.checkRepeatOrder = checkRepeatOrder;
  vm.onTapPix = onTapPix;
  vm.onTapNewCardPayment = onTapNewCardPayment;
  vm.pasteCliboardText = pasteCliboardText;
  vm.onClipBoardSuccess = onClipBoardSuccess;
  vm.testWhatsApp = testWhatsApp;
  vm.importDrCelular = importDrCelular;
  vm.saveState = saveState;
  vm.deleteState = deleteState;
  vm.updateState = updateState;
  vm.getAgGridState = getAgGridState;
  vm.BlockUnlockLine = BlockUnlockLine;
  vm.showFilterSection = showFilterSection;


  const customNumberComparator = (valueA, valueB) => {
    if (valueA == "OFF" || valueB == "OFF") {
      valueA = valueA;
    }
    valueA = (valueA == null || valueA == "" || valueA == "OFF") ? "-1" : valueA.replace(" GB", "").replace(",", "").replace("R$", "");
    valueB = (valueB == null || valueB == "" || valueB == "OFF") ? "-1" : valueB.replace(" GB", "").replace(",", "").replace("R$", "");
    if (parseInt(valueA) == parseInt(valueB)) return 0;
    return (parseInt(valueA) > parseInt(valueB)) ? 1 : -1;
  };

  vm.gridOptions = {
    components: {
      personComponent: PersonComponent,
      customDateComponent: CustomDateComponent
    },
    columnDefs: setColumnDefs(),
    onCellValueChanged: function (event) {
      if (event != null && event.data != null) {
        var nextAction =
        {
          Id: event.data.CustomerId,
          NextActionDate: new Date(event.data.NextActionDate),
          NextActionText: event.data.NextActionText
        }
        FoneclubeService.postPersonNextAction(nextAction).then(function (result) {
        });
      }
    }
    ,
    rowData: [],
    defaultColDef: {
      sortable: true,
      filter: true,
      resizable: true,
      // supressMenuHide: true,
    },
    rowHeight: UtilsService.mobileCheck() ? 40 : 30,
    headerHeight: UtilsService.mobileCheck() ? 50 : 100,
    angularCompileRows: true,
    onGridReady: function (params) {
      this.gridApi = params.api;
      this.gridColumnApi = params.columnApi;
      var sort = [
        {
          colId: 'Ult. Pag. Dias',
          sort: 'desc',
        }
      ];
      this.gridApi.setSortModel(sort);
      if (updateGrid) {
        //vm.gridOptions.api.setRowData(vm.customers);
        bindAgGrid(vm.customers);
        vm.includeActive = true;
        filterClientsData();
        updateGrid = false;
        UpdateLastSelected();
      }
    },
    autoSizeColumns: true
  };


  vm.gridHeight = $(window).height() - 150;

  vm.resultText = "";

  function StringComparator(valueA, valueB) {
    const valueALower = valueA.toLowerCase().trim();
    const valueBLower = valueB.toLowerCase().trim();
    return valueALower.localeCompare(valueBLower, 'en', { numeric: true });
  }

  function showFilterSection() {
    vm.hidefilters = !vm.hidefilters;
  }


  //BEGIN: New Functions
  //BEGIN: AG-Grid
  function setColumnDefs() {
    var columnDefs = [
      { hide: true, field: 'CustomerId' },
      { hide: true, field: 'TipoLink' },
      { hide: true, field: 'StatusId' },
      { hide: true, field: 'Status2' },
      { hide: true, field: 'Acao' },
      { hide: true, field: 'AcaoBool' },
      { hide: true, field: 'customerSelectedCharge' },
      { hide: true, field: 'customerChargeId' },

      // On/Off color
      {
        headerName: '',
        field: 'Desativo',
        width: 45,
        pinned: 'left',
        cellRenderer: function (params) {
          var cellHtml = "";
          var customer = findCustomerById(params.node.data.CustomerId);
          cellHtml = '<a title="' + (!customer.Desativo ? "Desativar cliente" : "Ativar cliente") + '" ng-click="vm.onTapSwitchActivate(' + params.node.data.CustomerId + ', ' + params.node.id + ')" ><img class="imgOnOff link" src="content/img/' + (!customer.Desativo ? 'customeron.png' : 'customeroff.png') + '" /></a>';
          return cellHtml;
        },
        filter: true,
      },
      // payment color
      {
        headerName: '$',
        field: 'PaymentStatusColor',
        width: 30,
        pinned: 'left',
        cellRenderer: function (params) {
          if (params.value == "green")
            return "<img class='imgWhatsapp link' src='content/img/dollar-green.png' />";
          else if (params.value == "red")
            return "<img class='imgWhatsapp link' src='content/img/dollar-red.png' />";
          else if (params.value == "yellow")
            return "<img class='imgWhatsapp link' src='content/img/dollar-yellow.png' />";
          else
            return "<img class='imgWhatsapp link' src='content/img/dollar-grey.png' />";
        },
        filter: false
      },
      // whatsApp
      {
        headerName: '',
        field: 'WhatsappImage',
        width: 45,
        pinned: 'left',
        cellRenderer: function (params) {
          if (params.value == '../../content/img/message-red.png') {
            return "<a ng-click='vm.onTapMessage(" + params.node.data.CustomerId + ")' title='UnRegistered'><img class='imgWhatsapp link' src=" + params.value + " /></a>";
          } else {
            return "<a ng-click='vm.onTapMessage(" + params.node.data.CustomerId + ")' title='Registered'><img class='imgWhatsapp link' src=" + params.value + " /></a>";
          }

        },
        filter: false
      },
      // customer name
      {
        headerName: 'Name',
        field: 'CustomerName',
        width: 180,
        pinned: 'left',
        cellRenderer: function (params) {
          return "<a ng-click='vm.onTapCustomerEdit(" + params.node.data.CustomerId + ")' class='black-link'>" + params.value + "</a>";
        },
        filter: 'personComponent',
        // filterParams: {
        // 	filterOptions: [
        // 		{
        // 			displayKey: 'containString',
        // 			displayName: 'Contains String',
        // 			test: function (filterValue, cellValue) {
        // 				return checkContains(RemoveAccents(cellValue).toLowerCase(), RemoveAccents(filterValue).toLowerCase());
        // 			}
        // 		},
        // 	],
        // 	suppressAndOrCondition: true
        // }
      },
      // buttons
      {
        headerName: '',
        field: '',
        width: 340,
        cellRenderer: function (params) {
          var cellHtml = "";
          var customer = findCustomerById(params.node.data.CustomerId);

          cellHtml += '<a ng-click="vm.onTapCustomer(' + params.node.data.CustomerId + ')" title="Financeiro"><img class="imgUsd link" src="content/img/usd.jpeg" /></a>';
          cellHtml += '&nbsp;&nbsp;<a ng-click="vm.checkRepeatOrder(' + params.node.data.CustomerId + ')" title="Repetir Última Cobrança"><img class="imgrepeatcharge link" src="content/img/repeatcharge.png" /></a>';
          cellHtml += '&nbsp;<a ng-click="vm.onTapPix(' + params.node.data.CustomerId + ')" title="PIX"><img class="imgPix link" src="content/img/pix.png" /></a>';
          cellHtml += '&nbsp;<a ng-click="vm.onTapBoleto(' + params.node.data.CustomerId + ')" title="BOLETO"><img class="imgBoleto link" src="content/img/BoletoIcon.png" /></a>';
          cellHtml += '&nbsp;<a ng-click="vm.onTapNewCardPayment(' + params.node.data.CustomerId + ')" title="Credit Card"><img class="imgcc link" src="../../content/img/creditcard.png" /></a>';
          cellHtml += '&nbsp;<a ng-click="vm.onTapFlag(' + params.node.data.CustomerId + ')" title="Criar Flag"><img class="imgcc link" src="content/img/pflag.png" /></a>';
          cellHtml += '&nbsp;<a title="Soft delete" ng-click="vm.onDeleteCustomer(' + params.node.data.CustomerId + ', ' + params.node.id + ');$event.preventDefault();"><img class="imgPix link" src="content/img/cancel.png" /></a>';
          cellHtml += '&nbsp;<a title="Un delete" ng-click="vm.onUnDeleteCustomer(' + params.node.data.CustomerId + ', ' + params.node.id + ')"><img class="imgPix link" src="content/img/undelete.jpg" /></a>';
          cellHtml += '&nbsp;<a ng-click="vm.onTapComment(' + params.node.data.CustomerId + ')" title="Ordem de Serviço" ><img class="imgPix link" src="content/img/serviceorder.png" /></a>';
          if (customer.PendingFlagInteraction) {
            cellHtml += '&nbsp;<a title="Cliente com flag pendente!" class="btn btn-warning"><i>&#9873;</i></a>';
          }
          if (customer.Orphan) {
            cellHtml += '&nbsp;<button title="Cliente com problema no cadastro!" class="btn btn-warning"><i class="glyphicon glyphicon-exclamation-sign"></i></button>';
          }

          /*
          cellHtml += '&nbsp;<button ng-click="vm.onTapBoletoPayment(' + params.node.data.CustomerId + ')" title="Boleto" class="btn btn-primary"><i class="glyphicon glyphicon-retweet"></i></button>';
          cellHtml += '&nbsp;<button ng-click="vm.onTapCustomer(' + params.node.data.CustomerId + ')" title="Credit Card" class="btn btn-primary"><i class="glyphicon glyphicon-credit-card"></i></button>';
          cellHtml += '&nbsp;<button class="btn btn-primary" ng-click="vm.onTapBoleto(' + params.node.data.CustomerId + ')" title="boleto"><img src="./content/img/Boleto.png" width="15px" height="15px" /></button>';
          cellHtml += '&nbsp;<button class="btn btn-primary" ng-click="vm.onTapDebito(' + params.node.data.CustomerId + ')" title="Debit card"><img src="./content/img/debito.png" width="15px" height="15px" /></button>';
          */

          return cellHtml;
        },
        filter: false
      },
      {
        headerName: 'Agendado',
        field: 'Agendado',
        width: 85,
        editable: true,
        cellRenderer: function (params) {
          return "<label>" + params.value + "</label>";
        },
        filter: false
      },
      {
        headerName: 'Ult. Mens',
        field: 'WhatsAppStatus',
        width: 115,
        cellRenderer: function (params) {
          return "<label>" + params.value + "</label>";
        },
        filter: false
      },
      // Ult Pag Dias
      {
        headerName: 'Ult. $ Dias',
        field: 'Dias2',
        colId: 'Ult. Pag. Dias',
        width: 105,
        cellRenderer: function (params) {
          if (params.value >= 0)
            return "<div>" + params.value + "</div>";
          else
            return "<div>-</div>";
        },
        filterParams: {
          filterOptions: [
            {
              displayKey: 'largerThan',
              displayName: 'Larger than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) > parseInt(filterValue);
              }
            },
            {
              displayKey: 'smallerThan',
              displayName: 'Smaller than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) < parseInt(filterValue);
              }
            },
            'equals',
            'notEqual'
          ]
        }
      },
      // Status Cob   (Select Filter)
      {
        headerName: 'Linha',
        field: 'LineStatus',
        width: 95,
        cellRenderer: function (params) {
          if (params.value == "A") {
            return '<a ng-click="vm.BlockUnlockLine(' + params.value + ', ' + params.node.data.CustomerId + ', ' + params.node.id + ')" href="javascript:void(0);" title="Ativa"><img class="imgUsd link" style="max-width:16px" src="content/img/phone-green.png" /></a>';
          }
          else if (params.value == "C") {
            return '<a ng-click="vm.BlockUnlockLine(' + params.value + ', ' + params.node.data.CustomerId + ', ' + params.node.id + ')" href="javascript:void(0);" title="Cancelada"><img class="imgUsd link" style="max-width:16px" src="content/img/phone-black.png" /></a>';
          } else if (params.value == "B") {
            return '<a ng-click="vm.BlockUnlockLine(' + params.value + ', ' + params.node.data.CustomerId + ', ' + params.node.id + ')"  title="Bloqueada" style=""><img class="imgUsd link" style="max-width:16px" src="content/img/phone-red.png" /></a>';
          }
          else {
            return '<a class="circle_red1" ng-click="vm.BlockUnlockLine(' + params.value + ', ' + params.node.data.CustomerId + ', ' + params.node.id + ')" href="javascript:void(0);"/>';
          }
        }
      },
      // Status Cob   (Select Filter)
      {
        headerName: 'Status $',
        field: 'Status2',
        width: 95,
        cellRenderer: function (params) {
          if (params.value == 'Atrasado') {
            return "<label style='color:red;font-weight:bold'>" + params.value + "</label>";
          } else {
            return "<label>" + params.value + "</label>";
          }
        },
        filter: 'agTextColumnFilter',
        filterParams: {
          buttons: ['clear', 'apply'],
        },
      },
      // Ultima Cob
      {
        headerName: 'Ultima Cob.',
        field: 'Dias',
        width: 80,
        cellRenderer: function (params) {
          if (params.value == -1) {
            return '<div>Nan</div>'
          } else {
            return '<div>' + params.value + '</div>';
          }

        },
        filterParams: {
          filterOptions: [
            {
              displayKey: 'largerThan',
              displayName: 'Larger than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) > parseInt(filterValue);
              }
            },
            {
              displayKey: 'smallerThan',
              displayName: 'Smaller than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) < parseInt(filterValue);
              }
            },
            'equals',
            'notEqual'
          ]
        }
      },
      {
        headerName: '$ VIP',
        field: 'SumVIP',
        width: 120,
        cellRenderer: function (params) {
          return "<label>" + params.value + "</label>";
        },
        comparator: customNumberComparator
      },
      {
        headerName: 'Next Action',
        field: 'NextActionDate',
        editable: true,
        width: 120,
        cellRenderer: 'customDateComponent',
        filter: false
      },
      // payment color
      {
        headerName: 'Envio $',
        field: 'Verificar1',
        width: 80,
        cellRenderer: function (params) {
          if (params.value == 'Atrasado') {
            return "<label style='color:red;font-weight:bold'>" + params.value + "</label>";
          } else {
            return "<label>" + params.value + "</label>";
          }
        },
        filter: false
      },
      {
        headerName: 'Action',
        field: 'NextActionText',
        editable: true,
        width: 100,
        cellRenderer: function (params) {
          return params.value;
        },
        filter: false
      },
      {
        headerName: 'Ult. Agenda.',
        field: 'LastAgendado',
        width: 80,
        cellRenderer: function (params) {
          return "<label>" + params.value + "</label>";
        },
        filter: false
      },

      // Vecimento
      {
        headerName: 'Venc',
        field: 'Vencimento',
        width: 100,
        cellRenderer: function (params) {
          return renderDate(params.value);
        },
        filter: 'agDateColumnFilter',
        filterParams: {
          filterOptions: [
            {
              displayKey: 'olderThan',
              displayName: 'After than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return origin < filterValue;
              }
            },
            {
              displayKey: 'youngerThan',
              displayName: 'Before than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue < origin;
              }
            },
            {
              displayKey: 'specifics',
              displayName: 'Specific date',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue == cellValue;
              }
            }]
        }
      },
      // Tip (Select Filter)
      {
        headerName: 'Tipo',
        field: 'Tipo',
        width: 100,
        cellRenderer: function (params) {
          if (params.value != 'BOLETO') {
            return "<label>" + params.value + "</label>";
          } else {
            return "<a href=" + params.node.data.TipoLink + " target='_blank'>" + params.value + "</a>";
          }
        },
        filter: 'agTextColumnFilter',
        filterParams: {
          buttons: ['clear', 'apply'],
        },
      },
      // Vigencia
      {
        headerName: 'Vigencia',
        field: 'Vigencia',
        width: 100,
        cellRenderer: function (params) {
          return params.value;
        },
        filter: 'agDateColumnFilter',
        filterParams: {
          filterOptions: [
            {
              displayKey: 'olderThan',
              displayName: 'After than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return origin < filterValue;
              }
            },
            {
              displayKey: 'youngerThan',
              displayName: 'Before than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue < origin;
              }
            },
            {
              displayKey: 'specifics',
              displayName: 'Specific date',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue == cellValue;
              }
            }]
        }
      },
      // Ult Pag Data
      {
        headerName: 'Ult. Pago',
        field: 'Ultimopag',
        width: 100,
        cellRenderer: function (params) {
          return renderDate(params.value);
        },
        filter: 'agDateColumnFilter',
        filterParams: {
          filterOptions: [
            {
              displayKey: 'olderThan',
              displayName: 'After than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return origin < filterValue;
              }
            },
            {
              displayKey: 'youngerThan',
              displayName: 'Before than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue < origin;
              }
            },
            {
              displayKey: 'specifics',
              displayName: 'Specific date',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue == cellValue;
              }
            }]
        }

      },
      // Ult Pag R$
      {
        headerName: 'Ult. Pago $',
        field: 'RPago',
        width: 100,
        cellRenderer: function (params) {
          return params.value ? (Math.round(params.value * 100) / 100).toFixed(2) : '';
        },
        filterParams: {
          filterOptions: [
            {
              displayKey: 'largerThan',
              displayName: 'Larger than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) > parseInt(filterValue);
              }
            },
            {
              displayKey: 'smallerThan',
              displayName: 'Smaller than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) < parseInt(filterValue);
              }
            },
            'equals',
            'notEqual'
          ]
        }
      },

      // Ultima cobranca
      {
        headerName: 'Ultima Cob.',
        field: 'UltimaCob',
        width: 100,
        cellRenderer: function (params) {
          return renderDate(params.value);
        },
        filter: 'agDateColumnFilter',
        filterParams: {
          filterOptions: [
            {
              displayKey: 'olderThan',
              displayName: 'After than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return origin < filterValue;
              }
            },
            {
              displayKey: 'youngerThan',
              displayName: 'Before than',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue < origin;
              }
            },
            {
              displayKey: 'specifics',
              displayName: 'Specific date',
              test: function (filterValue, cellValue) {
                var origin = new Date(cellValue);
                return filterValue == cellValue;
              }
            }]
        }
      },
      // Ult Cob R$
      {
        headerName: 'Ult. Cob. R$',
        field: 'RCobrado',
        width: 100,
        cellRenderer: function (params) {
          return params.value ? (Math.round(params.value * 100) / 100).toFixed(2) : '';
        },
        filterParams: {
          filterOptions: [
            {
              displayKey: 'largerThan',
              displayName: 'Larger than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) > parseInt(filterValue);
              }
            },
            {
              displayKey: 'smallerThan',
              displayName: 'Smaller than',
              test: function (filterValue, cellValue) {
                return parseInt(cellValue) < parseInt(filterValue);
              }
            },
            'equals',
            'notEqual'
          ]
        }
      }
    ];

    return columnDefs;
  }

  function bindAgGrid(data) {
    var rowData = convertToViewModel(data);

    if (vm.gridOptions.api) {
      vm.gridOptions.api.setRowData(rowData);
    } else {
      updateGrid = true;
    }

    vm.loading = false;
  }

  function filterClients() {
    vm.loading = true;
    sessionStorage.setItem('searchTextMain', vm.searchText);
    filterClientsData();
  }
  function filterText() {
    if (vm.searchText) {
      filterClientsData();
    }
  }
  function filterClientsData() {
    vm.loading = true;
    var filteredData = $filter('filter')(vm.customers, function (data) {
      if (data.fullData) {
        return ((excludeAllFilters()) ||
          (filterByText(data)) &&
          ((!vm.includeActive && !vm.includeInActive) ||
            (vm.includeActive ? data.fullData.Desativo == undefined ? true : data.fullData.Desativo == false : false) ||
            (vm.includeInActive ? data.fullData.Desativo == undefined ? false : data.fullData.Desativo == true : false)) &&

          (vm.excludeProblema ? !data.fullData.Orphan : true) &&
          (vm.excludeFlag ? !data.fullData.PendingFlagInteraction : true) &&
          (vm.excludeFather ? !data.fullData.NameParent : true) &&
          (vm.excludeAddress ? !data.fullData.Adresses.length : true) &&

          ((!vm.excludeWhatsappUsers && !vm.includeWhatsappUsers) ||
            (vm.excludeWhatsappUsers ? (!data.fullData.WClient || !data.fullData.WClient.IsRegisteredWithChat2Desk) : false) ||
            (vm.includeWhatsappUsers ? (data.fullData.WClient && data.fullData.WClient.IsRegisteredWithChat2Desk) : false)) &&

          ((!vm.includeStatusGreen && !vm.includeStatusYellow && !vm.includeStatusRed && !vm.includeStatusGray && !vm.includeStatusNan) ||
            (vm.includeStatusGreen ? filterStatusColor(data, "green") : false) ||
            (vm.includeStatusYellow ? filterStatusColor(data, "yellow") : false) ||
            (vm.includeStatusRed ? filterStatusColor(data, "red") : false) ||
            (vm.includeStatusGray ? filterStatusColor(data, "grey") : false) ||
            (vm.includeStatusNan ? filterStatusColor(data, "nan") : false)));
      }
      else {
        return false;
      }
    });
    vm.resultText = filteredData.length + " of " + vm.customers.length + " items";
    bindAgGrid(filteredData);
    UpdateLastSelected();
    vm.loading = false;
  }

  function filterByText(data) {
    if (vm.searchText) {
      vm.searchText = vm.searchText.replace(".", "").replace("-", "");
      var tempsearchText = vm.searchText.replace("(", "").replace(")", "").replaceAll(" ", "");
      if (!isNaN(tempsearchText)) {
        vm.searchText = tempsearchText;
      }

      vm.searchText = vm.searchText.toLowerCase();

      if (vm.filterTextInAllCols && !vm.filterTextInNameOnly) {
        return data.Id.toString().toLowerCase().indexOf(vm.searchText) > -1 ||
          data.Name.toLowerCase().indexOf(vm.searchText) > -1 ||
          data.Email.toLowerCase().indexOf(vm.searchText) > -1 ||
          (data.fullData.DocumentNumber ? data.fullData.DocumentNumber.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
          (data.fullData.NickName ? data.fullData.NickName.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
          (data.fullData.Born ? data.fullData.Born.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
          (data.fullData.IdPagarme ? data.fullData.IdPagarme.toString().indexOf(vm.searchText) > -1 : false) ||
          matchPhone(data.Phones, vm.searchText) ||
          matchPhoneNickName(data.fullData.Phones, vm.searchText) ||
          matchICCID(data.Phones, vm.searchText) ||
          matchPortNumber(data.Phones, vm.searchText) ||
          (data.fullData.NameParent ? data.fullData.NameParent.toLowerCase().indexOf(vm.searchText) > -1 : false);
      } else {
        return data.Name.toLowerCase().indexOf(vm.searchText) > -1 || (data.fullData.DocumentNumber ? data.fullData.DocumentNumber.toLowerCase().indexOf(vm.searchText) > -1 : false) || matchPhone(data.Phones, vm.searchText) || matchICCID(data.Phones, vm.searchText) || UtilsService.checkContains(UtilsService.removeAccents(data.Name.toLowerCase()), UtilsService.removeAccents(vm.searchText));
        //return data.Name.toLowerCase().indexOf(vm.searchText) > -1;
      }
    } else {
      return true;
    }
  }

  function filterStatusColor(data, color) {
    if (color != "nan") {
      return (data.ChargeAndServiceOrderHistory &&
        data.ChargeAndServiceOrderHistory.Charges &&
        data.ChargeAndServiceOrderHistory.Charges.PaymentStatusColor == color)
    } else {
      return (data.ChargeAndServiceOrderHistory &&
        data.ChargeAndServiceOrderHistory.Charges == null)
    }

  }

  function excludeAllFilters() {
    return !vm.includeActive
      && !vm.includeInActive
      && !vm.excludeProblema
      && !vm.excludeFlag
      && !vm.excludeFather
      && !vm.excludeAddress
      && !vm.excludeWhatsappUsers
      && !vm.includeWhatsappUsers
      && !vm.includeStatusGreen
      && !vm.includeStatusYellow
      && !vm.includeStatusRed
      && !vm.includeStatusGray
      && !vm.includeStatusNan
      && !vm.searchText;
  }

  function matchPhone(phones, numberToCompare) {
    numberToCompare = numberToCompare.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~' 'éá]/g, '');
    if (phones && phones.length > 0) {
      if (phones[0] == null) {
        return false;
      } else {
        var phone = $filter('filter')(phones, function (data) {
          return (data.Number ? ("55" + data.DDD + data.Number.toString()).indexOf(numberToCompare) > -1 : false);
        });

        return phone.length > 0;
      }
    }

    return false;
  }

  function matchICCID(phones, numberToCompare) {
    if (phones && phones.length > 0) {
      if (phones[0] == null) {
        return false;
      } else {
        var phone = $filter('filter')(phones, function (data) {
          return (data.ICCID ? data.ICCID.indexOf(numberToCompare) > -1 : false);
        });

        return phone.length > 0;
      }
    }

    return false;
  }

  function matchPortNumber(phones, numberToCompare) {
    if (phones && phones.length > 0) {
      if (phones[0] == null) {
        return false;
      } else {
        var phone = $filter('filter')(phones, function (data) {
          return (data.PortNumber ? data.PortNumber.replace("-", "").replace("(", "").replace(")", "").replaceAll(" ", "").indexOf(numberToCompare) > -1 : false);
        });

        return phone.length > 0;
      }
    }

    return false;
  }

  function matchPhoneNickName(phones, nickname) {
    if (phones && phones.length > 0) {
      if (phones[0] == null) {
        return false;
      } else {
        var phone = $filter('filter')(phones, function (data) {
          return (data.NickName ? data.NickName.toLowerCase().indexOf(nickname) > -1 : false);
        });

        return phone.length > 0;
      }
    }

    return false;
  }

  function onTapSwitchActivate(id, nodeId) {
    var c = findCustomerById(id);
    var oldValue = angular.copy(c.Desativo);

    var customer = {
      Id: c.Id,
      Desativo: !c.Desativo
    };

    var confirmMessage = `
        <span class="text-center">
          Tem certeza que deseja ${c.Desativo ? 'ativar' : 'desativar'} esse cliente?
        </span>
      `;

    // TODO: confirm dialog
    ViewModelUtilsService.showConfirmDialog('Atenção!', confirmMessage).then(function (
      confirm
    ) {
      if (confirm) {
        c.Desativo = customer.Desativo;

        FoneclubeService.postPersonAtivity(customer).then(function (result) {
          if (!result) {
            customer.Desativo = oldValue;
          } else {
            // update ag-grid
            let row = vm.gridOptions.api.getRowNode(nodeId);
            var index = vm.customers.indexOf(vm.customers.filter(v => v.Id == id)[0]);
            if (index >= 0) {
              vm.customers[index].Desativo = c.Desativo;
              var res = vm.gridOptions.api.redrawRows({ rowNodes: [row] });
              sessionStorage.setItem('lastClickedRowClient', id);
              UpdateLastSelected();
            }
          }
        });
      }
    });
  }

  function GenerateSummaryMessage(chargeMsg, custName, custId) {
    var addComment = chargeMsg.ChargingComment != undefined && chargeMsg.ChargingComment != null ? "*" + chargeMsg.ChargingComment + "*" : "";
    var chargesummaryurl = window.location.origin + "/#/chargesummary/" + custId + "/" + chargeMsg.Id;

    return `🤖 FoneClube: *FoneBot*
Prezado *${custName}*,

Segue resumo da sua última cobrança que que será enviada por email e whatsapp.
${addComment}

*Vencimento:${moment(chargeMsg.DueDate).format("DD/MM")}*
*Vigencia:${chargeMsg.MesVingencia + "/" + chargeMsg.AnoVingencia}*
*Total:R$${chargeMsg.Ammount / 100}*

*Detalhes para pagamento no link abaixo.*

${chargesummaryurl}

*Para visualizar seu QrCode siga o link abaixo*

http://api.foneclube.com.br/api/pagarme/pix/qrcode/${chargeMsg.Id}

Caso tenha alguma dúvida envie um *whatsapp para*

*${'https://wa.me/5521981908190'}*

ou email para

*financeiro@foneclube.com.br*.

Obrigado pela Atenção:
*FoneClube*  👍`;
  }

  function SetSessionForRowClick(id) {
    sessionStorage.setItem('lastClickedRowClient', id);
    UpdateLastSelected();
  }

  function onTapCustomerEdit(id) {
    var customer = findCustomerById(id);
    customer.view = 1;
    SetSessionForRowClick(id);
    FlowManagerService.changeEdicaoView(customer);
  }
  function onTapMessage(id) {
    SetSessionForRowClick(id);
    var customer = findCustomerById(id);
    ViewModelUtilsService.showModalReport(customer);
  }
  function onTapFlag(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalFlag(customer);
  }
  function onTapComment(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalComment(customer);
  }
  function onTapNewCardPayment(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalNewCardPayment(customer);
  }
  function onTapPix(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalPIX(customer);
  }
  function onTapBoletoPayment(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalBoletoPayment(customer);
  }
  function onTapBoleto(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalBoleto(customer);
  }
  function onTapDebito(id) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalDebito(customer);
  }
  function onTapCustomer(id, index) {
    var customer = findCustomerById(id);
    SetSessionForRowClick(id);
    ViewModelUtilsService.showModalCustomer(customer, index);
  }
  function importDrCelular() {
    ViewModelUtilsService.showDrCelularImportTemplate();
  }
  function onUnDeleteCustomer(id, nodeId) {
    SetSessionForRowClick(id);
    var r = confirm('Deseja desfazer a exclusão deste cliente?');
    if (r == true) {
      var customer = findCustomerById(id);////
      FoneclubeService.postUnDeleteCustomer(customer).then(function (result) {
        if (result) {
        }
      });
    }
  }
  //var customerIdClicked = [];
  function onDeleteCustomer(id, nodeId) {
    //  if(customerIdClicked.filter(x=>x==id).length > 0){
    // 	return;
    // }
    // customerIdClicked.push(id);
    //var r = confirm('Deseja fazer um soft delete nesse cliente?');
    //if (r == true) {
    var customer = findCustomerById(id);////
    SetSessionForRowClick(id);
    FoneclubeService.postSoftDeleteCustomer(customer).then(function (result) {
      if (result) {
        var index = vm.customers.indexOf(vm.customers.filter(v => v.Id == id)[0]);
        if (index >= 0) {
          vm.customers.splice(index, 1);
          var row = vm.gridOptions.api.getRowNode(nodeId);
          vm.gridOptions.api.updateRowData({ remove: [row.data] });
        }
      }
    });
    //} else {
    //}
  }

  //END: New Functions

  function convertToViewModel(sourceData) {
    var customerDataList = [];
    var date = new Date();
    var dateNowString = date.toISOString().split('T')[0];

    date.setDate(date.getDate() - 30);
    var dateString = date.toISOString().split('T')[0];

    for (var i = 0; i < sourceData.length; i++) {
      var customer = sourceData[i];
      var RCobrado = customer.ammoutIntFormat;
      var customerSelectedCharge = '';
      var Desativo = false;
      var Tipo = '';
      var TipoLink = '';
      var Acao = '';
      var AcaoBool = false;
      var Vencimento = '-'
      var Vigencia = '';
      var Ultimopag = customer.LastPaidDate;
      var Dias2 = diffDays(customer.LastPaidDate);
      var RPago = customer.LastPaidAmount;
      var CustomerName = customer.Name;
      var SumVIP = "OFF";
      var Status2 = '';
      var LineStatus = 2;
      var customerChargeId = '';
      var UltimaCob = '';
      var Dias = 0;
      var Status = '';//customer.descricaoStatus;
      var PaymentStatusColor = '';
      var Verificar1 = '';
      var NextActionDate = '';
      var NextActionText = '';
      var Agendado = '';
      var LastAgendado = '';
      var whatsAppStatus = '';
      var WhatsappImage = '../../content/img/message-red.png';
      if (isNaN(Dias2)) {
        Dias2 = -1;
      }
      ///////////////
      if (customer.fullData.WClient && customer.fullData.WClient.IsRegisteredWithChat2Desk) {
        if (customer.fullData.WClient.ProfilePicUrl) {
          WhatsappImage = customer.fullData.WClient.ProfilePicUrl;
        }
        else {
          WhatsappImage = '../../content/img/message-green.png';
        }
      }

      if (customer.ChargeAndServiceOrderHistory && customer.ChargeAndServiceOrderHistory.Charges) {
        var charge = customer.ChargeAndServiceOrderHistory.Charges;
        //RPago = charge.Ammount;

        var dataCobranca = charge.CreationDate;
        var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        var mes = dataConvertida.substring(5, 7);
        var ano = dataConvertida.substring(0, 4);

        customer.chargingDate = charge.CreationDate;
        customer.chargingDateDiffDays = diffDays(dataConvertida);
        Status = charge.PaymentStatusDescription;
        Vigencia = charge.MesVingencia != undefined && charge.AnoVingencia != undefined ? renderMonthAndYearDate(new Date(charge.AnoVingencia, charge.MesVingencia, 0)) : '';

        //BEGIN: Set status color
        var charges = customer.ChargeAndServiceOrderHistory.Charges;
        charges.descriptionType = charges.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';
        if (charges.BoletoExpires) {
          var expiryDate = new Date(charges.ExpireDate);
          var expiryDateAfter3 = new Date(charges.ExpireDate);
          expiryDateAfter3.setDate(expiryDateAfter3.getDate() + 3);

          var currentDate = new Date();
          if (charges.PaymentStatusDescription == "Paid") {
            PaymentStatusColor = "green";
          }
          else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate <= expiryDate) {
            PaymentStatusColor = "green";
          }
          else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate < expiryDateAfter3) {
            PaymentStatusColor = "yellow";
          }
          else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate > expiryDateAfter3) {
            PaymentStatusColor = "red";
          }
          else {
            PaymentStatusColor = "grey";
          }

        } else {
          if (charges.PaymentStatusDescription == "Paid") {
            PaymentStatusColor = "green";
          }
          else {
            PaymentStatusColor = "grey";
          }
        }

        charges.PaymentStatusColor = PaymentStatusColor;
        //END
      }

      var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
      var mesSelecionado = selecionado.substring(5, 7);
      var anoSelecionado = selecionado.substring(0, 4);

      if (mesSelecionado == mes && anoSelecionado == ano) {
        customer.dataIgual = true;
      }
      customer.LastPaidDateDiffDays = diffDays(customer.LastPaidDate);
      UltimaCob = customer.chargingDate ? customer.chargingDate : "";
      ///////////////

      // if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
      // if (customer.descricaoStatus == '3') { Status = 'PAGO' };
      // if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
      // if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

      // if(customerChargingInfo.PaymentStatusType!=undefined)
      // {
      // 		var venciNextDay = new Date(Vencimento).setDate(new Date(Vencimento).getDate() + 1);
      // 		if(customerChargingInfo.PaymentStatusType != "Paid" &&  venciNextDay < new Date())
      // 		{
      // 			Status2 = "Atrasado"
      // 		}

      // 		else{
      // 			//Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'
      // 				Status2 = customerChargingInfo.PaymentStatusType != undefined ? customerChargingInfo.PaymentStatusType : customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa';
      // 		}
      // }

      if (customer.ChargingValidity == undefined) {
        Status2 = "Nan";
      }
      else {
        Vencimento = customer.ChargingValidity[customer.ChargingValidity.length - 1].DueDate;
        var statusFlag = customer.ChargingValidity[customer.ChargingValidity.length - 1].PaymentStatusType;
        if (statusFlag != "Paid") {
          var dueDate = customer.ChargingValidity[customer.ChargingValidity.length - 1].DueDate;
          if (dueDate != undefined) {
            if (dueDate.split('T')[0] < dateNowString) {
              Status2 = "Atrasado";
            }
            else
              Status2 = statusFlag;
          }
        }
        else {
          if (Status2 == undefined)
            Status2 = "Paid";
          else
            Status2 = statusFlag;
        }
      }

      var last30DaysCharging = customer.ChargingValidity != null ? customer.ChargingValidity.filter(x => x.CreateDate != undefined ? x.CreateDate.split(' ')[0] >= dateString : false) : [];
      var isActive = customer.ChargingValidity != null ? customer.ChargingValidity.filter(x => x.IsActive == true ? true : false) : false;
      if (last30DaysCharging.length == 0 && isActive) {
        Verificar1 = "Atrasado";
      }
      else {
        Verificar1 = "OK";
      }
      NextActionDate = customer.NextActionDate;
      NextActionText = customer.NextActionText;
      Agendado = customer.SchduleCount;
      LastAgendado = customer.LastScheduleDate;

      if (customer.WhatsAppStatus != 0) {
        if (customer.WhatsAppStatus == 1)
          whatsAppStatus = '<img class="imgWhatsappStatus link" src="content/img/whatsApp-Sent.png" />' + ' ' + customer.WhatsAppStatusDate;
        if (customer.WhatsAppStatus == 2)
          whatsAppStatus = '<img class="imgWhatsappStatus link" src="content/img/whatsApp-Delivered.png" />' + ' ' + customer.WhatsAppStatusDate;
        if (customer.WhatsAppStatus == 3)
          whatsAppStatus = '<img class="imgWhatsappStatus link" src="content/img/whatsApp-Read.png" />' + ' ' + customer.WhatsAppStatusDate;
      }

      if (customer.ChargingValidity != undefined) {

        var lastChargingRec = (customer.ChargingValidity.length - 1);
        var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

        customerSelectedCharge = customerChargingInfo;
        customerChargeId = customerChargingInfo.Id;
        if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
          //UltimaCob = customerChargingInfo.CreateDate;
        }
        if (customerChargingInfo.PaymentType == 1) {
          Tipo = 'CARTÃO';
        }
        else {
          Tipo = 'BOLETO';
          TipoLink = customerChargingInfo.BoletoUrl;
        }
        if (customerChargingInfo.PixCode != undefined && customerChargingInfo.PixCode != null && customerChargingInfo.PixCode != '') {
          Tipo = 'PIX';
        }

        if (customerChargingInfo.Canceled) {
          Acao = 'A';
          AcaoBool = true;
        }
        if (!customerChargingInfo.Canceled) {
          Acao = 'C';
        }
      }

      if (UltimaCob != undefined && UltimaCob != null && UltimaCob != '') { Dias = diffDays(UltimaCob); }

      if (customer.Name == 'Rodrigo Cardozo Pinto') {
        //debugger;

      }
      if (RPago) {
        RPago = parseFloat(RPago / 100);//.toString().replace('.', ',');
      }
      Desativo = customer.Desativo ? true : false;
      LineStatus = customer.fullData.LineStatus;
      SumVIP = customer.fullData.VIPSum;

      customerDataList.push({
        'PaymentStatusColor': PaymentStatusColor,
        'WhatsappImage': WhatsappImage,
        'LineStatus': LineStatus,
        'CustomerName': CustomerName,
        'CustomerId': customer.Id,
        'UltimaCob': UltimaCob,
        'Dias': (Dias == 0 && UltimaCob == '') ? -1 : Dias,
        'RCobrado': RCobrado,
        'Tipo': Tipo,
        'TipoLink': TipoLink,
        'Status': Status,
        'StatusId': customer.descricaoStatus,
        'Status2': Status2,
        'Acao': Acao,
        'AcaoBool': AcaoBool,
        'customerSelectedCharge': customerSelectedCharge,
        'customerChargeId': customerChargeId,
        'Vencimento': Vencimento,
        'Ultimopag': Ultimopag,
        'Dias2': Dias2,
        'RPago': RPago,
        'Vigencia': Vigencia,
        'Verificar1': Verificar1,
        'SumVIP': SumVIP,
        'NextActionDate': NextActionDate,
        'NextActionText': NextActionText,
        "Agendado": Agendado,
        "LastAgendado": LastAgendado,
        "WhatsAppStatus": whatsAppStatus,
        "Desativo": Desativo
      });
    }

    vm.customerViewModel = customerDataList;
    return customerDataList;
  }

  function onPageLoad() {
    var customers = sessionStorage.getItem('customers') == null ? null : LZString.decompress(sessionStorage.getItem('customers'));
    vm.searchText = sessionStorage.getItem('searchTextMain') == null ? "" : sessionStorage.getItem('searchTextMain');
    if (customers == undefined || customers == null || customers == 'none') {
      loadCustomers();
    } else {
      vm.customers = JSON.parse(customers);
      handleData(vm.customers);
      bindAgGrid(vm.customers);
    }
    GetDefaultState();
    var allphonelines = sessionStorage.getItem('allphonelines') == null ? null : LZString.decompress(sessionStorage.getItem('allphonelines'));
    if (allphonelines == undefined || allphonelines == null || allphonelines == 'none') {
      LoadAllPhoneLinesInBackground();
    }
  }

  function LoadAllPhoneLinesInBackground() {
    FoneclubeService.getAllPhoneLinesNew().then(function (data) {
      var str = JSON.stringify(data);
      sessionStorage.setItem('allphonelines', LZString.compress(str));
    });
  }

  function GetDefaultState() {
    FoneclubeService.getAgGridStates("Customers").then(function (result) {
      if (result != null) {
        vm.agGridStates = result.sort((a, b) => (a.txtStateName > b.txtStateName) ? 1 : ((b.txtStateName > a.txtStateName) ? -1 : 0));
        var default1 = result.find(x => x.IsDefault == true);
        if (default1) {
          vm.defaultGridState = default1;
          getAgGridState(default1);
        }
      }
    });
  }

  function loadCustomers() {
    vm.loading = true;

    vm.totalReceivedReady = false;
    hasUpdate = false;
    var ativos = vm.somenteAtivos ? 1 : 0;

    var newflow = true;
    if (newflow) {
      console.time('NewApiCall');
      FoneclubeService.getClientDashboardData(vm.month, vm.year, vm.somenteAtivos ? 1 : 0).then(function (res) {
        console.timeEnd('NewApiCall');
        var data = res[0];
        var result = res[1];

        vm.customers = [];
        for (var i in result) {
          let c = result[i];
          const customer = data.find(d => d.Id == c.Id);
          if (customer) {
            c.fullData = customer;
            // if(customer.Desativo == undefined) {
            //     vm.customers[i].fullData.Desativo = false;
            // }
            c.allChargingsCanceled = false;

            for (var o in c.ChargingValidity) {
              c.ChargingValidity[o].display = true;
            }
            vm.customers.push(c);
          } else {
            //c.fullData = {};
          }
        }
        handleData(vm.customers);
        //var gridData = vm.customers;
        //initDataProperties(gridData);
        bindAgGrid(vm.customers);
        var str = JSON.stringify(vm.customers);
        sessionStorage.setItem('customers', LZString.compress(str));
        filterClientsData();
      });
    }
    else {
      console.time('OldApiCall');
      getAllCustomers(function (data) {
        FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {
          console.timeEnd('OldApiCall');
          //vm.customers = result;
          vm.customers = [];
          for (var i in result) {
            let c = result[i];
            const customer = data.find(d => d.Id == c.Id);
            if (customer) {
              c.fullData = customer;
              // if(customer.Desativo == undefined) {
              //     vm.customers[i].fullData.Desativo = false;
              // }
              c.allChargingsCanceled = false;

              for (var o in c.ChargingValidity) {
                c.ChargingValidity[o].display = true;
              }
              vm.customers.push(c);
            } else {
              //c.fullData = {};
            }
          }
          handleData(vm.customers);
          //var gridData = vm.customers;
          //initDataProperties(gridData);
          bindAgGrid(vm.customers);
          var str = JSON.stringify(vm.customers);
          sessionStorage.setItem('customers', LZString.compress(str));
        });
      });
    }
  }

  function exportToExcel() {
    $('.k-grid-excel').trigger("click")
  }

  function findCustomerById(id) {

    for (var customer in vm.customers) {
      if (vm.customers[customer].Id == id) {
        return vm.customers[customer].fullData;
      }
    }
  }

  function getAllCustomers(callback) {
    FoneclubeService.getAllCustomers(false).then(function (result) {
      //debugger;
      var customers = result.map(function (user) {
        user.Phones = user.Phones.map(function (phone) {
          if (phone) {
            phone.phoneFull = phone.CountryCode + phone.DDD.concat(phone.Number);
          }
          return phone;
        });
        return user;
      });
      //var customersSemSoftDelete = [];
      for (var i in customers) {
        var customer = customers[i];
        if (!customer.SoftDelete) {
          customer.PhoneDDDParent = null;
          customer.PhoneNumberParent = null;
          for (var j in customer.Phones) {
            if (customer.Phones[j]) {
              if (!customer.Phones[j].IsFoneclube) {
                customer.Phones.splice(j, 1);
              }
            }
          }
          customers[i] = customer;
          //customersSemSoftDelete.push(customer);
        } else {
        }
      }
      if (!vm.filterTextInAllCols)
        customers = customers.filter(x => (x.SoftDelete == null || x.SoftDelete == false));
      callback(customers);
    });
  }

  function handleData(customers) {
    vm.callbackCount = 0;
    vm.totalBoletoCharges = 0;
    vm.totalReceived = 0;
    vm.totalCharged = 0;
    vm.totalCustomers = customers.length;
    vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
    vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

    try {
      vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
    }
    catch (erro) {
      //sem clientes
    }

    for (var index in customers) {

      var customer = customers[index];
      if (customer.Name == '1 Antonia Maria da Silva Barboza') {

      }
      try {
        customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
      }
      catch (erro) { }

      if (customer.Charged) {
        customer.statusType = vm.statusType.CARREGANDO;
        customer.registerPayd = false;
        for (var i in customer.ChargingValidity) {
          var charge = customer.ChargingValidity[i];
          try {
            customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
          }
          catch (erro) { }

          if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
            customer.ChargingValidity[i].StatusDescription = 'PAGO';
            customer.descricaoStatus = vm.statusType.PAGO;
            customer.descricaoTipo = vm.PagamentosType.CARTAO;
            customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
            customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
          }

          if (charge.PaymentType == 2 && charge.BoletoId != 0) {
            customer.descricaoTipo = vm.PagamentosType.BOLETO;
            PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {
              if (!result.length) {
                return;
              }
              //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
              result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



              if (result[0].status == "waiting_payment") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                if (!result[0].elemento.registerPayd) {
                  result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                }

                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                } else {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                }
              }
              else if (result[0].status == "paid") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                try {

                }
                catch (erro) { }

                result[0].elemento.registerPayd = true;
                result[0].elemento.status = charge.StatusDescription;
                result[0].vm.totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
              }
              else {
                // ;
              }
              charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

              result[0].vm.callbackCount++;

              if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                vm.totalReceivedReady = true;
              }
            })
          }

          if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
            customer.descricaoStatus = vm.statusType.REFUNDED;
            customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
          }

          if (charge.BoletoId == 0 && charge.PaymentType == 2) {
            if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
              vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
              customer.descricaoStatus = 'INVÁLIDO';
            }

          }
        }

        var chargValInd = customer.ChargingValidity != undefined ? customer.ChargingValidity.length - 1 : 0;

        vm.totalCharged += parseInt(customer.ChargingValidity[chargValInd].Ammount);

        if (customer.ChargingValidity[0].Payd == true) {
          vm.totalReceived += parseInt(customer.ChargingValidity[chargValInd].Ammount)
        }

        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[chargValInd].Ammount) / 100);
        customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
        customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.ammoutInt = parseFloat(customer.ammout);
        customer.ammoutIntFormat = customer.ammoutInt;//.toString().replace('.', ',');
      }
      else {
        customer.status = 'NÃO COBRADO';
        customer.descricaoStatus = vm.statusType.NAO_COBRADO;
        customer.ammoutInt = 0;
        customer.ammoutIntPaid = 0;
      }
    }
    vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

  }

  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
  var secondDate = new Date();

  function diffDays(date) {
    var firstDate = new Date(date);
    return Math.floor(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
  }

  vm.onDesativarBoleto = onDesativarBoleto;
  vm.onAtivarBoleto = onAtivarBoleto;

  function onDesativarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, true)
            .then(function (value) {
              if (value) {
                charge.Canceled = true;
              }
            })
        }
      })
  }

  function onAtivarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, false)
            .then(function (value) {
              if (value) {
                charge.Canceled = false;
              }
            })
        }
      })
  }
  function refreshPage() {
    // sessionStorage.setItem('customers', LZString.compress('none'));
    loadCustomers()
    loading = true
    // location.reload();
  }

  function renderDate(value) {
    if (value != '' && value && value != '-') {
      var str = new Date(value);
      str = str.toLocaleDateString('en-us', { month: 'short', day: '2-digit', year: 'numeric' });
      return '<div>' + str + '</div>';
    }
    return '<div></div>';
  }

  function renderMonthAndYearDate(value) {
    if (value != '' && value && value != '-') {
      var str = new Date(value);
      str = str.toLocaleDateString('en-us', { month: 'short', year: 'numeric' }).replace(' ', ', ');
      return '<div>' + str + '</div>';
    }
    return '<div></div>';
  }

  function onClipBoardSuccess(event) {
    //debugger;
    vm.clipBoardCopiedText = event.text;
  }

  function pasteCliboardText(event) {
    //debugger;
    vm.searchText = vm.clipBoardCopiedText;
    var $activeElement = angular.element(document.getElementById('filterCustomers'));
    $activeElement.attr('focused', 'yes'); // Example usage
  }

  function checkRepeatOrder(customerId) {
    vm.loading = true;
    FoneclubeService.getChargeAndServiceOrderHistory(customerId).then(function (result) {

      //debugger;
      var customer = findCustomerById(customerId);
      if (result != undefined && result[0] != undefined && result[0].Charges != undefined) {
        if (result[0].Charges.PaymentType == PIX && result[0].Charges.PixCode != undefined) {

          ViewModelUtilsService.showModalPIX(customer);
        }
        else if (result[0].Charges.PaymentType == BOLETO) {
          ViewModelUtilsService.showModalBoleto(customer);
        }
        else if (result[0].Charges.PaymentType == CARTAO) {
          var custId = "";
          var cardId = result[0].Charges.TransactionComment;
          if (!customer.IdPagarme) {
            custId = customer.DocumentNumber;
            PagarmeService.getCustomer(custId)
              .then(function (result) {
                try {
                  var pagarmeID = result[0].id;
                  PagarmeService.getCard(pagarmeID)
                    .then(function (result) {
                      var cardsResult = result.sort(function (a, b) {
                        return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
                      });
                      var lastCard = cardsResult.find(x => x.id == cardId);
                      if (lastCard) {
                        ViewModelUtilsService.showModalExistentCardPayment(customer, lastCard);
                      }
                      else
                        ViewModelUtilsService.showModalNewCardPayment(customer);
                    })
                    .catch(function (error) {
                      ViewModelUtilsService.showModalNewCardPayment(customer);
                    });
                } catch (erro) {
                  ViewModelUtilsService.showModalNewCardPayment(customer);
                }
              })
              .catch(function (error) {
                ViewModelUtilsService.showModalNewCardPayment(customer);
              });
          }
          else {
            custId = customer.IdPagarme;

            PagarmeService.getCard(custId)
              .then(function (result) {
                var cardsResult = result.sort(function (a, b) {
                  return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
                });
                var lastCard = cardsResult.find(x => x.id == cardId);
                if (lastCard) {
                  ViewModelUtilsService.showModalExistentCardPayment(customer, lastCard);
                }
                else
                  ViewModelUtilsService.showModalNewCardPayment(customer);
              })
              .catch(function (error) {
                ViewModelUtilsService.showModalNewCardPayment(customer);
              });
          }

        }
      }
      vm.loading = false;
    });
  }

  function testWhatsApp() {
    var dataMessage = {
      ClientIds: "5521982008200,5521981908190",
      Message: vm.searchText.replace(/\|/g, '')
    };

    FoneclubeService.postSendWhatsAppMessageNew(dataMessage).then(function (result) {
      if (result == true)
        alert("Message sent successfully");
      else
        alert("Error occured while sending message");
    });
  }


  function saveState() {
    var retVal = prompt("Enter save state name : ", "state name here");
    var saveStateData = {
      intId: -1,
      txtStateName: retVal,
      txtAgidName: 'Customers',
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
    }
    if (retVal != "null" && retVal != null) {
      FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
        alert('Saved successfully')
      });
    }
  }

  function updateState() {
    var retVal = prompt("Enter save state name to update: ", vm.defaultGridState.txtStateName);
    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtStateName: retVal,
      txtAgidName: 'Customers',
      txtColumnState: JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
      txtFilterModel: JSON.stringify(vm.gridOptions.api.getFilterModel()),
      txtSortModel: JSON.stringify(vm.gridOptions.api.getSortModel())
    }
    FoneclubeService.saveAgGridState(saveStateData).then(function (result) {
      alert('Updated successfully')
    });
  }

  function deleteState() {
    ViewModelUtilsService.showConfirmDialog('Atenção!', 'Are you sure, you want to delete?').then(function (confirm) {
      if (confirm) {
        var deleteStateData = {
          intId: vm.defaultGridState.intId,
          txtAgidName: 'Customers'
        }
        FoneclubeService.deleteAgGridState(deleteStateData).then(function (result) {
          alert('Deleted successfully')
        });
      }
    });
  }

  function BlockUnlockLine(value, custId, nodeId) {
    var custName = vm.customers.find(x => x.Id == custId).Name;
    if (value == "A") {
      DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' })
        .then(function (result) {
          if (!result) {
            DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' })
              .then(function (result) {
                var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
                if (!result) {
                  var data = {
                    PersonId: custId
                  }
                  FoneclubeService.permanentBlockLineForCustomer(data).then(function (result) {
                    if (result != null) {
                      showLoader.close();
                      var resDisplay = "";
                      for (var ir = 0; ir < result.length; ir++) {
                        resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.status + " Mensagem: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                      }

                      ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                        if (confirm) {

                          let row = vm.gridOptions.api.getRowNode(nodeId);
                          var index = vm.customers.indexOf(vm.customers.filter(v => v.Id == custId)[0]);
                          if (index >= 0) {
                            vm.customers[index].fullData.LineStatus = 2;
                            vm.gridOptions.api.redrawRows({ rowNodes: [row] });
                          }
                          var str = JSON.stringify(vm.customers);
                          sessionStorage.setItem('customers', LZString.compress(str));
                          bindAgGrid(vm.customers);
                          GetDefaultState();

                          var resDisplay = "";

                          sessionStorage.setItem('lastClickedRowClient', custId);
                          UpdateLastSelected();
                        }
                        else {
                          showLoader.close();
                        }
                      });
                    }
                    else {
                      showLoader.close();
                      DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
                    }
                  });
                }
              });
          }
          else {

          }
        });
    }
    else if (value == "B") {
      DialogFactory.dialogConfirm({ titulo: 'Desbloquear linhas', mensagem: '<span>Deseja desbloquear todas as linhas para ' + custName + '</span>', btn1: 'SIM', btn2: 'Temporariamente' })
        .then(function (result) {
          if (!result) {
            var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
            var data = {
              PersonId: custId
            }
            FoneclubeService.permanentUnBlockLineForCustomer(data).then(function (result) {
              if (result != null) {
                var resDisplay = "";
                showLoader.close();
                for (var ir = 0; ir < result.length; ir++) {
                  resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.status + " Mensagem: " + result[ir].BlockLineResponse.mensagem + "<br/>";
                }

                ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
                  if (confirm) {
                    let row = vm.gridOptions.api.getRowNode(nodeId);
                    var index = vm.customers.indexOf(vm.customers.filter(v => v.Id == custId)[0]);
                    if (index >= 0) {
                      vm.customers[index].fullData.LineStatus = 1;
                      vm.gridOptions.api.redrawRows({ rowNodes: [row] });
                    }
                    var str = JSON.stringify(vm.customers);
                    sessionStorage.setItem('customers', LZString.compress(str));
                    bindAgGrid(vm.customers);
                    GetDefaultState();
                    sessionStorage.setItem('lastClickedRowClient', custId);
                    UpdateLastSelected();
                  }
                  else {
                    showLoader.close();
                  }
                });
              }
              else {
                DialogFactory.showMessageDialog({ mensagem: 'Error occured: ' + result });
              }
            });
          }
          else {

          }
        });
    }
    else {
      alert('Selected customer does not have any contel lines')
    }
  }

  function UpdateLastSelected() {
    let IDofRowToSelect = parseInt(sessionStorage.getItem('lastClickedRowClient'));
    if (IDofRowToSelect != null && vm.gridOptions.api != null) {
      vm.gridOptions.api.forEachNode((node) => {
        node.setSelected(node.data.CustomerId == IDofRowToSelect);
        if (node.data.CustomerId == IDofRowToSelect) {
          vm.gridOptions.api.ensureIndexVisible(node.rowIndex, 'middle');
        }
      });
    }
  }

  function getAgGridState(stateName) {
    var res = vm.agGridStates.find(x => x.txtStateName == vm.defaultGridState.txtStateName);
    if (res != null && res.txtFilterModel != undefined && res.txtColumnState != undefined) {
      vm.gridOptions.api.setFilterModel(JSON.parse(res.txtFilterModel));
      vm.gridOptions.columnApi.setColumnState(JSON.parse(res.txtColumnState));
      vm.gridOptions.api.setSortModel(JSON.parse(res.txtSortModel));
    }

    var saveStateData = {
      intId: vm.defaultGridState.intId,
      txtAgidName: 'Customers',
    }
    FoneclubeService.updateDefaultGridState(saveStateData).then(function (result) {
    });
  }

  function PersonComponent() {
  }


  PersonComponent.prototype.init = function (params) {
    this.valueGetter = params.valueGetter;
    this.filterText = null;
    this.setupGui(params);
  }

  // not called by AG Grid, just for us to help setup
  PersonComponent.prototype.setupGui = function (params) {
    this.gui = document.createElement('div');
    this.gui.innerHTML = `<div style="padding: 4px; width: 200px;">
					<div style="font-weight: bold;">Name Filter</div>
					<div>
						<input style="margin: 4px 0 4px 0;" type="text" id="filterText" placeholder="Enter Name"/>
					</div>
				</div>
			`;

    const listener = (event) => {
      this.filterText = event.target.value;
      params.filterChangedCallback();
    };

    this.eFilterText = this.gui.querySelector('#filterText');
    this.eFilterText.addEventListener('changed', listener);
    this.eFilterText.addEventListener('paste', listener);
    this.eFilterText.addEventListener('input', listener);
    // IE doesn't fire changed for special keys (eg delete, backspace), so need to
    // listen for this further ones
    this.eFilterText.addEventListener('keydown', listener);
    this.eFilterText.addEventListener('keyup', listener);
  }

  PersonComponent.prototype.getGui = function () {
    return this.gui;
  }

  PersonComponent.prototype.doesFilterPass = function (params) {
    // make sure each word passes separately, ie search for firstname, lastname
    let passed = true;
    this.filterText
      .toLowerCase()
      .split(' ')
      .forEach((filterWord) => {
        const value = this.valueGetter(params);

        if (value.toString().toLowerCase().indexOf(filterWord) < 0) {
          passed = false;
        }
      });

    return passed;
  }

  PersonComponent.prototype.isFilterActive = function () {
    return this.filterText != null && this.filterText !== '';
  }

  PersonComponent.prototype.getModel = function () {
    return { value: this.filterText.value };
  }

  PersonComponent.prototype.setModel = function (model) {
    this.eFilterText.value = model.value;
  }


  function CustomDateComponent() {
  }

  CustomDateComponent.prototype.init = function (params) {
    const template = `
           <input type="text" data-input style="width: 100%;" />
           <a class="input-button" title="clear" data-clear>
               <i class="fa fa-times"></i>
           </a>`;

    this.params = params;

    this.eGui = document.createElement('div');
    this.eGui.setAttribute('role', 'presentation');
    this.eGui.classList.add('ag-input-wrapper');
    this.eGui.classList.add('custom-date-filter');
    this.eGui.innerHTML = template;

    this.eInput = this.eGui.querySelector('input');

    this.picker = flatpickr(this.eGui, {
      onChange: this.onDateChanged.bind(this),
      dateFormat: 'd/m/Y',
      wrap: true
    });

    this.picker.calendarContainer.classList.add('ag-custom-component-popup');

    if (params.data.NextActionDate != undefined) {
      this.setDate(new Date(params.data.NextActionDate));
    }
    else
      this.date = null;
  }

  CustomDateComponent.prototype.getGui = function () {
    return this.eGui;
  }

  CustomDateComponent.prototype.onDateChanged = function (selectedDates) {
    this.date = selectedDates[0] || null;
    this.params.data.NextActionDate = this.date;
  }

  CustomDateComponent.prototype.getDate = function () {
    return this.date;
  }

  CustomDateComponent.prototype.setDate = function (date) {
    this.picker.setDate(date);
    this.date = date;
  }

  CustomDateComponent.prototype.setInputPlaceholder = function (placeholder) {
    this.eInput.setAttribute('placeholder', placeholder);
  }

};


StatusChargingController.$inject = ['$interval', 'FoneclubeService', 'PagarmeService', 'FlowManagerService', '$filter', 'ViewModelUtilsService', 'DialogFactory', 'UtilsService'];

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('NewCardPaymentModalController', NewCardPaymentModalController);


    NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter' ,'$timeout'];
    function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter, $timeout) {


        var vm = this;
        var customer = ViewModelUtilsService.modalNewCardPaymentData;
        vm.customer = customer;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        var cardToken = "";
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.calculate = calculate;

        vm.amount = 0;
        vm.amountTemp = 0;
        vm.amountTemp1 = 0;
        vm.bonus = 0;
        vm.vigenciaField = moment().subtract(1, 'day').format("YYYY MM");
        vm.validatePhone = validatePhone;
        vm.customerPhones="";
        vm.showCopyButtons = true;
        vm.etapaDados = true;
        vm.chargeDisabled = true;
        vm.checkOne = checkOne;
        vm.changeTextValue = changeTextValue;
        vm.copyForWhatsapp = copyForWhatsapp;
        vm.copyForTelegram = copyForTelegram;
        vm.generateAndPasteDefaults = generateAndPasteDefaults;

        vm.chargeStatusfirst = false;
        vm.chargeStatusSecond = false;

        vm.AdditionalComment = "";
        vm.defaultTemplateText = `🤖 FoneClube: FoneBot
Prezado *|clientname|*,

Segue resumo da sua última cobrança que que será enviada por email e whatsapp.  
*|Detalhes.Cobrança|*

Vigencia:*|mes|* 
Total:*R$|total|*

Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}*

ou email para 

*financeiro@foneclube.com.br*.  

Obrigado pela Atenção: 
*FoneClube*  👍`;
        

        init();

        function init() {
        vm.chargeStatusfirst = true;
        vm.chargeStatus = 1;
        FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
            console.log('FoneclubeService.getTotaisComissoes')
            console.log(result)
            //debugger
            vm.bonus = parseFloat(result.ValorTotalLiberadoParaPagarCliente/ 100).toFixed(2);

          })

            FoneclubeService.getLastPersonCharging(customer.Id).then(function (result) {
                // debugger
                
                if(result.txtCommentEmail !=undefined)
                vm.customerComment = decodeURIComponent(result.txtCommentEmail);
                else{
                    vm.customerComment =  vm.defaultTemplateText;
                }
                if(result.txtComment !=undefined){
                    vm.comment = decodeURIComponent(result.txtComment);
                }
                else
                vm.comment =  vm.defaultTemplateText;
                if(result.dteValidity!=null)
                    vm.vigenciaField = moment(result.dteValidity).format("YYYY MM");
                vm.amount = result.txtAmmountPayment/100;
                vm.amountTemp = vm.amount.toFixed(2);
                vm.amountTemp1 = vm.amount.toFixed(2);

                 if(result.txtWAPhones == undefined || result.txtWAPhones == null)
                    vm.customerPhones = customer.Phones.filter(x=>!x.IsFoneclube)[0].DDD + customer.Phones.filter(x=>!x.IsFoneclube)[0].Number;
                  else
                    vm.customerPhones=result.txtWAPhones;
                  validatePhone();
            })
        }

        function checkOne(val) {
          //alert('xx');
          vm.chargeDisabled = false;
          if (val == '1') {
            vm.chargeStatusfirst = true;
            vm.chargeStatusSecond = false;
            vm.chargeStatus = 1;
          }
          if (val == '2') {
            vm.chargeStatusSecond = true;
            vm.chargeStatusfirst = false;
            vm.chargeStatus = 2;
          }
        }

        function changeTextValue(){
            if(vm.customerComment!=undefined){
            vm.replaceIndex = 0;
            vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/g, autoRepalceText);
            vm.replaceIndex = 0;
            }
      }

      function autoRepalceText(match, start, changeValue, end, offset, string) {
        var resStr = "";

        if(vm.replaceIndex == 0){
          resStr = vm.customer.Name;
        }
        if(vm.replaceIndex == 1){
          vm.AdditionalComment = changeValue;
          resStr = changeValue;
        }
        if(vm.replaceIndex == 2){
          resStr = vm.vigenciaField.split(" ")[1] ? new Date(0,parseInt(vm.vigenciaField.split(" ")[1]),0).toLocaleDateString('pt-br', { month: 'long'}) : '';
        }
        if(vm.replaceIndex == 3){
          resStr =  vm.amountTemp1;
        }
        vm.replaceIndex++;

        return start + resStr + end;
      }


        function calculate() {
          var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
          var bonus = vm.bonus.toString().indexOf('.') > -1 ? parseFloat(vm.bonus) : parseFloat(vm.bonus) / 100;
          vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
          if (vm.pagar) {
            vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
          }
          else {
            vm.amount = parseFloat(amount).toFixed(2);
          }

          if (isNaN(vm.amount)) {
            vm.amount = 0;
          }

          vm.amountTemp1 = vm.amount;
          changeTextValue();
        }

        function onTapConfirmarPagamento() {
            // debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }

            if (parseInt(vm.amount) < 1) {
              DialogFactory.showMessageDialog({ mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.', titulo: 'Aviso' });
              return;
            }

            if (!vm.chargeStatus) {
              vm.chargeStatusDiv = true;
              vm.etapaDados = false;
              vm.etapaConfirmacao = false;
            }
            else {
              vm.etapaDados = false;
              vm.etapaConfirmacao = true;
              vm.chargeStatusDiv = false;
            }
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            vm.chargeStatusDiv = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('NewCardPaymentModalController');

        var customerId = customer.Id;
        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            // debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            paymentNewCustomer();
        }

        function getContactPhone(customer){

            try{
                return {
                    'ddd' : customer.Phones[0].DDD.toString(),
                    'number' : customer.Phones[0].Number.toString()
                }
            }
            catch(e){
                return {
                    'ddd' : '21',
                    'number' : '997865645'
                }
            }
            
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

          // debugger;
          SaveDefaults();
          var em = vm.amount.toString().split(".");
          if (em[1] != undefined) {
            vm.amount = vm.amount.toString().replace(".", "")

          }

            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                // debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    if(result.status=="refused"){
                          $timeout(function(){
                        FoneclubeService.getLastTransactionIdByCustomer(vm.customer.DocumentNumber).then(function(result){
      
                            vm.message = 'Transação recusada';
                            var customerCharging = {
                                Id: vm.customer.Id,
                                Charging:{
                                    Comment:encodeURIComponent(vm.comment),
                                    CommentEmail:encodeURIComponent(vm.customerComment),
                                    Ammount: vm.amount,
                                    CollectorName: MainUtils.getAgent(),
                                    PaymentType: CARTAO,
                                    AnoVingencia: moment(vm.vigenciaField).format("YYYY"),
                                    MesVingencia: moment(vm.vigenciaField).format("MM"),
                                    ChargeStatus: vm.chargeStatus,
                                    TransactionId: result != ""? parseInt(result) : 0,
                                    TransactionComment: card.id,
                                    Token:result.token,
                                    ChargingComment: vm.AdditionalComment,
                                    TxtWAPhones:vm.customerPhones,
                                    DueDate: moment().toDate(),
                                    MutliVigencias: [vm.vigenciaField]
                                }
                            }
                            FoneclubeService.sendWhatsAppMessageCCRefused(customerCharging).then(function(result){
                              FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                                console.log('FoneclubeService.postHistoryPayment');
                                console.log(result);
                                vm.statusTransaction = 'Transação recusada';
                                vm.disableTapPay = false;
                                vm.cobrancaRealizada = true; 
                            });
                            });
                          
                        })
                    }, 10000);
                      }
                    else
                    {

                    // debugger;
                    vm.statusTransaction = 'Transação em andamento';

                    cardToken = result.token;
                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                      // debugger;
                      vm.TransactionId = result.tid;
                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        if(vm.customerComment == undefined)
                            vm.customerComment = ''

                        var emailObject = {
                            'Id':vm.customer.Id,
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'CustomerComment':vm.customerComment,
                            'TargetSecondaryText' : vm.customerComment,
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        
                        if(vm.pagar && vm.bonus != '0.00')
                        {
                            emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',')
                        }

                        
                        try{
                            var chargingLog = {
                                'customer': newCustomer,
                                'ammount': vm.amount,
                                'email':emailObject,
                                'pagarmeResponse': result,
                                'customerComment':vm.customerComment,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }


                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });
                    }

                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function SaveDefaults()
            {
              //debugger;
              var paymentInfo = {
                Id : vm.customer.Id,
                DefaultWAPhones : vm.customerPhones
              };
              FoneclubeService.saveDefaultPaymentInfo(paymentInfo).then(function (result) {
                    return false;
              });
            }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:encodeURIComponent(vm.comment),
                        CommentEmail:encodeURIComponent(vm.customerComment),
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO,
                        AnoVingencia:vm.vigenciaField.split(" ")[0],
                        MesVingencia: vm.vigenciaField.split(" ")[1],
                        ChargeStatus: vm.chargeStatus,
                        TransactionId: vm.TransactionId,
                        ComissionConceded: vm.pagar,
                        TransactionComment: cardToken,
                        ChargingComment: vm.AdditionalComment,
                        TxtWAPhones:vm.customerPhones,
                        DueDate: moment().toDate(),
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);

                    if(vm.pagar)
                    {   FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
                        //alert('success!!');
                      })
                        .catch(function (error) {
  
                        })
                    }
                    
                })
                .catch(function(error){
                    alert('Aviso em verificação secundária, printar tela - ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + ' ncpc442' 
                        )
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

        function copyForWhatsapp(){
            ClipBoardCopy(vm.customerComment.replace(/\|/g, ''));
          }

          function copyForTelegram(){
            ClipBoardCopy(vm.customerComment.replace(/\|/g, '').replace(/\*/g, '**'));
          }
          function ClipBoardCopy(text_to_share) {
            // create temp element
            var copyElement = document.createElement("pre");
            copyElement.appendChild(document.createTextNode(text_to_share));
            copyElement.id = 'tempCopyToClipboard';
            angular.element(document.body.append(copyElement));
      
            // select the text
            var range = document.createRange();
            range.selectNode(copyElement);
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
      
            // copy & cleanup
            document.execCommand('copy');
            window.getSelection().removeAllRanges();
            copyElement.remove();
          }

          function generateAndPasteDefaults(){
            vm.customerComment = vm.defaultTemplateText;
            changeTextValue();
            ClipBoardCopy(vm.customerComment);
          }

           function validatePhone(){
              var checkPhoneNums = vm.customerPhones.replace(/[^0-9\.,]/g, "");
              FoneclubeService.validatePhoneForWA(checkPhoneNums).then(function(result){
                if(result){
                  var validNumbers = result.split('|')[0];
                  var invalidNumbers = result.split('|')[1];
                  vm.customerPhones = validNumbers;
                  if(invalidNumbers)
                    vm.customersInvalidPhones = "Invlaid numbers : "+ invalidNumbers;
                  else
                    vm.customersInvalidPhones ="Ok";
                }
              });
            }
    }
})();

angular.module('foneClub').controller('CustomersControllerNew2', CustomersControllerNew2).directive('setFocus',function(){
	return {
	   link:  function(scope, element, attrs){
		 element.bind('click',function(){
				//alert(element.attr('id'));
			  document.querySelector('#' + attrs.setFocus).focus();
		  })
	   }
	 }
})

//CustomersControllerNew.inject = ['localStorageService']

function CustomersControllerNew2($interval, FoneclubeService, PagarmeService, FlowManagerService, $filter, ViewModelUtilsService, localStorageService,DialogFactory,UtilsService) {

	var vm = this;
	var CARTAO = 1;
	var BOLETO = 2;
	var PIX = 3;
	vm.isMobile = UtilsService.mobileCheck();
	vm.Data = null;
	vm.hidefilters = true;
	vm.searchText = "";
	vm.resultText = "";
	vm.includeActive = true;
	vm.includeInActive = false;
	vm.clipBoardCopiedText = "";
	vm.filterTextInAllCols = false;
	vm.filterTextInNameOnly = false;
	vm.includeStatusGreen = false;
	vm.includeStatusYellow = false;
	vm.includeStatusRed = false;
	vm.includeStatusGray = false;
	vm.includeStatusNan = false;
	vm.gridHeight = $(window).height();
	vm.onTapSwitchActivate = onTapSwitchActivate;
	vm.onTapCustomer = onTapCustomer;
	vm.onTapCustomerEdit = onTapCustomerEdit;
	vm.onTapMessage = onTapMessage;
	vm.onTapFlag = onTapFlag;
	vm.onTapComment = onTapComment;
	vm.onTapPix = onTapPix;
	vm.onTapNewCardPayment = onTapNewCardPayment;
	vm.onTapBoletoPayment = onTapBoletoPayment;
	vm.onTapBoleto = onTapBoleto;
	vm.onTapDebito = onTapDebito;
	vm.onDeleteCustomer = onDeleteCustomer;
	vm.onUnDeleteCustomer = onUnDeleteCustomer;
	vm.onPageLoad= onPageLoad;
	vm.showFilterSection = showFilterSection;
	vm.filterText = filterText;
	vm.filterClients = filterClients;
	vm.pasteCliboardText = pasteCliboardText;
	vm.onClipBoardSuccess = onClipBoardSuccess;
	vm.importDrCelular = importDrCelular;
	vm.exportToExcel = exportToExcel;
	vm.testWhatsApp = testWhatsApp;
	vm.saveState = saveState;
	vm.deleteState = deleteState;
    vm.updateState = updateState;
	vm.getAgGridState = getAgGridState;
	vm.BlockUnlockLine = BlockUnlockLine;
	vm.checkRepeatOrder = checkRepeatOrder;
	
	const customNumberComparator = (valueA, valueB) => {
		if(valueA =="OFF" || valueB=="OFF"){
			valueA = valueA;
		}
    	valueA = (valueA == null || valueA == "" || valueA == "OFF") ? "-1" : valueA.replace(" GB","").replace(",","").replace("R$","");
    	valueB = (valueB == null || valueB == "" || valueB == "OFF") ? "-1" : valueB.replace(" GB","").replace(",","").replace("R$","");
    	if (parseInt(valueA) == parseInt(valueB)) return 0;
    	return (parseInt(valueA) > parseInt(valueB)) ? 1 : -1;
  	};

	vm.gridOptions = {
		components: {
			personComponent : PersonComponent,
			customDateComponent : CustomDateComponent
		},
		columnDefs: setColumnDefs(),
		onCellValueChanged: function(event) {
			if(event!=null && event.data!=null){
				var nextAction = 
				{
					Id : event.data.Id,
					NextActionDate : new Date(event.data.NextActionDate),
					NextActionText: event.data.NextAction
				}
				FoneclubeService.postPersonNextAction(nextAction).then(function (result) {
				});
			}
		}
        ,
		rowData: [],
		defaultColDef: {
			sortable: true,
			filter: true,
			resizable: true,
			// supressMenuHide: true,
		},
		rowHeight: UtilsService.mobileCheck() ? 40: 30,
		headerHeight: UtilsService.mobileCheck() ? 50: 100,
		angularCompileRows: true,
		onGridReady: function (params) {
			this.gridApi = params.api;
    		this.gridColumnApi = params.columnApi;
		},
		autoSizeColumns: true
	};


	vm.gridHeight = $(window).height() - 150;

	vm.resultText = "";

	function StringComparator(valueA, valueB) {
    	const valueALower = valueA.toLowerCase().trim();
    	const valueBLower = valueB.toLowerCase().trim();
    	return valueALower.localeCompare(valueBLower, 'en', { numeric: true });
	}



	//BEGIN: New Functions
	//BEGIN: AG-Grid
	function setColumnDefs() {
		var columnDefs = [
			{ hide: true, field: 'Id' },
			// On/Off color
			{
				headerName: '',
				field: 'Desativo',
				width: 30,
				pinned:'left',
				cellRenderer: function (params) {
					var cellHtml = "";
						cellHtml='<a title="' + (!params.value ? "Desativar cliente" : "Ativar cliente") +'" ng-click="vm.onTapSwitchActivate(' + params.node.data.Id + ', ' + params.node.id + ')" ><img class="imgOnOff link" src="content/img/'+(!params.value ? 'customeron.png' : 'customeroff.png') + '" /></a>';
					return cellHtml;
				},
				filter: true,
			},
			// payment color
			{
				headerName: '$',
				field: 'PaymentStatusColor',
				width: 30,
				pinned:'left',
				cellRenderer: function (params) {
					if(params.value == "green")
						return "<img class='imgWhatsapp link' src='content/img/dollar-green.png' />";
					else if(params.value == "red")
						return "<img class='imgWhatsapp link' src='content/img/dollar-red.png' />";
					else if(params.value == "yellow")
						return "<img class='imgWhatsapp link' src='content/img/dollar-yellow.png' />";
					else
						return "<img class='imgWhatsapp link' src='content/img/dollar-grey.png' />";
				},
				filter: false
			},
			// whatsApp
			{
				headerName: '',
				field: 'WhatsappImage',
				width: 45,
				pinned:'left',
				cellRenderer: function (params) {
					params.value= "../../content/img/message-green.png";
					if (params.value == '../../content/img/message-red.png') {
						return "<a ng-click='vm.onTapMessage(" + params.node.data.Id + ")' title='UnRegistered'><img class='imgWhatsapp link' src=" + params.value + " /></a>";
					} else {
						return "<a ng-click='vm.onTapMessage(" + params.node.data.Id + ")' title='Registered'><img class='imgWhatsapp link' src=" + params.value + " /></a>";
					}
				},
				filter: false
			},
			// customer name
			{
				headerName: 'Name',
				field: 'Name',
				width: 250,
				pinned:'left',
				cellRenderer: function (params) {
					return "<a ng-click='vm.onTapCustomerEdit(" + params.node.data.Id + ",\""+ params.node.data.DocumentNumber+"\")' class='black-link'>" + params.value + "</a>";
				},
				filter: 'personComponent',
			},
			// buttons
			{
				headerName: '',
				field: '',
				width: 230,
				cellRenderer: function (params) {
					var cellHtml = "";
					//var customer = findCustomerById(params.node.data.Id);
					
					cellHtml += '<a ng-click="vm.onTapCustomer(' + params.node.data.Id + ')" title="Financeiro"><img class="imgUsd link" src="content/img/usd.jpeg" /></a>';
					cellHtml += '&nbsp;&nbsp;<a ng-click="vm.checkRepeatOrder(' + params.node.data.Id + ')" title="Repetir Última Cobrança"><img class="imgrepeatcharge link" src="content/img/repeatcharge.png" /></a>';
					cellHtml += '&nbsp;<a ng-click="vm.onTapPix(' + params.node.data.Id + ')" title="PIX"><img class="imgPix link" src="content/img/pix.png" /></a>';
					cellHtml += '&nbsp;<a ng-click="vm.onTapBoleto(' + params.node.data.Id + ')" title="BOLETO"><img class="imgBoleto link" src="content/img/BoletoIcon.png" /></a>';
					cellHtml += '&nbsp;<a ng-click="vm.onTapNewCardPayment(' + params.node.data.Id + ')" title="Credit Card"><img class="imgcc link" src="../../content/img/creditcard.png" /></a>';
					cellHtml += '&nbsp;<a ng-click="vm.onTapFlag(' + params.node.data.Id + ')" title="Criar Flag"><img class="imgcc link" src="content/img/pflag.png" /></a>';
					cellHtml += '&nbsp;<a title="Soft delete" ng-click="vm.onDeleteCustomer(' + params.node.data.Id + ', ' + params.node.id + ');$event.preventDefault();"><img class="imgPix link" src="content/img/cancel.png" /></a>';
					cellHtml += '&nbsp;<a title="Un delete" ng-click="vm.onUnDeleteCustomer(' + params.node.data.Id + ', ' + params.node.id + ')"><img class="imgPix link" src="content/img/undelete.jpg" /></a>';
					cellHtml += '&nbsp;<a ng-click="vm.onTapComment(' + params.node.data.Id + ')" title="Ordem de Serviço" ><img class="imgPix link" src="content/img/serviceorder.png" /></a>';
					// if (customer.PendingFlagInteraction) {
					// 	cellHtml += '&nbsp;<a title="Cliente com flag pendente!" class="btn btn-warning"><i>&#9873;</i></a>';
					// }
					// if (customer.Orphan) {
					// 	cellHtml += '&nbsp;<button title="Cliente com problema no cadastro!" class="btn btn-warning"><i class="glyphicon glyphicon-exclamation-sign"></i></button>';
					// }
					
					return cellHtml;
				},
				filter: false
			},
			{
				headerName: 'Agendado',
				field: 'Agendado',
				width: 85,
				editable:true,
				filter: true,
				cellRenderer: function (params) {
					return "<label>" + params.value + "</label>";
				},
				comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB,
				filterParams: {
					filterOptions: [
						{
							displayKey: 'largerThan',
							displayName: 'Larger than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) > parseInt(filterValue);
							}
						},
						{
							displayKey: 'smallerThan',
							displayName: 'Smaller than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) < parseInt(filterValue);
							}
						},
						'equals',
						'notEqual'
					]
				}
			},
			// Ult Pag Dias
			{
				headerName: 'Ult. $ Dias',
				field: 'UltPagDias',
				colId: 'Ult. Pag. Dias',
				width: 105,
				cellRenderer: function (params) {
					if(params.value >= 0)
						return "<div>" + params.value + "</div>";
					else
						return "<div>-</div>";
				},
				filterParams: {
					filterOptions: [
						{
							displayKey: 'largerThan',
							displayName: 'Larger than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) > parseInt(filterValue);
							}
						},
						{
							displayKey: 'smallerThan',
							displayName: 'Smaller than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) < parseInt(filterValue);
							}
						},
						'equals',
						'notEqual'
					]
				}
			},
			// Status Cob   (Select Filter)            
			{
				headerName: 'Linha',
				field: 'ContelStatus',
				width: 95,
				cellRenderer: function (params) {
					if (params.value == "A") {
						return '<a ng-click="vm.BlockUnlockLine(\''+params.value+'\', '+params.node.data.Id+', ' + params.node.id + ')" href="javascript:void(0);" title="Ativa"><img class="imgUsd link" style="max-width:16px" src="content/img/phone-green.png" /></a>';
					}
					else if (params.value == "C") {
						return '<a ng-click="vm.BlockUnlockLine(\''+params.value+'\', '+params.node.data.Id+', ' + params.node.id + ')" href="javascript:void(0);" title="Cancelada"><img class="imgUsd link" style="max-width:16px" src="content/img/phone-black.png" /></a>';
					} else if (params.value == "B") {
						return '<a ng-click="vm.BlockUnlockLine(\''+params.value+'\', '+params.node.data.Id+', ' + params.node.id + ')"  title="Bloqueada" style=""><img class="imgUsd link" style="max-width:16px" src="content/img/phone-red.png" /></a>';
					}
					else{
						return '<a class="circle_red1" ng-click="vm.BlockUnlockLine(\''+params.value+'\', '+params.node.data.Id+', ' + params.node.id + ')"></a>';
					}
				}
			},
			// Status Cob   (Select Filter)            
			{
				headerName: 'Status $',
				field: 'Status',
				width: 95,
				cellRenderer: function (params) {
					if (params.value == 'Atrasado') {
						return "<label style='color:red;font-weight:bold'>" + params.value + "</label>";
					} else {
						return "<label>" + params.value + "</label>";
					}
				}
			},
			// Ultima Cob
			{
				headerName: 'Ultima Cob.',
				field: 'UltimaCob',
				width: 80,
				cellRenderer: function (params) {
					if (params.value == -1) {
						return '<div>Nan</div>'
					} else {
						return '<div>' + params.value + '</div>';
					}

				},
				filterParams: {
					filterOptions: [
						{
							displayKey: 'largerThan',
							displayName: 'Larger than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) > parseInt(filterValue);
							}
						},
						{
							displayKey: 'smallerThan',
							displayName: 'Smaller than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) < parseInt(filterValue);
							}
						},
						'equals',
						'notEqual'
					]
				}
			},
			{
				headerName: '$ VIP',
				field: 'VIPSum',
				width: 120,
				cellRenderer: function (params) {
					return "<label>" + params.value + "</label>";
				},
          		comparator: customNumberComparator
			},
			{
				headerName: 'Next Action',
				field: 'NextActionDate',
				editable:true,
				width: 120,
				cellRenderer: 'customDateComponent',
				filter: false
			},
			// payment color
			{
				headerName: 'Envio $',
				field: 'Envio',
				width: 80,
				cellRenderer: function (params) {
					if (params.value == 'Atrasado') {
						return "<label style='color:red;font-weight:bold'>" + params.value + "</label>";
					} else {
						return "<label>" + params.value + "</label>";
					}
				},
				filter: false
			},
			{
				headerName: 'Action',
				field: 'NextAction',
				editable:true,
				width: 100,
				cellRenderer: function (params) {
					return params.value;
				},
				filter: false
			},
			{
				headerName: 'Ult. Agenda.',
				field: 'LastAgendado',
				width: 80,
				cellRenderer: function (params) {
					return "<label>" + params.value + "</label>";
				},
				filter: false
			},
			
			// Vecimento
			{
				headerName: 'Venc',
				field: 'Vencimento',
				width: 100,
				filter: 'agDateColumnFilter',
				filterParams: {
					filterOptions: [
						{
							displayKey: 'olderThan',
							displayName: 'After than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return origin < filterValue;
							}
						},
						{
							displayKey: 'youngerThan',
							displayName: 'Before than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue < origin;
							}
						},
						{
							displayKey: 'specifics',
							displayName: 'Specific date',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue == cellValue;
							}
						}]
				}
			},
			// Tip (Select Filter)
			{
				headerName: 'Tipo',
				field: 'TIPO',
				width: 100,
				cellRenderer: function (params) {
					if (params.value != 'BOLETO') {
						return "<label>" + params.value + "</label>";
					} else {
						return "<a href=" + params.node.data.TipoLink + " target='_blank'>" + params.value + "</a>";
					}
				},
				filter: 'agTextColumnFilter',
    			filterParams: {
     				 buttons: ['clear', 'apply'],
    			},
			},
			// Vigencia
			{
				headerName: 'Vigencia',
				field: 'Vigencia',
				width: 100,
				cellRenderer: function (params) {
					return params.value;
				},
				filter: 'agDateColumnFilter',
				filterParams: {
					filterOptions: [
						{
							displayKey: 'olderThan',
							displayName: 'After than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return origin < filterValue;
							}
						},
						{
							displayKey: 'youngerThan',
							displayName: 'Before than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue < origin;
							}
						},
						{
							displayKey: 'specifics',
							displayName: 'Specific date',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue == cellValue;
							}
						}]
				}
			},
			{
				headerName: 'Vigência pendente',
				field: 'PendingVigencias',
				width: 120,
				cellRenderer: function (params) {
					return "<label>" + params.value + "</label>";
				},
			},
			{
				headerName: 'Sem Pgmto',
				field: 'SemPgmto',
				width: 120,
				cellRenderer: function (params) {
					var cellHtml = "";
						cellHtml='<a><img class="imgOnOff link" src="content/img/'+(params.value ? 'customeron.png' : 'customeroff.png') + '" /></a>';
					return cellHtml;
				},
			},
			// Ult Pag Data
			{
				headerName: 'Ult. Pago',
				field: 'UltPago',
				width: 100,
				filter: 'agDateColumnFilter',
				filterParams: {
					filterOptions: [
						{
							displayKey: 'olderThan',
							displayName: 'After than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return origin < filterValue;
							}
						},
						{
							displayKey: 'youngerThan',
							displayName: 'Before than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue < origin;
							}
						},
						{
							displayKey: 'specifics',
							displayName: 'Specific date',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue == cellValue;
							}
						}]
				}

			},
			// Ult Pag R$
			{
				headerName: 'Ult. Pago $',
				field: 'LastPaidAmount',
				width: 100,
				filterParams: {
					filterOptions: [
						{
							displayKey: 'largerThan',
							displayName: 'Larger than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) > parseInt(filterValue);
							}
						},
						{
							displayKey: 'smallerThan',
							displayName: 'Smaller than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) < parseInt(filterValue);
							}
						},
						'equals',
						'notEqual'
					]
				}
			},
			
			// Ultima cobranca
			{
				headerName: 'Ultima Cob.',
				field: 'UltimaCobDate',
				width: 100,
				filter: 'agDateColumnFilter',
				filterParams: {
					filterOptions: [
						{
							displayKey: 'olderThan',
							displayName: 'After than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return origin < filterValue;
							}
						},
						{
							displayKey: 'youngerThan',
							displayName: 'Before than',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue < origin;
							}
						},
						{
							displayKey: 'specifics',
							displayName: 'Specific date',
							test: function (filterValue, cellValue) {
								var origin = new Date(cellValue);
								return filterValue == cellValue;
							}
						}]
				}
			},
			// Ult Cob R$
			{
				headerName: 'Ult. Cob. R$',
				field: 'UltimaCobAmount',
				width: 100,
				filterParams: {
					filterOptions: [
						{
							displayKey: 'largerThan',
							displayName: 'Larger than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) > parseInt(filterValue);
							}
						},
						{
							displayKey: 'smallerThan',
							displayName: 'Smaller than',
							test: function (filterValue, cellValue) {
								return parseInt(cellValue) < parseInt(filterValue);
							}
						},
						'equals',
						'notEqual'
					]
				}
			}
		];

		return columnDefs;
	}

	function bindAgGrid(data) {
		var rowData = data;

		if (vm.gridOptions.api) {
			vm.gridOptions.api.setRowData(rowData);
		} else {
			updateGrid = true;
		}

		vm.loading = false;
	}

	function filterClients() {
		vm.loading = true;
		sessionStorage.setItem('searchTextMain', vm.searchText);
		filterClientsData();
	}
	function filterText() {
		if (vm.searchText) {
			filterClientsData();
		}
	}
	function filterClientsData() {
		vm.loading = true;
		findCustomerById();
		var filteredData = $filter('filter')(vm.Data, function (data) {
			if (data) {
				return ((excludeAllFilters()) ||
					(filterByText(data)) &&
					((!vm.includeActive && !vm.includeInActive) ||
						(vm.includeActive ?  data.Desativo ==undefined ? true: data.Desativo == false : false) ||
						(vm.includeInActive ? data.Desativo ==undefined ? false: data.Desativo == true : false)) &&

					// (vm.excludeProblema ? !data.Orphan : true) &&
					// (vm.excludeFlag ? !data.PendingFlagInteraction : true) &&
					// (vm.excludeFather ? !data.NameParent : true) &&
					// (vm.excludeAddress ? !data.Adresses.length : true) &&

					// ((!vm.excludeWhatsappUsers && !vm.includeWhatsappUsers) ||
					// 	(vm.excludeWhatsappUsers ? (!data.WClient || !data.fullData.WClient.IsRegisteredWithChat2Desk) : false) ||
					// 	(vm.includeWhatsappUsers ? (data.fullData.WClient && data.fullData.WClient.IsRegisteredWithChat2Desk) : false)) &&

					((!vm.includeStatusGreen && !vm.includeStatusYellow && !vm.includeStatusRed && !vm.includeStatusGray && !vm.includeStatusNan) ||
						(vm.includeStatusGreen ? filterStatusColor(data, "green") : false) ||
						(vm.includeStatusYellow ? filterStatusColor(data, "yellow") : false) ||
						(vm.includeStatusRed ? filterStatusColor(data, "red") : false) ||
						(vm.includeStatusGray ? filterStatusColor(data, "grey") : false) ||
						(vm.includeStatusNan ? filterStatusColor(data, "nan") : false)));
			}
			else {
				return false;
			}
		});
		vm.resultText = filteredData.length + " of " + vm.Data.length + " items";
		bindAgGrid(filteredData);
		UpdateLastSelected();
		vm.loading = false;
	}

	function filterByText(data) {
		if (vm.searchText) {
			vm.searchText = vm.searchText.replace(".","").replace("-","");
			var tempsearchText = vm.searchText.replace("(","").replace(")","").replaceAll(" ","");
			if(!isNaN(tempsearchText))
			{
				vm.searchText = tempsearchText;
			}

			vm.searchText = vm.searchText.toLowerCase();

			if (vm.filterTextInAllCols && !vm.filterTextInNameOnly) {
				return data.Id.toString().toLowerCase().indexOf(vm.searchText) > -1 ||
					data.Name.toLowerCase().indexOf(vm.searchText) > -1 ||
					data.Email.toLowerCase().indexOf(vm.searchText) > -1 ||
					(data.DocumentNumber ? data.DocumentNumber.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
					(data.NickName ? data.NickName.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
					//(data.fullData.Born ? data.fullData.Born.toLowerCase().indexOf(vm.searchText) > -1 : false) ||
					(data.IdPagarme ? data.IdPagarme.toString().indexOf(vm.searchText) > -1 : false) ||
					matchPhone(data.Phones, vm.searchText) ||
					matchPhoneNickName(data.Phones, vm.searchText) ||
					matchICCID(data.Phones, vm.searchText) ||
					matchPortNumber(data.Phones, vm.searchText)
			} else {
				return data.Name.toLowerCase().indexOf(vm.searchText) > -1  || (data.DocumentNumber ? data.DocumentNumber.toLowerCase().indexOf(vm.searchText) > -1 : false) || matchPhone(data.Phones, vm.searchText) || matchICCID(data.Phones, vm.searchText) || UtilsService.checkContains(UtilsService.removeAccents(data.Name.toLowerCase()), UtilsService.removeAccents(vm.searchText));
				//return data.Name.toLowerCase().indexOf(vm.searchText) > -1;
			}
		} else {
			return true;
		}
	}

	function filterStatusColor(data, color) {
		return data.PaymentStatusColor == color;
	}

	function excludeAllFilters() {
		return !vm.includeActive 
		    && !vm.includeInActive
			&& !vm.excludeProblema
			&& !vm.excludeFlag
			&& !vm.excludeFather
			&& !vm.excludeAddress
			&& !vm.excludeWhatsappUsers
			&& !vm.includeWhatsappUsers
			&& !vm.includeStatusGreen
			&& !vm.includeStatusYellow
			&& !vm.includeStatusRed
			&& !vm.includeStatusGray
			&& !vm.includeStatusNan
			&& !vm.searchText;
	}

	function matchPhone(phones, numberToCompare) {
		numberToCompare = numberToCompare.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~' 'éá]/g, '');
		if (phones && phones.length > 0) {
			if (phones[0] == null) {
				return false;
			} else {
				
				var phone = $filter('filter')(phones, function (data) {
					return (data.Number ? "55" + (data.DDD + "" + data.Number).indexOf(numberToCompare) > -1 : false);
				});

				return phone.length > 0;
			}
		}

		return false;
	}

	function matchICCID(phones, numberToCompare) {
		if (phones && phones.length > 0) {
			if (phones[0] == null) {
				return false;
			} else {
				var phone = $filter('filter')(phones, function (data) {
					return (data.ICCID ? data.ICCID.indexOf(numberToCompare) > -1 : false);
				});

				return phone.length > 0;
			}
		}

		return false;
	}

	function matchPortNumber(phones, numberToCompare) {
		if (phones && phones.length > 0) {
			if (phones[0] == null) {
				return false;
			} else {
				var phone = $filter('filter')(phones, function (data) {
					return (data.PortNumber ? data.PortNumber.replace("-","").replace("(","").replace(")","").replaceAll(" ","").indexOf(numberToCompare) > -1 : false);
				});

				return phone.length > 0;
			}
		}

		return false;
	}

	function matchPhoneNickName(phones, nickname) {
		if (phones && phones.length > 0) {
			if (phones[0] == null) {
				return false;
			} else {
				var phone = $filter('filter')(phones, function (data) {
					return (data.NickName ? data.NickName.toLowerCase().indexOf(nickname) > -1 : false);
				});

				return phone.length > 0;
			}
		}

		return false;
	}

	function onTapSwitchActivate(id, nodeId) {
		var c = findCustomerById(id);
		var oldValue = angular.copy(c.Desativo);

		var customer = {
			Id: c.Id,
			Desativo: !c.Desativo
		};

		var confirmMessage = `
        <span class="text-center">
          Tem certeza que deseja ${c.Desativo ? 'ativar' : 'desativar'} esse cliente?
        </span>
      `;

		// TODO: confirm dialog
		ViewModelUtilsService.showConfirmDialog('Atenção!', confirmMessage).then(function (
			confirm
		) {
			if (confirm) {
				c.Desativo = customer.Desativo;

				FoneclubeService.postPersonAtivity(customer).then(function (result) {
					if (!result) {
						customer.Desativo = oldValue;
					} else {
						// update ag-grid
						let row = vm.gridOptions.api.getRowNode(nodeId);
						var index = vm.Data.indexOf(vm.Data.filter(v => v.Id == id)[0]);
						if (index >= 0) {
							vm.Data[index].Desativo = c.Desativo;
							var res = vm.gridOptions.api.redrawRows({ rowNodes: [row] });
							sessionStorage.setItem('lastClickedRowClient', id);
    						UpdateLastSelected();
						}
					}
				});
			}
		});
	}

	function GenerateSummaryMessage(chargeMsg, custName, custId) {
		var addComment = chargeMsg.ChargingComment !=undefined && chargeMsg.ChargingComment!=null?"*"+chargeMsg.ChargingComment+"*":"";
		var chargesummaryurl = window.location.origin+"/#/chargesummary/"+custId+"/"+chargeMsg.Id;

		return `🤖 FoneClube: *FoneBot*
Prezado *${custName}*,
		
Segue resumo da sua última cobrança que que será enviada por email e whatsapp.
${addComment}

*Vencimento:${moment(chargeMsg.DueDate).format("DD/MM")}*
*Vigencia:${chargeMsg.MesVingencia + "/" + chargeMsg.AnoVingencia}*
*Total:R$${chargeMsg.Ammount / 100}*
		
*Detalhes para pagamento no link abaixo.*
		
${chargesummaryurl}

*Para visualizar seu QrCode siga o link abaixo*
  
http://api.foneclube.com.br/api/pagarme/pix/qrcode/${chargeMsg.Id}
		
Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}* 

ou email para 

*financeiro@foneclube.com.br*.
		
Obrigado pela Atenção:
*FoneClube*  👍`;
	  }

	function SetSessionForRowClick(id){
		sessionStorage.setItem('lastClickedRowClient', id);
    	UpdateLastSelected();
	}

	function onTapCustomerEdit(id, cpf) {
		SetSessionForRowClick(id);
		FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(cpf)).then(function (result) {
                var data = {
                  Id : result.Id,
                  CPF : result.DocumentNumber,
                  Nome : result.Name,
                  Use2Prices: result.Use2Prices,
                  IsVIP: result.IsVIP,
                  Referral: result.Referral,
                  Phones : result.Phones,
                  Email : result.Email,
                  Parent : result.Pai,
                  SoftDelete : result.Desativo
                }
                ViewModelUtilsService.showPlanSelectionModal(data);
          });
	}
	function onTapMessage(id) {
		SetSessionForRowClick(id);
		var customer = findCustomerById(id);
		ViewModelUtilsService.showModalReport(customer);
	}
	function onTapFlag(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalFlag(customer);
	}
	function onTapComment(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalComment(customer);
	}
	function onTapNewCardPayment(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalNewCardPayment(customer);
	  }
	function onTapPix(id){
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalPIX(customer);
	}
	function onTapBoletoPayment(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalBoletoPayment(customer);
	}
	function onTapBoleto(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalBoleto(customer);
	}
	function onTapDebito(id) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalDebito(customer);
	}
	function onTapCustomer(id, index) {
		var customer = findCustomerById(id);
		SetSessionForRowClick(id);
		ViewModelUtilsService.showModalCustomer(customer, index);
	}

	function exportToExcel() {
		$('.k-grid-excel').trigger("click")
	}

	function testWhatsApp(){
		var dataMessage = {
			ClientIds: "5521982008200,5521981908190",
			Message: vm.searchText.replace(/\|/g, '')
		 };

		FoneclubeService.postSendWhatsAppMessageNew(dataMessage).then(function(result){
			if(result == true)
				alert("Message sent successfully");      
			else
			    alert("Error occured while sending message");         
		});
	}

	function importDrCelular()
	{
		ViewModelUtilsService.showDrCelularImportTemplate();
	}
	function onUnDeleteCustomer(id, nodeId){
		SetSessionForRowClick(id);
		var r = confirm('Deseja desfazer a exclusão deste cliente?');
		if (r == true) {
			var customer = findCustomerById(id);//// 
			FoneclubeService.postUnDeleteCustomer(customer).then(function (result) {
				if (result) {
				}
			});
		}		
	}
	//var customerIdClicked = [];
	function onDeleteCustomer(id, nodeId) {
		//  if(customerIdClicked.filter(x=>x==id).length > 0){
    	// 	return;
  		// }
		// customerIdClicked.push(id);
		//var r = confirm('Deseja fazer um soft delete nesse cliente?');
		//if (r == true) {
			var customer = findCustomerById(id);////
			SetSessionForRowClick(id);
			FoneclubeService.postSoftDeleteCustomer(customer).then(function (result) {
				if (result) {
					var index = vm.Data.indexOf(vm.Data.filter(v => v.Id == id)[0]);
					if (index >= 0) {
						vm.Data.splice(index, 1);
						var row = vm.gridOptions.api.getRowNode(nodeId);
						vm.gridOptions.api.updateRowData({ remove: [row.data] });
					}
				}
			});
		//} else {
		//}
	}

	function checkRepeatOrder(customerId){
		FoneclubeService.getChargeAndServiceOrderHistory(customerId).then(function (result){

			//debugger;
			var customer = findCustomerById(customerId);
			if(result!=undefined && result[0]!=undefined && result[0].Charges!=undefined){
				if(result[0].Charges.PaymentType == PIX && result[0].Charges.PixCode != undefined){
					
					ViewModelUtilsService.showModalPIX(customer);
				}
				else if(result[0].Charges.PaymentType == BOLETO){
					ViewModelUtilsService.showModalBoleto(customer);
				}
				else if(result[0].Charges.PaymentType == CARTAO){
					var custId = "";
					var cardId = result[0].Charges.TransactionComment;
					if (!customer.IdPagarme) {
						custId = customer.DocumentNumber;
						PagarmeService.getCustomer(custId)
					  .then(function (result) {
						try {
						  var pagarmeID = result[0].id;
							PagarmeService.getCard(pagarmeID)
        							.then(function (result) {
        							  var cardsResult = result.sort(function (a, b) {
        							    return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
        							  });
									  var lastCard = cardsResult.find(x=>x.id == cardId);
									  if(lastCard){
										ViewModelUtilsService.showModalExistentCardPayment(customer, lastCard);
									  }
									  else
									  	ViewModelUtilsService.showModalNewCardPayment(customer);
        							})
        							.catch(function (error) {
										ViewModelUtilsService.showModalNewCardPayment(customer);
        							});
						} catch (erro) {
							ViewModelUtilsService.showModalNewCardPayment(customer);
						  }
						})
						.catch(function (error) {
							ViewModelUtilsService.showModalNewCardPayment(customer);
						});
					}
					else
					{
						custId = customer.IdPagarme;
						
						PagarmeService.getCard(custId)
        					.then(function (result) {
        					  var cardsResult = result.sort(function (a, b) {
        					    return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
        					  });
							  var lastCard = cardsResult.find(x=>x.id == cardId);
							  if(lastCard){
								ViewModelUtilsService.showModalExistentCardPayment(customer, lastCard);
							  }
							  else
							  	ViewModelUtilsService.showModalNewCardPayment(customer);
        					})
        					.catch(function (error) {
								ViewModelUtilsService.showModalNewCardPayment(customer);
        					});
					}
					
				}
			}
			vm.loading = false;
		  });
		}

	function showFilterSection()
	{
		vm.hidefilters = !vm.hidefilters;
	}

	function onPageLoad() {
		loadCustomersNew();
		GetDefaultState();
		LoadAllPhoneLinesInBackground();
	}

	function LoadAllPhoneLinesInBackground(){
		FoneclubeService.getAllPhoneLinesNew().then(function (data) {
              var str = JSON.stringify(data);
	    	  sessionStorage.setItem('allphonelines', LZString.compress(str));
		});
	}

	function GetDefaultState()
	{
		FoneclubeService.getAgGridStates("Customers2").then(function (result){
			if(result!=null){
				vm.agGridStates = result.sort((a,b) => (a.txtStateName  > b.txtStateName ) ? 1 : ((b.txtStateName  > a.txtStateName ) ? -1 : 0));
				var default1 = result.find(x=> x.IsDefault == true);
				if(default1)
				{
					vm.defaultGridState = default1;
					vm.defaultGridState.txtStateName
					getAgGridState(default1);
				}
			}
		});
	}

	function loadCustomersNew(){
		var showLoader = DialogFactory.showLoader("Por favor, aguarde");
		FoneclubeService.getAllCustomersNew().then(function(res){
			vm.Data = res;
			vm.gridOptions.api.setRowData(res);
			getAgGridState("");
			showLoader.close();
			for (var customer in vm.Data) {
			
				var custData = vm.Data[customer].Phones;
				if(custData!= null && !isArray(custData))
				{
					vm.Data[customer].Phones = [];
					var phones = custData.split('|').map(function(data){ return data.split(','); });
					phones.forEach(element => {
						var objPhone = {};
						objPhone.Id = element[0];
						objPhone.DDD = element[1];
						objPhone.Number = element[2];
						objPhone.NickName = element[3];
						objPhone.ICCID = element[4];
						objPhone.PortNumber = element[5];
						objPhone.IsFoneclube = element[6] == 1 ? true : false;
						vm.Data[customer].Phones.push(objPhone);
					});
				}
			}
			
			vm.searchText = sessionStorage.getItem('searchTextMain') == null ? "" : sessionStorage.getItem('searchTextMain');
			filterText();
		});
	}

	function findCustomerById(id) {

		for (var customer in vm.Data) {
			if (vm.Data[customer].Id == id) {
				var custData = vm.Data[customer].Phones;
				if(custData!= null && !isArray(custData))
				{
					vm.Data[customer].Phones = [];
					var phones = custData.split('|').map(function(data){ return data.split(','); });
					phones.forEach(element => {
						var objPhone = {};
						objPhone.Id = element[0];
						objPhone.DDD = element[1];
						objPhone.Number = element[2];
						objPhone.NickName = element[3];
						objPhone.ICCID = element[4];
						objPhone.PortNumber = element[5];
						objPhone.IsFoneclube = element[6] == 1 ? true : false;
						vm.Data[customer].Phones.push(objPhone);
					});
				}
				return vm.Data[customer];
			}
		}
	}

	var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
	var secondDate = new Date();

	function diffDays(date) {
		var firstDate = new Date(date);
		return Math.floor(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
	}

	function onClipBoardSuccess(event){
		//debugger;
		vm.clipBoardCopiedText = event.text;
	}

	function pasteCliboardText(event){
		//debugger;
		vm.searchText = vm.clipBoardCopiedText;
		var $activeElement = angular.element(document.getElementById('filterCustomers'));
		$activeElement.attr('focused', 'yes'); // Example usage
	}
	
	function saveState() {
		var retVal = prompt("Enter save state name : ", "state name here");
		var saveStateData = {
			intId: -1,
			txtStateName : retVal,
			txtAgidName : 'Customers2',
    		txtColumnState : JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
    		txtFilterModel : JSON.stringify(vm.gridOptions.api.getFilterModel()),
    		txtSortModel : JSON.stringify(vm.gridOptions.api.getSortModel())
		}
		if(retVal != "null" && retVal != null)
		{
			FoneclubeService.saveAgGridState(saveStateData).then(function (result){
				alert('Saved successfully')
			});
		}
	}

	function updateState() {
	  var retVal = prompt("Enter save state name to update: ", vm.defaultGridState.txtStateName);
	  var saveStateData = {
      intId: vm.defaultGridState.intId,
			txtStateName : retVal,
			txtAgidName : 'Customers2',
    		txtColumnState : JSON.stringify(vm.gridOptions.columnApi.getColumnState()),
    		txtFilterModel : JSON.stringify(vm.gridOptions.api.getFilterModel()),
    		txtSortModel : JSON.stringify(vm.gridOptions.api.getSortModel())
		}
		FoneclubeService.saveAgGridState(saveStateData).then(function (result){
			alert('Updated successfully')
		});
	}

	function deleteState() {
	  ViewModelUtilsService.showConfirmDialog('Atenção!', 'Are you sure, you want to delete?').then(function(confirm) {
	    if(confirm)
	    {
	      var deleteStateData = {
				intId : vm.defaultGridState.intId,
				txtAgidName : 'Customers2'
			}
	    	FoneclubeService.deleteAgGridState(deleteStateData).then(function (result){
	  			alert('Deleted successfully')      	
	    	});
	    }
	  });
	}

	function BlockUnlockLine(value, custId, nodeId){
		var custName = vm.Data.find(x=>x.Id == custId).Name;
		if(value == "A")
		{
			DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: '<span>Deseja bloquear <strong>TODAS</strong> as linhas do ' + custName+'</span>', btn1: 'SIM', btn2: 'Temporariamente' })
        	.then(function (result) {
        	    if (!result) {
					DialogFactory.dialogConfirm({ titulo: 'Bloqueio de linhas', mensagem: 'Tem Certeza', btn1: 'SIM', btn2: 'NÃO' })
        			.then(function (result) {
						  var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
						  if (!result) {
							var data = {
								PersonId : custId
							}
							FoneclubeService.permanentBlockLineForCustomer(data).then(function (result){
								if(result!=null)
								{
									showLoader.close();
									var resDisplay = "";
									for(var ir= 0 ; ir < result.length; ir++)
									{
										resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.status + " Mensagem: " + result[ir].BlockLineResponse.mensagem +"<br/>";
									}

	  								ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
									if (confirm) {
									
										let row = vm.gridOptions.api.getRowNode(nodeId);
										var index = vm.Data.indexOf(vm.Data.filter(v => v.Id == custId)[0]);
										if (index >= 0) {
											vm.Data[index].ContelStatus = "B";
											vm.gridOptions.api.redrawRows({ rowNodes: [row] });
										}
										bindAgGrid(vm.Data);
										GetDefaultState();
										
										var resDisplay = "";

										sessionStorage.setItem('lastClickedRowClient', custId);
    						    		UpdateLastSelected();
									}
									else{
										showLoader.close();
									}
								});
								}
								else{
									showLoader.close();
									DialogFactory.showMessageDialog({mensagem:'Error occured: ' + result});
								}
	    					});
						}
					});
				}
				else{

				}
			});
		}
		else if(value == "B"){
			DialogFactory.dialogConfirm({ titulo: 'Desbloquear linhas', mensagem: '<span>Deseja desbloquear todas as linhas para ' + custName +'</span>', btn1: 'SIM', btn2: 'Temporariamente' })
        	.then(function (result) {
        	    if (!result) {
					var showLoader = DialogFactory.showLoader("Um momento estamos desbloqueando as linhas.");
					var data = {
						PersonId : custId
					}
					FoneclubeService.permanentUnBlockLineForCustomer(data).then(function (result){
						if(result!=null)
						{
							var resDisplay = "";
							showLoader.close();
							for(var ir= 0 ; ir < result.length; ir++)
							{
								resDisplay += "Linha: " + result[ir].Linha + " Status: " + result[ir].BlockLineResponse.status + " Mensagem: " + result[ir].BlockLineResponse.mensagem +"<br/>";
							}

	  						ViewModelUtilsService.showConfirmDialog('Success!', resDisplay).then(function (confirm) {
							if (confirm) {
								let row = vm.gridOptions.api.getRowNode(nodeId);
								var index = vm.Data.indexOf(vm.Data.filter(v => v.Id == custId)[0]);
								if (index >= 0) {
									vm.Data[index].ContelStatus = "A";
									vm.gridOptions.api.redrawRows({ rowNodes: [row] });
								}
								bindAgGrid(vm.Data);
								GetDefaultState();
								sessionStorage.setItem('lastClickedRowClient', custId);
    							UpdateLastSelected();
							}
							else{
								showLoader.close();
							}
						});
						}
						else{
							DialogFactory.showMessageDialog({mensagem:'Error occured: ' + result});
						}
	    			});
				}
				else{

				}
			});
		}
		else{
			alert('Selected customer does not have any contel lines')
		}
	}

	function UpdateLastSelected()
	{
	  let IDofRowToSelect = parseInt(sessionStorage.getItem('lastClickedRowClient'));
	  if(IDofRowToSelect!=null && vm.gridOptions.api != null ){
	  	vm.gridOptions.api.forEachNode((node) => {
	      node.setSelected(node.data.Id == IDofRowToSelect);
	      if (node.data.Id == IDofRowToSelect) {
	          vm.gridOptions.api.ensureIndexVisible(node.rowIndex, 'middle');
	      }
	  });
	 }
	}		

	function getAgGridState(stateName) {
		if(vm.agGridStates!=null && vm.defaultGridState != null){
			var res = vm.agGridStates.find(x=>x.txtStateName == vm.defaultGridState.txtStateName);
			if(res !=null && res.txtFilterModel !=undefined && res.txtColumnState != undefined)
			{
				vm.gridOptions.api.setFilterModel(JSON.parse(res.txtFilterModel));
				vm.gridOptions.columnApi.setColumnState(JSON.parse(res.txtColumnState));
				vm.gridOptions.api.setSortModel(JSON.parse(res.txtSortModel));
			}

	  		var saveStateData = {
      			intId: vm.defaultGridState.intId,
				txtAgidName : 'Customers2',
			}
			FoneclubeService.updateDefaultGridState(saveStateData).then(function (result){
			});
		}
	}

	function PersonComponent() {
	}
	
	
	PersonComponent.prototype.init = function(params) {
		this.valueGetter = params.valueGetter;
		this.filterText = null;
		this.setupGui(params);
	}
	
	  // not called by AG Grid, just for us to help setup
	PersonComponent.prototype.setupGui = function(params) {
		this.gui = document.createElement('div');
		this.gui.innerHTML = `<div style="padding: 4px; width: 200px;">
					<div style="font-weight: bold;">Name Filter</div>
					<div>
						<input style="margin: 4px 0 4px 0;" type="text" id="filterText" placeholder="Enter Name"/>
					</div>
				</div>
			`;
	
		const listener = (event) => {
		  this.filterText = event.target.value;
		  params.filterChangedCallback();
		};
	
		this.eFilterText = this.gui.querySelector('#filterText');
		this.eFilterText.addEventListener('changed', listener);
		this.eFilterText.addEventListener('paste', listener);
		this.eFilterText.addEventListener('input', listener);
		// IE doesn't fire changed for special keys (eg delete, backspace), so need to
		// listen for this further ones
		this.eFilterText.addEventListener('keydown', listener);
		this.eFilterText.addEventListener('keyup', listener);
	  }
	
	PersonComponent.prototype.getGui = function() {
		return this.gui;
	  }
	
	PersonComponent.prototype.doesFilterPass = function(params) {
		// make sure each word passes separately, ie search for firstname, lastname
		let passed = true;
		this.filterText
		  .toLowerCase()
		  .split(' ')
		  .forEach((filterWord) => {
			const value = this.valueGetter(params);
	
			if (value.toString().toLowerCase().indexOf(filterWord) < 0) {
			  passed = false;
			}
		  });
	
		return passed;
	  }
	
	PersonComponent.prototype.isFilterActive = function() {
		return this.filterText != null && this.filterText !== '';
	  }
	
	PersonComponent.prototype.getModel = function() {
		return { value: this.filterText.value };
	  }
	
	PersonComponent.prototype.setModel = function(model) {
		this.eFilterText.value = model.value;
	  }

	
	function CustomDateComponent() {
	}

   CustomDateComponent.prototype.init = function(params) {
       const template = `
           <input type="text" data-input style="width: 100%;" />
           <a class="input-button" title="clear" data-clear>
               <i class="fa fa-times"></i>
           </a>`;

       this.params = params;
   
       this.eGui = document.createElement('div');
       this.eGui.setAttribute('role', 'presentation');
       this.eGui.classList.add('ag-input-wrapper');
       this.eGui.classList.add('custom-date-filter');
       this.eGui.innerHTML = template;
   
       this.eInput = this.eGui.querySelector('input');
   
       this.picker = flatpickr(this.eGui, {
           onChange: this.onDateChanged.bind(this),
           dateFormat: 'd/m/Y',
           wrap: true
       });
   
       this.picker.calendarContainer.classList.add('ag-custom-component-popup');
	   
	   if(params.data.NextActionDate != undefined && params.data.NextActionDate != ""){
			this.setDate(new Date(params.data.NextActionDate));
	   }
	   else
	   		this.date = null;
   }

   CustomDateComponent.prototype.getGui=function() {
       return this.eGui;
   }

   CustomDateComponent.prototype.onDateChanged=function(selectedDates) {
       this.date = selectedDates[0] || null;
       this.params.data.NextActionDate = this.date;
   }

   CustomDateComponent.prototype.getDate=function() {
       return this.date;
   }

   CustomDateComponent.prototype.setDate=function(date) {
	if(date!="")
	{
       this.picker.setDate(date);
       this.date = date;
	}
   }

   CustomDateComponent.prototype.setInputPlaceholder=function(placeholder) {
       this.eInput.setAttribute('placeholder', placeholder);
   }

};


StatusChargingController.$inject = ['$interval', 'FoneclubeService', 'PagarmeService', 'FlowManagerService', '$filter', 'ViewModelUtilsService', 'DialogFactory', 'UtilsService']; 

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('OrdemServico', OrdemServico);

    OrdemServico.inject = ['$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService'];
    function OrdemServico($scope, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService) {
        var vm = this;
        vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
        vm.requesting = true;
        vm.onTapSendOS = onTapSendOS;
        vm.goBack = goBack;
        
        init();
        function init() {
            if (!vm.cpf) {
                FlowManagerService.changeCustomersView();
                return;
            }
            vm.data = {
                warn: true,
                text: ''
            };
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                vm.customer = result;
                vm.requesting = false;
            });
        }
        
        function onTapSendOS() {
            MainUtils.setAgent('Cardozo');
            var order = {
                "Id": vm.customer.Id,
                "ServiceOrder": {
                    "AgentName": MainUtils.getAgent(),
                    "AgentId": 1,
                    "PendingInteraction": vm.data.warn,
                    "Description": vm.data.text
                }
            }
            FoneclubeService.postOrderServicePerson(order).then(function(data){
                vm.requesting = false;
                if(result) {
                    FlowManagerService.changeCustomersView();                    
                    DialogFactory.showMessageConfirm({titulo:'Aviso', mensagem:'Ordem de serviço adicionada com sucesso.'})
                    .then(function(result) {
                        if(result) {
                            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                                ViewModelUtilsService.showModalCustomer(result);
                            });
                        }
                    })                    
                }
            }).catch(function(error) {
                FlowManagerService.changeCustomersView();                   
                DialogFactory.showMessageDialog({mensagem:'Houve um erro.', titulo: 'Aviso'});                                           
            });
        }
        
        function goBack() {
            FlowManagerService.goBack();
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                ViewModelUtilsService.showModalCustomer(result);
            });
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('PaymentDetailController', PaymentDetailController);

    PaymentDetailController.inject = ['ViewModelUtilsService', 'MainUtils'];
    function PaymentDetailController(ViewModelUtilsService, MainUtils) {
        var vm = this;
        vm.customer = ViewModelUtilsService.modalPaymentDetailCustomer;
        vm.history = ViewModelUtilsService.modalPaymentDetailHistory;

    }
})();
(function() {
    'use strict';

        angular
            .module('foneClub')
            .controller('PIXController', PIXController);


        PIXController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
        function PIXController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


            console.log('--- PIXController ---');
            var vm = this;
            vm.date = new Date();
            vm.customerChargingPaymentInfo = {};
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.chargeDisabled = true;
            vm.cobrancaRealizada = false;
            vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            vm.onTapPagar = onTapPagar;
            vm.onTapPagarSchedule = onTapPagarSchedule;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.checkOne = checkOne;
            vm.enviaEmail = true;
            vm.enviaWhatsapp = true;
            vm.calculate = calculate;
            vm.padroaValue = 25;
            vm.verificarValue = 5;
            vm.bothPP = 1;
            vm.amount = 0;
            vm.amountTemp = 0;
            vm.amountTemp1 = 0;
            vm.bonus = 0;
 	          vm.showCopyButtons = true;
            vm.totaisComissoes = {};
            vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente = 0;
            vm.expirationDateField =  moment().subtract(1, 'day').format("DD MMMM YYYY");
            vm.vigenciaField = moment().subtract(1, 'day').format("YYYY MM");
            vm.changeTextValue = changeTextValue;
            vm.changeTextValueChange = changeTextValueChange;
            vm.incrementPadroa = incrementPadroa;
            vm.decrementPadroa = decrementPadroa;
            vm.incrementPadroaRepeat = incrementPadroaRepeat;
            vm.decrementPadroaRepeat  =decrementPadroaRepeat;
            vm.refreshVencimento = refreshVencimento;
            vm.decrementVerificar = decrementVerificar;
            vm.incrementVerificar = incrementVerificar;
            vm.incrementBothPP = incrementBothPP;
            vm.decrementBothPP = decrementBothPP;
            vm.upDateCalendar = upDateCalendar;
            vm.CopyCodigoAndPix = CopyCodigoAndPix;
            vm.CopyCodigo = CopyCodigo;
            vm.CopyQRCodePix = CopyQRCodePix;
            vm.ClipBoardCopy = ClipBoardCopy;
            vm.SaveDefaults = SaveDefaults;
            vm.copyForWhatsapp = copyForWhatsapp;
            vm.copyForTelegram = copyForTelegram;
            vm.validatePhone = validatePhone;
            vm.generateAndPasteDefaults = generateAndPasteDefaults;
            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)

            }
            var botImage = "🤖";
            var thumbsImage = "👍";
            vm.sendMarketing1 = false;
            vm.sendMarketing2 = false;
            vm.sendWAText = true;
            vm.Padrão = false;
            vm.Excepcional = false;
            vm.replaceIndex = 0;
            vm.replaceIndex1 = 0;
            vm.addVencimentoDays = true;
            vm.customerPhones="";
            vm.customersInvalidPhones = "";
            vm.AdditionalComment = "";
            vm.multiVigencia = false;
            vm.finalSelected = []
            vm.finalSelectedFormatted = []
            vm.selectDays = UtilsService.getNext12Months(moment(new Date()).format('MM-DD-YYYY'));
            vm.selectedList = {};
            vm.isMobile = UtilsService.mobileCheck();
            vm.defaultTemplateText = `🤖 FoneClube: FoneBot
Prezado *|namevariable|*,

Segue resumo da sua última cobrança que que será enviada por email e whatsapp.  
*|Detalhes.Cobrança|*

Vigencia:*|vigenciavariable|* 
Vencimento:*|vencimentovariable|*
Total:*R$|amountvariable|*

Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}*

ou email para 

*financeiro@foneclube.com.br*.  

Obrigado pela Atenção: 
*FoneClube*  👍`;
            var CARTAO = 1;
            var BOLETO = 2;
            var PIX = 3;


            init();
            refreshVencimento(true);
            changeTextValue();

          function init() {
            
            vm.chargeStatusfirst = true;
            vm.chargeStatus = 1;
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {

              vm.histories = result;
                var history = vm.histories[0];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
            
                  if(history.CommentEmail !=undefined && !history.Comment.includes("variable"))
                  {
                    // var cComment =  history.CommentEmail.replace("??", botImage);
                    // vm.customerComment =  cComment.replace("??", thumbsImage);
                    // var cmt = history.Comment.replace("??", botImage);
                    // vm.comment =  cmt.replace("??", thumbsImage);

                    vm.customerComment = decodeURIComponent(history.CommentEmail);
                    vm.comment = decodeURIComponent(history.Comment);
                  }
                  else{
                    vm.customerComment =  vm.defaultTemplateText;
                    vm.comment =  vm.defaultTemplateText;
                  }
                  
                  vm.amount = history.Ammount / 100;
                  vm.vigenciaField = moment(history.AnoVingencia + " " + history.MesVingencia).format("YYYY MM");
                  vm.selectDays = UtilsService.getNext12Months(moment(history.AnoVingencia + " " + history.MesVingencia).format('MM-DD-YYYY'));
                  vm.expirationDateField = UtilsService.formatDate(new Date(history.DueDate).getFullYear() == 2000 ? moment(UtilsService.addDays(1)).format("DD MMMM YYYY"): moment(history.DueDate).format("DD MMMM YYYY"));
                  vm.amountTemp = vm.amount.toFixed(2);
                  vm.amountTemp1 = vm.amount.toFixed(2);
                  vm.sendMarketing1 = history.SendMarketing1;
                  vm.sendMarketing2 = history.SendMarketing2;
                  //vm.sendWAText = history.sendWAText;
                  vm.padroaValue = history.DefaultPaymentDay;
                  vm.verificarValue = history.VerficarDay;
                  
                  calculate();
                  refreshVencimento(false);

                  if(history.TxtWAPhones == undefined || history.TxtWAPhones == null)
                    vm.customerPhones = customer.Phones.filter(x=>!x.IsFoneclube)[0].DDD + customer.Phones.filter(x=>!x.IsFoneclube)[0].Number;
                  else
                    vm.customerPhones=history.TxtWAPhones;
                  validatePhone();
                
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
               
              }
              customer.histories = vm.histories;
            })
            .catch(function (error) {

            });

            FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
              console.log('FoneclubeService.getTotaisComissoes')
              console.log(result)
              vm.totaisComissoes = result;

            })


            FoneclubeService.getCommision(customer.Id).then(function (result) {
              vm.bonus = parseFloat(result.Ammount / 100).toFixed(2);
              calculate();
              changeTextValue();
            })
              .catch(function (error) {

              });
          }

          function checkOne(val) {
            //alert('xx');
            vm.chargeDisabled = false;
            if (val == '1') {
              vm.chargeStatusfirst = true;
              vm.chargeStatusSecond = false;
              vm.chargeStatus = 1;
            }
            if (val == '2') {
              vm.chargeStatusSecond = true;
              vm.chargeStatusfirst = false;
              vm.chargeStatus = 2;
            }
          }

          function changeTextValue(){
            if(vm.customerComment!=undefined)
            {
                vm.replaceIndex = 0;
                vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
                vm.replaceIndex = 0;
            }
            vm.selectDays = UtilsService.getNext12Months(moment(vm.vigenciaField).format('MM-DD-YYYY'));
          }

          function changeTextValueChange(){
            refreshVencimento(false);
            if(vm.customerComment!=undefined){
                vm.replaceIndex = 0;
                vm.customerComment = vm.customerComment.replace(/([\|(])(.+?)([\|)])/gs, autoRepalceText);
                vm.replaceIndex = 0;
            }
          }

          function autoRepalceText(match, start, changeValue, end, offset, string) {
            GetVigencias();
            var resStr = "";
            if(vm.replaceIndex == 0){
              resStr = vm.customer.Name;
            }
            if(vm.replaceIndex == 1){
              vm.AdditionalComment = changeValue;
              resStr = changeValue;
            }
            if(vm.replaceIndex == 2){
              
              var rrresStr = vm.finalSelected.map(function(dd) { return (new Date(moment(dd)).toLocaleDateString('pt-br', { month: 'long', year:"numeric"}).replace(' de ', '-')) });
              resStr = rrresStr.join();

              // resStr = vm.vigenciaField.split(" ")[1] ? new Date(0,parseInt(vm.vigenciaField.split(" ")[1]),0).toLocaleDateString('pt-br', { month: 'long'}) : '';
            }
            if(vm.replaceIndex == 3){
              var dat = new Date(vm.expirationDateField);
              dat.setDate(dat.getDate());
              var expirationDt = dat.toLocaleDateString('pt-br', { day: '2-digit', month: 'long'});
              resStr = expirationDt.replace(' ',', ')
            }
            if(vm.replaceIndex == 4){
              resStr =  vm.amount;
            }
            vm.replaceIndex++;

            return start + resStr + end;
          }

          function calculate() {
            var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
            var bonus = vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente.toString().indexOf('.') > -1 ? parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) : parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) / 100;
            vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
            if (vm.pagar) {
              vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
            }
            else {
              vm.amount = parseFloat(amount).toFixed(2);
            }

            if (isNaN(vm.amount)) {
              vm.amount = 0;
            }

            vm.amountTemp1 = vm.amount;
            changeTextValue();
          }

          function onTapConfirmarPagamento() {
            
            //alert(vm.Excepcional);
            //if (!vm.claro) {
            //  vm.Excepcional
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }

                if (parseInt(vm.amount) < 1) {
                  DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
                  return;
                }
                GetVigencias();
                var strSel = vm.finalSelected.join();
                if(vm.finalSelected!=null && vm.finalSelected.length > 1)
                {
                  ViewModelUtilsService.showConfirmDialog('Atenção!', 'Confirme os vários vigencias desta cobrança <br/>'+ strSel).then(function(confirm) 
                    {
			                if (confirm) 
                      {
                        if (!vm.chargeStatus) {
                          vm.chargeStatusDiv = true;
                          vm.etapaDados = false;
                          vm.etapaConfirmacao = false;
                        }
                        else {
                          vm.etapaDados = false;
                          vm.etapaConfirmacao = true;
                          vm.chargeStatusDiv = false;
                        }
                      }
                    });
                }
                else{
                  if (!vm.chargeStatus) {
                     vm.chargeStatusDiv = true;
                     vm.etapaDados = false;
                     vm.etapaConfirmacao = false;
                   }
                   else {
                     vm.etapaDados = false;
                     vm.etapaConfirmacao = true;
                     vm.chargeStatusDiv = false;
                   }
                }
            }

            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                vm.chargeStatusDiv = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;
                }
            }

            function GetVigencias()
            {
              vm.finalSelected = [];
              var selList = Object.keys(vm.selectedList).map((key) => [key, vm.selectedList[key]]);
              for(var io=0; io < selList.length; io++ ){
                if(selList[io][1] == true)
                 vm.finalSelected.push(selList[io][0]);
              }
              if(!vm.finalSelected.includes(moment(vm.vigenciaField).format("MMM-YYYY")))
                vm.finalSelected.push(moment(vm.vigenciaField).format("MMM-YYYY"));

              vm.finalSelected = vm.finalSelected.filter(function( item, index, inputArray ) {
                  return inputArray.indexOf(item) == index;
                });

              var MONTHS = MONTHS = { Jan: 1, Feb: 2, Mar: 3, Apr: 4, May: 5, Jun: 6, Jul: 7, Aug: 8, Sep: 9, Oct: 10, Nov: 11, Dec: 12 };

              vm.finalSelected = vm.finalSelected.sort(function (a, b) {
                  var aa = a.split('-'),
                  bb = b.split('-');

                  return aa[1] - bb[1] || MONTHS[aa[0]] - MONTHS[bb[0]];
              });
            }

            function onTapPagar(isScheduled, isBothPPClick)
            {
              if(isScheduled)
                {
                  if(!isBothPPClick)
                  {
                    if(moment(new Date()).add(5, 'day') > moment(vm.expirationDateField))
                    {
                      ViewModelUtilsService.showConfirmDialog('Atenção!', 'A data é inferior a 5 dias no futuro, clique OK para criar e   enviar a cobrança agora ou "CANCELA" para trocar a data').then(function(confirm) 
                      {
			                  if (confirm) 
                        {
                          vm.etapaDados = false;
                          vm.etapaConfirmacao = true;
                          vm.chargeStatusDiv = false;
                          ProcessCharging(false, isBothPPClick);
                        }
                        else
                        {
                          return;
                        }
                      });
                    }
                    else
                     ProcessCharging(true, isBothPPClick);
                  }
                  else
                    ProcessCharging(true, isBothPPClick);
                }
                else{
                  ProcessCharging(isScheduled, isBothPPClick);
                }
            }

            function ProcessCharging(isScheduled, isBothPPClick)
            {
              SaveDefaults();
              console.log('tap pagar boleto');
              console.log(parseInt(vm.amount));
              var em = vm.amount.toString().split(".");
              console.log(em[0]);
              if (em[1] != undefined) {
                vm.amount = vm.amount.toString().replace(".", "")
              }

                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017';

                if(isScheduled)
                {
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = true;
                  vm.chargeStatusDiv = false;
                  var chargeDataArray = [];
                  var bothPPValue = 0;
                      
                  if(vm.bothPP == 0 || vm.bothPP == 1) 
                    bothPPValue = 0;
                  else
                    bothPPValue = isBothPPClick ? vm.bothPP : 0;
                  var completeCount = 1;
                  var strMessage = 'Favor confirmar agendamento abaixo: <br/>Numero total de cobranças: '+ (bothPPValue == 0 ? 1 : bothPPValue) +'<br/>'; 
                  for(var ibothcount = bothPPValue == 0 ? 0 : 1; ibothcount <= bothPPValue; ibothcount++)
                  {
                      var expiryDate = moment(vm.expirationDateField).add(ibothcount, 'month').format("DD MMMM YYYY");
                      var vigenciaYear = parseInt(vm.vigenciaField.split(" ")[0]);
                      var vigenciaMonth = parseInt(vm.vigenciaField.split(" ")[1]);
                     
                      var vy = vigenciaMonth + ibothcount <= 12? vigenciaYear + " " + (vigenciaMonth + ibothcount): vigenciaYear + 1 + " " + ((vigenciaMonth + ibothcount) - 12);
                    
                      strMessage += '<br/><label>' + (ibothcount == 0 ? 1: ibothcount) + '. Vencimento:<strong>' + moment(expiryDate).format("DD/MMM/YYYY")+'</strong></label>';
                      strMessage += '<label>Vigencia:<strong>' + vy.split(" ")[1] + '/' + vy.split(" ")[0]+'</strong></label>';
                      strMessage += '<label>Total:<strong>R$' + vm.amount/100 +'</strong></label>';

                      var PIX = 3;
                      var customerCharging = {
                        Id: vm.customer.Id,
                        Charging:{
                            Comment: vm.bothPP == 1 ? encodeURIComponent(vm.comment) : encodeURIComponent(vm.defaultTemplateText),
                            CommentEmail: vm.bothPP == 1 ? encodeURIComponent(vm.customerComment) : encodeURIComponent(vm.defaultTemplateText),
                            CommentBoleto:"",
                            Ammount: vm.amount,
                            CollectorName: MainUtils.getAgent(),
                            PaymentType: PIX,
                            AnoVingencia: vy.split(" ")[0],
                            MesVingencia: vy.split(" ")[1],
                            ChargeStatus: vm.chargeStatus,
                            ScheduledMonth:moment(expiryDate).format("MM"),
                            ScheduledYear:moment(expiryDate).format("YYYY"),
                            ScheduledDay:moment(expiryDate).format("DD"),
                            TxtWAPhones:vm.customerPhones,
                            ChargingComment: vm.AdditionalComment,
                            SendMarketing1: vm.sendMarketing1,
                            SendMarketing2: vm.sendMarketing2,
                            SendWAText: vm.sendWAText,
                            DueDate: moment(vm.expirationDateField).toDate(),
                            MutliVigencias: [vy]
                        }
                      }
                      console.log(customerCharging);
                      chargeDataArray.push(customerCharging); 
                }

                
                  DialogFactory.dialogConfirm({ title: 'Atenção!', mensagem: strMessage, btn1: 'Yes', btn2: 'No, edit Charge' }).then(function(confirm) {
                    if(confirm==0){
                        for(var cc = 0 ; cc< chargeDataArray.length; cc++){
                            //    posso colocar na lista de cobranças e ser o primeiro com vingencia
                            FoneclubeService.postSchedulePayment(chargeDataArray[cc]).then(function(result){
                            
                                if(completeCount == chargeDataArray.length)
                                {
                                     vm.message = 'Agendamento feito com sucesso';
                                     vm.showCopyButtons = false;
                                     vm.cobrancaRealizada = true;
                                     vm.disableTapPay = false;
                                     return;
                                }
                                completeCount++;                              
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                            });
                          }
                        }
                        else{
                          vm.etapaDados = true;
                          vm.etapaConfirmacao = false;
                          vm.chargeStatusDiv = false;
                          vm.disableTapPay = false;
                        }
                        });
                  return;
                }

                var vigencias = vm.finalSelected.map(function(dd) { return moment(moment(dd).format('MMM-YYYY')).format("YYYY MM"); });
                
                PagarmeService.postPIX(vm.amount, vm.commentBoleto, existentCustomer, UtilsService.formatDateYYYYmmDD(addExpirationDays(vm.expirationDateField)))
                     .then(function(resultCapture)
                     {
                          try{
                              var chargingLog = {
                                  'customer': existentCustomer,
                                  'ammount': vm.amount,
                                  'pagarmeResponse': resultCapture,
                                  'boletoComment':vm.commentBoleto,
                                  'customerComment':vm.customerComment,
                                  'foneclubeComment' : vm.comment
                              };

                              FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                  console.log(result);
                              })
                              .catch(function(error){
                                  console.log('catch error');
                                  console.log(error);
                                  var teste1 = emailObject;
                                  var teste2 = existentCustomer;
                                  var teste3 = loopAmount;
                                  alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                              });
                              //pix_qr_code
                              var customerCharging = {
                                Id: vm.customer.Id,
                                DefaultPaymentDay:vm.padroaValue,
                                Charging:{
                                    PixCode: resultCapture.pix_qr_code,
                                    Comment:encodeURIComponent(vm.comment),
                                    CommentEmail:encodeURIComponent(vm.customerComment),
                                    CommentBoleto:encodeURIComponent(vm.commentBoleto),
                                    Ammount: vm.amount,
                                    CollectorName: MainUtils.getAgent(),
                                    PaymentType: PIX,
                                    BoletoId: null,
                                    AcquireId: resultCapture.acquirer_id,
                                    AnoVingencia: vm.vigenciaField.split(" ")[0],
                                    MesVingencia: vm.vigenciaField.split(" ")[1].trim(),
                                    ChargeStatus: vm.chargeStatus,
                                    TransactionId: resultCapture.tid,
                                    SendEmail:vm.enviaEmail,
                                    ComissionConceded: false, // need to see the property nameComissionConceded
                                    ExpireDate:resultCapture.pix_expiration_date,
                                    DueDate: moment(vm.expirationDateField).toDate(),
                                    TxtWAPhones:vm.customerPhones,
                                    ChargingComment: vm.AdditionalComment,
                                    SendMarketing1: vm.sendMarketing1,
                                    SendMarketing2: vm.sendMarketing2,
                                    SendWAText: vm.sendWAText,
                                    MutliVigencias: vigencias
                                }
                            }
                          
                            FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {
                                if(result){
                                  FoneclubeService.getLastPersonCharging(customer.Id).then(function (res) {
                                    // debugger
                                    vm.customerChargingPaymentInfo = res;
                                    vm.message = 'PIX gerado com sucesso';
                                    vm.cobrancaRealizada = true;
                                    vm.disableTapPay = false;
                                  
                                  // if(vm.enviaWhatsapp){
                                  //     var dataMessage = {
                                  //       ClientIds: vm.customerPhones,
                                  //       Message: CopyCodigoAndPixCopy(),
                                  //       Buttons: ["Ok Recebi", "Problema"]
                                  //     };

                                  //     FoneclubeService.postSendWhatsappMessageWithButton(dataMessage).then(function(result){
                                  //         DialogFactory.showMessageDialog({mensagem:'Mensagem enviada ao usuário via WhatsApp'});
                                  //     });
                                  // }
                                });
                                }
                                else
                                  alert('Não foi possível realizar cobrança');


                                })
                                .catch(function(error){
                                    // debugger
                                    alert('Aviso em verificação secundária, printar tela -  '
                                    + '_' + customerCharging.Id
                                    + '_' + customerCharging.ChargeStatus
                                    + '_' + customerCharging.TransactionId
                                    + '_' + customerCharging.ComissionConceded
                                    + '_' + customerCharging.Charging.Comment
                                    + '_' + customerCharging.Charging.CommentEmail
                                    + '_' + customerCharging.Charging.CommentBoleto
                                    + '_' + customerCharging.Charging.Ammount
                                    + '_' + customerCharging.Charging.CollectorName
                                    + '_' + customerCharging.Charging.PaymentType
                                    + '_' + customerCharging.Charging.BoletoId
                                    + '_' + customerCharging.Charging.AcquireId
                                    + '_' + customerCharging.Charging.AnoVingencia
                                    + '_' + customerCharging.Charging.MesVingencia
                                    + '  bc372'
                                    )
                                    console.log('catch error');
                                    console.log(error);
                                });
                          }
                          catch(erro){
                              var teste1 = emailObject;
                              var teste2 = existentCustomer;
                              var teste3 = vm.amount;
                              alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                          }


                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação: \n' + JSON.stringify(error.data)});
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});
                            }
                            console.log(error);
                        });    

            }

            function onTapPagarSchedule(){
              ViewModelUtilsService.showConfirmDialog('Are you sure you want to schedule for '+ vm.padroaValueRepeat +'months').then(function(confirm) {
                if (confirm) {
                  for(var intScheduleCount=0; intScheduleCount < vm.padroaValueRepeat; intScheduleCount++){
                        var expiryDate = moment(vm.expirationDateField).add(1, 'M');
                        var vigenciaSchedule = moment(vm.vigenciaField.split(" ")[0] + "-" + vm.vigenciaField.split(" ")[1] + "-01");
                        var PIX = 3;
                        var customerCharging = {
                          Id: vm.customer.Id,
                          Charging:{
                              Comment:encodeURIComponent(vm.comment),
                              CommentEmail:encodeURIComponent(vm.customerComment),
                              CommentBoleto:"",
                              Ammount: vm.amount,
                              CollectorName: MainUtils.getAgent(),
                              PaymentType: PIX,
                              AnoVingencia: vigenciaSchedule.format("YYYY"),
                              MesVingencia: vigenciaSchedule.format("MM"),
                              ChargeStatus: vm.chargeStatus,
                              ScheduledMonth:expiryDate.format("MM"),
                              ScheduledYear:expiryDate.format("YYYY"),
                              ScheduledDay:expiryDate.format("DD"),
                              TxtWAPhones:vm.customerPhones,
                              ChargingComment: vm.AdditionalComment
                          }
                        }
                      //posso colocar na lista de cobranças e ser o primeiro com vingencia
                      FoneclubeService.postSchedulePayment(customerCharging).then(function(result){
                      
                      })
                      .catch(function(error){
                          console.log('catch error');
                          console.log(error);
                      });
                    
                      }
                      alert('Scheduled successfully for '+ vm.padroaValueRepeat +'months');
                }
                else{

                }
            });
          }

            function SaveDefaults()
            {
              var paymentInfo = {
                Id : vm.customer.Id,
                DefaultPaymentDay : vm.padroaValue,
                DefaultVerificar : vm.verificarValue,
                DefaultWAPhones : vm.customerPhones
              };
              FoneclubeService.saveDefaultPaymentInfo(paymentInfo).then(function (result) {
                    return false;
              });
            }

            function saveHistoryPayment(idBoleto, acquirer_id){

                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        CommentEmail:vm.customerComment,
                        CommentBoleto:vm.commentBoleto,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: PIX,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia: vm.vigenciaField.split(" ")[0],
                        MesVingencia: vm.vigenciaField.split(" ")[1],
                      ChargeStatus: vm.chargeStatus,
                      TransactionId: vm.TransactionId,
                      ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                    }
                }

                FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {

                    if(vm.pagar)
                    {
                        FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {

                          if(!result)
                            alert('Não foi possível dar baixa em comissão');


                            // FoneclubeService.dispatchedBonus(vm.customer.Id).then(function (result) {

                            //   debugger
                            //   if(!result)
                            //     alert('Não foi possível dar baixa em comissão');

                            // })
                            // .catch(function (error) {
                            //   alert('Não foi possível dar baixa em comissão');
                            // })

                        })
                        .catch(function (error) {
                          alert('Não foi possível dar baixa em comissão');
                        })
                    }


                    })
                    .catch(function(error){
                        // debugger
                        alert('Aviso em verificação secundária, printar tela -  '
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + '  bc372'
                        )
                        console.log('catch error');
                        console.log(error);
                    });


                }
                function getContactPhone(customer){

                    try{
                        return {
                            'ddd' : customer.Phones[0].DDD.toString(),
                            'number' : customer.Phones[0].Number.toString()
                        }
                    }
                    catch(e){
                        return {
                            'ddd' : '21',
                            'number' : '997865645'
                        }
                    }


                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    // debugger
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }

            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }

            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            function addExpirationDays(days) {
                var dat = new Date(days);
                if(vm.addVencimentoDays) {
                  if(!vm.customer.Use2Prices){
                    dat.setDate(dat.getDate() + 365);
                  }
                  else{
                    return moment(vm.expirationDateField).toDate()
                  }
                }
                return dat.toISOString();
            }

            function incrementPadroa(){
              vm.padroaValue++;
              refreshVencimento();
              changeTextValue();
            }

            function decrementPadroa(){
              vm.padroaValue--;
              refreshVencimento();
              changeTextValue();
            }

            function incrementPadroaRepeat(){
              vm.padroaValueRepeat++;
            }

            function decrementPadroaRepeat(){
              vm.padroaValueRepeat--;
            }

            function incrementVerificar(){
              vm.verificarValue++;
            }

            function decrementVerificar(){
              vm.verificarValue--;
            }

            function incrementBothPP(){
              vm.bothPP++;
            }

            function decrementBothPP(){
              vm.bothPP--;
            }

            function refreshVencimento(blnVal){ 
                var foDate = '';
                var currentDate = new Date();
                var selectedDt = new Date(new Date().getFullYear().toString(), vm.vigenciaField.split(" ")[1] - 1, vm.padroaValue);
                if(!blnVal){
                  selectedDt = new Date(vm.expirationDateField);
                }
                if(currentDate >= selectedDt){
                  foDate = UtilsService.formatDate(UtilsService.addDays(0));
                }
                else{
                  var datediff = UtilsService.diffBtDays(currentDate, selectedDt);
                  foDate = UtilsService.formatDate(UtilsService.addDays(datediff));
                }
                console.log("foDate: " + foDate);
                upDateCalendar(foDate);
            }

            function upDateCalendar(date){
              vm.expirationDateField = moment(date).format("DD MMMM YYYY");
            }

            function CopyCodigoAndPixCopy() {
              var infoPay = vm.customerChargingPaymentInfo;
              var addComment = infoPay.txtChargingComment !=undefined && infoPay.txtChargingComment!=null?"*"+infoPay.txtChargingComment+"*":"";
              var chargesummaryurl = window.location.origin+"/#/resumocobranca/"+vm.customer.Id+"/"+infoPay.intId;

              return `🤖 FoneClube: *FoneBot*
Prezado *${vm.customer.Name}*,
              
Segue resumo da sua última cobrança que que será enviada por email e whatsapp.
${addComment}

*Vencimento:${moment(infoPay.dteDueDate).format("DD/MM")}*
*Vigencia:${moment(infoPay.dteValidity).format("MM") + "/" + moment(infoPay.dteValidity).format("YYYY")}*
*Total:R$${infoPay.txtAmmountPayment / 100}*
              
*Detalhes para pagamento no link abaixo.*
              
${chargesummaryurl}

*Para visualizar seu QrCode siga o link abaixo*
        
http://api.foneclube.com.br/api/pagarme/pix/qrcode/${infoPay.intId}
              
Caso tenha alguma dúvida envie um *whatsapp para* 

*${'https://wa.me/5521981908190'}* 

ou email para 

*financeiro@foneclube.com.br*.
              
Obrigado pela Atenção:
*FoneClube*  👍`;
            }

            function CopyCodigoAndPix() {
              
              var text_to_share = CopyCodigoAndPixCopy();
              ClipBoardCopy(text_to_share);
        
            }
        
            function CopyQRCodePix() {
        
              var infoPay = vm.customerChargingPaymentInfo;

              var text_to_share = `🤖 FoneClube: *FoneBot*
        
Prezado *${vm.customer.Name}*,
        
Segue resumo da sua última cobrança que que será enviada por email e whatsapp.
        
*Vencimento:${moment(infoPay.dteDueDate).format("DD/MM")}*
*Vigencia:${moment(infoPay.dteValidity).format("MM") + "/" + moment(infoPay.dteValidity).format("YYYY")}*
*Total:R$${infoPay.txtAmmountPayment / 100}*
        
*Para visualizar seu QrCode siga o link abaixo*
        
*http://api.foneclube.com.br/api/pagarme/pix/qrcode/${infoPay.intId}*
        
Caso tenha alguma dúvida envie um *whatsapp para* 
*${'https://wa.me/5521981908190'}* 

ou email para 
*financeiro@foneclube.com.br*.
        
Obrigado pela Atenção:
*FoneClube*  👍`;
        
              ClipBoardCopy(text_to_share);
        
            }
        
            function CopyCodigo(PixCode) {
              var text_toShare = `${vm.customerChargingPaymentInfo.pixCode}


*ATTENÇÃO: A parte azul do texto acima não é um link e se clicar nele vai dar erro!*
                    
É necessario copiar todo texto do codigo PIX acima e colar ele no aplictivo do seu banco.`;

            ClipBoardCopy(text_toShare);
        
            }

            function copyForWhatsapp(){
              ClipBoardCopy(vm.customerComment.replace(/\|/g, ''));
            }

            function copyForTelegram(){
              ClipBoardCopy(vm.customerComment.replace(/\|/g, '').replace(/\*/g, '**'));
            }
            
        
            function ClipBoardCopy(text_to_share) {
              // create temp element
              var copyElement = document.createElement("pre");
              copyElement.appendChild(document.createTextNode(text_to_share));
              copyElement.id = 'tempCopyToClipboard';
              angular.element(document.body.append(copyElement));
        
              // select the text
              var range = document.createRange();
              range.selectNode(copyElement);
              window.getSelection().removeAllRanges();
              window.getSelection().addRange(range);
        
              // copy & cleanup
              document.execCommand('copy');
              window.getSelection().removeAllRanges();
              copyElement.remove();
            }

            function validatePhone(){
              var checkPhoneNums = vm.customerPhones.replace(/[^0-9\.,]/g, "");
              FoneclubeService.validatePhoneForWA(checkPhoneNums).then(function(result){
                if(result){
                  var validNumbers = result.split('|')[0];
                  var invalidNumbers = result.split('|')[1];
                  vm.customerPhones = validNumbers;
                  if(invalidNumbers)
                    vm.customersInvalidPhones = "Invlaid numbers : "+ invalidNumbers;
                  else
                    vm.customersInvalidPhones ="Ok";
                }
              });
            }
            
            function generateAndPasteDefaults(){
              vm.customerComment = vm.defaultTemplateText;
              changeTextValue();
              ClipBoardCopy(vm.customerComment);
              vm.comment=vm.customerComment;
            }
        }
    })();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('RepeatBoletoModalController', RepeatBoletoModalController);
    
    
        RepeatBoletoModalController.inject = ['ViewModelUtilsService', '$scope','PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService'];
        function RepeatBoletoModalController(ViewModelUtilsService, $scope,PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService) {

    
            var vm = this;
            // debugger;
            var customer = ViewModelUtilsService.modalBoletoData;
            var payment = ViewModelUtilsService.modalRepeatBoletoData;
           
            
            vm.customer = customer;
            vm.payment=payment;
             
            var newCustomer;
            var BOLETO = 2;
            
            
            vm.etapaDados = true;
            vm.cobrancaRealizada = false;
            //vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            console.log('RepeatBoletoModalController');
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.enviaEmail = true;
            
            vm.amount=vm.payment.txtAmmountPayment/100;
            vm.commentBoleto='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);
            vm.comment='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);

            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
                 }
            /*function RepeatBoletoModalController($scope) {
                // debugger;
                $scope.vm.amount = 121;
                $scope.vm.commentBoleto="0123";
                $scope.vm.comment="123";
            }*/
    
            function onTapConfirmarPagamento() {
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }
                vm.etapaDados = false;
                vm.etapaConfirmacao = true;
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    // debugger;
                console.log('tap pagar boleto')
                console.log(parseInt(vm.amount))
                if(parseInt(vm.amount) < 100)
                {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Não é permitido cobranças a baixo de 1 Real'});                
                    return;
                }
    
                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                // debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                if(!vm.expirationDateField)
                {
                    vm.expirationDateField = 5; 
                }
                else{
                   if(vm.expirationDateField <= 0)
                   {
                    vm.expirationDateField = 5; 
                   } 
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, addExpirationDays(vm.expirationDateField)).then(function(resultCapture){
    
                            
                            
                        try{
                            var chargingLog = {
                                'customer': existentCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': resultCapture,
                                'boletoComment':vm.commentBoleto,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                            // debugger;
                            if(vm.enviaEmail)
                            {
                                // debugger;
                                var emailObject = {
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.commentBoleto,
                                    'TemplateType' : 2
                                }
        
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }
                            
    
                            try{
                                vm.TransactionId = resultCapture.tid;
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    console.log(error);
    
                                });
    
                            }
                            catch(erro){
    
                            }
    
    
                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
    
                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                             
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});                             
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });
    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
    
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        TransactionId: vm.TransactionId
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
    
    
            }
    
    
            function getContactPhone(customer){
                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
              }
    
        }
    })();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('RepeatCardController', RepeatCardController);

    RepeatCardController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
    function RepeatCardController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {
        
        var vm = this;
        var customer = ViewModelUtilsService.modalCardData;  
        vm.customer = customer;
        var payment=ViewModelUtilsService.modalRepeatCardData;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2021, 2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        vm.etapaDados = true;
        

        function onTapConfirmarPagamento() {
            // debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('RepeatCardController');

        var customerId = customer.Id;
        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            // debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            if(parseInt(vm.amount) < 100)
            {
                DialogFactory.showMessageDialog({mensagem:'Não é permitido cobranças a baixo de 1 Real', titulo: 'Aviso'});                            
                return;
            }

            paymentNewCustomer();
        }

        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

            // debugger;
            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                // debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    // debugger;
                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                      // debugger;
                      vm.TransactionId = result.tid;

                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        var emailObject = {
                            'Id':vm.customer.Id,
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        try{
                            var chargingLog = {
                                'customer': newCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': result,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO,
                        TransactionId: vm.TransactionId
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();
(function() {
    'use strict';

        angular
            .module('foneClub')
            .controller('ReportModalController', ReportModalController);


        ReportModalController.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

        function ReportModalController(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, localStorageService, $filter) {

            console.log('--- ReportModalController ---');
            var vm = this;
            vm.fontcolor = "red";
            var customer = ViewModelUtilsService.modalData;
            vm.customer = customer;
            vm.templates = [];
            vm.userphone = "";
            vm.invitee = "";
            vm.isSelected = true;
            vm.selectedtemplate = "";
            vm.query = "";
            vm.choices = [
              {Id: 4, Choice : "Generic message" },
              {Id: 1, Choice : "Renviar ultima Cobrança"},
              {Id: 2, Choice : "t.marketing1" },
              {Id: 3, Choice : "t.markeging2" }
            ];
            vm.templateNames = [];
            vm.onTapSubmit = onTapSubmit;
            vm.validatePhone = validatePhone;
            vm.showTemplateModal = showTemplateModal;
            vm.selectItem = selectItem;
            init();

            function init(){
                 localStorageService.set("SelectedTemplate", null);
                 if(vm.customer.DefaultWAPhones == undefined || vm.customer.DefaultWAPhones == null)
                   vm.userphone = customer.Phones.filter(x=>!x.IsFoneclube)[0].DDD + customer.Phones.filter(x=>!x.IsFoneclube)[0].Number;
                 else
                   vm.userphone = vm.customer.DefaultWAPhones;

                 validatePhone();
                 FoneclubeService.getWATemplates().then(function (result) {
                     debugger;
                     if(result)
                     {
                        vm.templates = result;
                        vm.templateNames = result.map(x=> x.TemplateName).filter(onlyUnique).sort((a,b) => (a > b) ? 1 : ((b > a) ? -1 : 0));
                        vm.templates = vm.templates.sort((a,b) => (a.TemplateName > b.TemplateName) ? 1 : ((b.TemplateName > a.   TemplateName) ? -1 : 0));
                     }
                 });  
            }

            function onlyUnique(value, index, self) {
              return self.indexOf(value) === index;
            }

            function selectItem(item){
              vm.isSelected = false;
            }

            function validatePhone(){
              if(vm.userphone){
                try{
                vm.customersInvalidPhones = "";
                var checkPhoneNums = vm.userphone.replace(/[^0-9\.,]/g, "");
                FoneclubeService.validatePhoneForWA(checkPhoneNums).then(function(result){
                  if(result){
                    var validNumbers = result.split('|')[0];
                    var invalidNumbers = result.split('|')[1];
                    vm.userphone = validNumbers;
                    if(invalidNumbers){
                      vm.customersInvalidPhones = "Invlaid number(s) : "+ invalidNumbers;
                      vm.fontcolor = "font-red";
                    }
                    else{
                      vm.customersInvalidPhones ="Validated";
                      vm.fontcolor = "font-green";
                    }
                  }
                  else{
                    DialogFactory.showMessageDialog({mensagem:'Error occured while validating phone numbers'});
                  }
                });
              }
              catch(ex){
                DialogFactory.showMessageDialog({mensagem:'Error occured while validating phone numbers'});
              }
              }
            }

            function showTemplateModal(templateName){
              vm.selectedtemplate = templateName;
              vm.query = templateName;
              vm.isSelected = true

              debugger;
              var selectedTemplate = vm.templates.find(x=>x.TemplateName == vm.selectedtemplate);
              if(selectedTemplate){
              
                var data = {
                  Customer: vm.customer,
                  PhoneNumbers : vm.userphone,
                  SelectedRecord: selectedTemplate
                }
                ViewModelUtilsService.showModalWATemplateEdit(data);
              }
            }

            function onTapSubmit(eventSelected)
            {
              debugger;
              switch(eventSelected)
              {
                case 1: // Send Last charge summary
                  {
                    FoneclubeService.getChargeAndServiceOrderHistory(customer.Id).then(function (result) {

		              	if(result)
		              	{
		              		var history = result[0];
		              		if(history){
		              			if(history.Charges.PaymentStatusDescription != "Paid")
		              			{
                          FoneclubeService.sendChargeSummary(history.Charges.Id, vm.userphone).then(function(result){
                            if(result == "Sent")
                                DialogFactory.showMessageDialog({mensagem:'Message sent successfully to '+ customer.Name +' via whatsapp'});
                            else if(result == "Partial")
                                DialogFactory.showMessageDialog({mensagem:'Message partially sent to '+ customer.Name +' via whatsapp'});
                            else
                                DialogFactory.showMessageDialog({mensagem:'Error occured while sending message to '+ customer.Name +' via whatsapp'});
                          });
		              			}
		              			else{
		              				DialogFactory.showMessageDialog({mensagem:'User already paid his last charge'});
		              			}
		              		}
		              	}
		              });
                  }
                  break;
                  case 2:
                  case 3:
                    {
                      var selectedTemplate = localStorageService.get("SelectedTemplate");
                      
                      var data = {
                        PersonId : vm.customer.Id,
                        TypeId : parseInt(eventSelected) - 1 ,
                        PhoneNumbers : vm.userphone,
                        Invitee : vm.invitee == undefined ? null: vm.invitee,
                        Template : selectedTemplate == null ? null: selectedTemplate
                      };
                   
                      FoneclubeService.sendMarketingMsg(data).then(function(result){
                        if(result == "Sent")
                          DialogFactory.showMessageDialog({mensagem:'Message sent successfully to '+ customer.Name +' via whatsapp'});
                        else if(result == "Partial")
                          DialogFactory.showMessageDialog({mensagem:'Message partially sent to '+ customer.Name +' via whatsapp'});
                        else
                          DialogFactory.showMessageDialog({mensagem:'Error occured while sending message to '+ customer.Name +' via whatsapp'});
                      });
                    
                  }
                  break;
                  case 4:
                    {
                      var selectedTemplate = vm.templates.find(x=>x.Trigger == "##1MensagemGenerica");
                      if(selectedTemplate){
                        var data = {
                          Customer: vm.customer,
                          PhoneNumbers : vm.userphone,
                          SelectedRecord: selectedTemplate
                        }
                        ViewModelUtilsService.showModalWATemplateEdit(data);
                      }
                    }
              }
              localStorageService.set("SelectedTemplate",null);
              vm.query = "";
            }
        }
    })();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('SelectReportModalController', SelectReportModalController);


  SelectReportModalController.inject = ['ViewModelUtilsService', 'FoneclubeService', 'DialogFactory', 'UtilsService', 'localStorageService', '$filter'];

  function SelectReportModalController(ViewModelUtilsService, FoneclubeService, DialogFactory, UtilsService, $filter, localStorageService) {

    console.log('--- SelectReportModalController ---');
    var vm = this;
    vm.templates = [];
    vm.selectedRecord = ViewModelUtilsService.modalReportData.SelectedRecord;
    vm.customer = ViewModelUtilsService.modalReportData.Customer;
    vm.userphone = ViewModelUtilsService.modalReportData.PhoneNumbers;
    vm.saveTemplate = saveTemplate;
    vm.sendTemplate = sendTemplate;
    vm.sendBtn = document.getElementsByClassName('col-md-12 btn btn-success btn_sendTemplate')
    vm.saveBtn = document.getElementsByClassName('col-md-12 btn btn-primary btn_saveTemplate')

    loadTemplates();



    function loadTemplates() {
      localStorageService.set("SelectedTemplate", null);
      if (vm.selectedRecord) {
        vm.selectedRecord.Trigger = !isArray(vm.selectedRecord.Trigger) ? vm.selectedRecord.Trigger : vm.selectedRecord.Trigger.join(',');
        vm.selectedRecord.Buttons = vm.selectedRecord.Buttons;
        vm.selectedRecord.Urls = vm.selectedRecord.Urls;
        vm.selectedRecord.ListButton = vm.selectedRecord.ListButton;
        vm.selectedRecord.ListSections = vm.selectedRecord.ListSections;
        vm.selectedRecord.ListSectionRows = vm.selectedRecord.ListSectionRows;
      }
      FoneclubeService.getWATemplates().then(function (result) {
        vm.templates = result;
      });
    }

    function saveTemplate() {
      var employeeToEdit = vm.templates.find(x => x.Id === vm.selectedRecord.Id);
      console.log('-- WA Edit --');

      vm.saveBtn[0].disabled = true

      if (employeeToEdit) {
        var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
        sendData.Trigger = vm.selectedRecord.Trigger.split(',');
        sendData.Buttons = vm.selectedRecord.Buttons;
        sendData.Urls = vm.selectedRecord.Urls;
        sendData.ListButton = vm.selectedRecord.ListButton;
        sendData.ListSections = vm.selectedRecord.ListSections;
        sendData.ListSectionRows = vm.selectedRecord.ListSectionRows;
        localStorageService.set("SelectedTemplate", sendData);

        FoneclubeService.saveWATemplates(sendData).then(function (result) {
          if (result) {
            DialogFactory.showMessageDialog({ mensagem: 'Template Saved Successfully' });
            SaveDefaults();
          }
          vm.saveBtn[0].disabled = false

        });
      }
    }


    function sendTemplate() {


      vm.sendBtn[0].disabled = true
      var sendData = JSON.parse(JSON.stringify(vm.selectedRecord));
      sendData.Trigger = vm.selectedRecord.Trigger.split(',');
      sendData.Buttons = vm.selectedRecord.Buttons;
      sendData.Urls = vm.selectedRecord.Urls;
      sendData.ListButton = vm.selectedRecord.ListButton;
      sendData.ListSections = vm.selectedRecord.ListSections;
      sendData.ListSectionRows = vm.selectedRecord.ListSectionRows;

      var data = {
        PersonId: vm.customer.Id,
        PhoneNumbers: vm.userphone,
        Invitee: vm.invitee == undefined ? null : vm.invitee,
        Template: sendData
      };

      FoneclubeService.sendGenericMsg(data).then(function (result) {
        if (result == "Sent") {
          DialogFactory.showMessageDialog({ mensagem: 'Message sent successfully to ' + vm.customer.Name + ' via whatsapp' });
          SaveDefaults();
        }
        else if (result == "Partial") {
          DialogFactory.showMessageDialog({ mensagem: 'Message partially sent to ' + vm.customer.Name + ' via whatsapp' });
        }
        else {
          DialogFactory.showMessageDialog({ mensagem: 'Error occured while sending WhatsApp Message' });
        }
        vm.sendBtn[0].disabled = false
      });

    }

    function SaveDefaults() {
      debugger;
      var paymentInfo = {
        Id: vm.customer.Id,
        DefaultWAPhones: vm.userphone
      };
      FoneclubeService.saveDefaultPaymentInfo(paymentInfo).then(function (result) {
        return true;
      });
    }
  }
})();

(function () {
  'use strict';


  angular.module('foneClub').service('FoneclubeService', FoneclubeService);

  FoneclubeService.inject = ['$q', 'HTTPService', '$http'];
  function FoneclubeService($q, HTTPService, $http) {


    //API live
    
    var urlApi = 'https://api.foneclube.com.br/api';

    //API homol
    // var urlApi = 'https://hapi.foneclube.com.br/api'


    //API homol debug
    //var urlApi = 'http://localhost:57078/api';

    this.postBasePerson = postBasePerson;
    this.postUpdatePerson = postUpdatePerson;
    this.postUpdatePersonAdress = postUpdatePersonAdress;
    this.postCheckout = postCheckout;
    this.postHistoryPayment = postHistoryPayment;
    this.postSchedulePayment = postSchedulePayment;
    this.postDebitoTransaction = postDebitoTransaction;
    this.postDeletePerson = postDeletePerson;
    this.postUpdateCustomer = postUpdateCustomer;
    this.postOrderServicePerson = postOrderServicePerson;
    this.postChargingClient = postChargingClient;
    this.postChargingClientCommitCard = postChargingClientCommitCard;
    this.postCustomerParent = postCustomerParent;
    this.postUpdatePagarmeID = postUpdatePagarmeID;
    this.postSendEmail = postSendEmail;
    this.postGeraBoleto = postGeraBoleto;
    this.postCustomerComment = postCustomerComment;
    this.saveTemplate = saveTemplate;
    this.deleteTemplate = deleteTemplate;
    this.sendTemplate = sendTemplate;
    this.postSoftDeletePhone = postSoftDeletePhone;
    this.postSoftDeleteCustomer = postSoftDeleteCustomer;
    this.postUnDeleteCustomer = postUnDeleteCustomer;
    this.postChargingLog = postChargingLog;
    this.postPersonAtivity = postPersonAtivity;
    this.postPersonNextAction = postPersonNextAction;
    this.postAllPhoneLinesAction = postAllPhoneLinesAction;
    this.postChargingUpdate = postChargingUpdate;
    this.postDesassociarLinha = postDesassociarLinha;
    this.postUpdatePhonePlan = postUpdatePhonePlan;
    this.postGeraCobrancaIntegrada = postGeraCobrancaIntegrada;
    this.postCustomerUpdateParent = postCustomerUpdateParent;
    this.postIsertServiceDeactive = postIsertServiceDeactive;
    this.postIsertServiceActive = postIsertServiceActive;
    this.postUpdateServiceFoneclube = postUpdateServiceFoneclube;
    this.postPersonFlag = postPersonFlag;
    this.postUpdateFlag = postUpdateFlag;
    this.postPropriedadeIterna = postPropriedadeIterna;
    this.postUpdateScheduledCharges = postUpdateScheduledCharges;

    this.getPlans = getPlans;
    this.getPlansById = getPlansById;
    this.getCustomerPlans = getCustomerPlans;
    this.getOperators = getOperators;
    this.getCustomers = getCustomers;
    this.getAllCustomers = getAllCustomers;
    this.getCustomerByCPF = getCustomerByCPF;
    this.getCustomerPhonesByCPF = getCustomerPhonesByCPF;
    this.getCustomerWithPhoneStatus = getCustomerWithPhoneStatus;
    this.getHistoryPayment = getHistoryPayment;
    this.getCustomerByPhoneNumber = getCustomerByPhoneNumber;
    this.getCustomerById = getCustomerById;
    this.getChargingClients = getChargingClients;
    this.getTblServiceOrders = getTblServiceOrders;
    this.getCustomerParentByPhone = getCustomerParentByPhone;
    this.getAllParents = getAllParents;
    this.getAllCustomersNew = getAllCustomersNew;
    this.getLastPaymentType = getLastPaymentType;
    this.getStatusBlockedClaro = getStatusBlockedClaro;
    this.getStatusLinhaClaro = getStatusLinhaClaro;
    this.getChargeAndServiceOrderHistory = getChargeAndServiceOrderHistory;
    this.getChargeAndServiceOrderHistoryDinamic = getChargeAndServiceOrderHistoryDinamic;
    this.getStatusCharging = getStatusCharging;
    this.getStatusDocument = getStatusDocument;
    this.getStatusChargingOfCustomer = getStatusChargingOfCustomer;
    this.getPlanOptios = getPlanOptios;
    this.getAllPlanOptios = getAllPlanOptios;
    this.SendEmailStatus = SendEmailStatus;
    this.getEmailDetails = getEmailDetails;
    this.saveemail = saveemail;
    this.getDataPgt = getDataPgt;
    this.getCommision = getCommision;
    this.dispatchedCommision = dispatchedCommision;
    this.dispatchedBonus = dispatchedBonus;
    this.getUpdatePagarme = getUpdatePagarme;
    this.getTemplates = getTemplates;
    this.getStatusAPI = getStatusAPI;
    this.getChargingLog = getChargingLog;
    this.getChargingScheduleHistory = getChargingScheduleHistory;
    this.getLinhasEstoque = getLinhasEstoque;
    this.getStatusTelefonesOperadora = getStatusTelefonesOperadora;
    this.getLastPersonCharging = getLastPersonCharging;
    this.getAllCustomersMinimal = getAllCustomersMinimal;
    this.getReintegrateDatePagarme = getReintegrateDatePagarme;
    this.getScheduleDateExecuted = getScheduleDateExecuted;
    this.getAllPhonesStatus = getAllPhonesStatus;
    this.getMassChargingData = getMassChargingData;
    this.getStatusDivergencia = getStatusDivergencia;
    this.getActiveCustomers = getActiveCustomers;
    this.getPhoneServices = getPhoneServices;
    this.getServices = getServices;
    this.getAllServices = getAllServices;
    this.getBonusLog = getBonusLog;
    this.getBonusOrderHistory = getBonusOrderHistory;
    this.getComissionsOrderHistory = getComissionsOrderHistory;
    this.getTotaisComissoes = getTotaisComissoes;
    this.postSendChargeMessage = postSendChargeMessage;
    this.postSendWhatsappMessage = postSendWhatsappMessage;
    this.getClientMessages = getClientMessages;
    this.getAPIUrl = getAPIUrl;
    this.getFlagsTypes = getFlagsTypes;
    this.getPersonFlags = getPersonFlags;
    this.getPersonPhones = getPersonPhones;
    this.getStatusCardDebito = getStatusCardDebito;
    this.getMassChargingFull = getMassChargingFull;
    this.getCustomerDaysWithoutCharge = getCustomerDaysWithoutCharge;
    this.getDeleteAgendamentoCobranca = getDeleteAgendamentoCobranca;
    this.saveDefaultPaymentInfo = saveDefaultPaymentInfo;
    this.getChargingById = getChargingById;
    this.setChargingFlagByUser = setChargingFlagByUser;
    this.postSendWhatsAppMessageNew = postSendWhatsAppMessageNew;
    this.postSendWhatsappMessageWithButton = postSendWhatsappMessageWithButton;
    this.validatePhoneForWA = validatePhoneForWA;
    this.getWATemplates = getWATemplates;
    this.saveWATemplates = saveWATemplates;
    this.deleteWATemplates = deleteWATemplates;
    this.sendChargeSummary = sendChargeSummary;
    this.sendMarketingMsg = sendMarketingMsg;
    this.sendGenericMsg = sendGenericMsg;
    this.sendWelcomeMsgWhatsApp = sendWelcomeMsgWhatsApp;
    this.sendWhatsAppMessageCCRefused = sendWhatsAppMessageCCRefused;
    this.getLastTransactionIdByCustomer = getLastTransactionIdByCustomer;
    this.saveImportDrCelular = saveImportDrCelular;
    this.verifyImportDrCelular = verifyImportDrCelular;
    this.getClientDashboardData = getClientDashboardData;
    this.saveUserSettings = saveUserSettings;

    this.wppStart = wppStart;
    this.wppStop = wppStop;
    this.wppManageSession = wppManageSession;
    this.wppCreateTokenSession = wppCreateTokenSession;
    this.wppStatusSession = wppStatusSession;
    this.wppCheckConnectionStatus = wppCheckConnectionStatus;

    this.validateCEP = validateCEP;
    this.validateCPF = validateCPF;
    this.validateICCID = validateICCID;
    this.saveInstaRegisterAndCharge = saveInstaRegisterAndCharge;
    this.saveInstaRegisterClient = saveInstaRegisterClient;
    this.saveInstaPhoneClient = saveInstaPhoneClient;
    this.getPortabilidadeOperators = getPortabilidadeOperators;
    this.postInstaCustomerParent = postInstaCustomerParent;
    this.getAllPhoneLinesNew = getAllPhoneLinesNew;
    this.getAgGridStates = getAgGridStates;
    this.saveAgGridState = saveAgGridState;
    this.deleteAgGridState = deleteAgGridState;
    this.updateDefaultGridState = updateDefaultGridState;
    this.getContelDetailByPhone = getContelDetailByPhone;
    this.getContelPlans = getContelPlans;
    this.addTopupPlan = addTopupPlan;
    this.getContelDetailBySaldoPhone = getContelDetailBySaldoPhone;
    this.syncContelLinesForUser = syncContelLinesForUser;
    this.syncContelLines = syncContelLines;
    this.saveWATemplatesConfig = saveWATemplatesConfig;
    this.getWATemplatesConfig = getWATemplatesConfig;
    this.permanentBlockLine = permanentBlockLine;
    this.permanentUnBlockLine = permanentUnBlockLine;
    this.permanentBlockLineForCustomer = permanentBlockLineForCustomer;
    this.permanentUnBlockLineForCustomer = permanentUnBlockLineForCustomer;
    this.getTopupHistory = getTopupHistory;
    this.addContelLineManual = addContelLineManual;
    this.getLineDetails = getLineDetails
    this.updateInstaEditClient = updateInstaEditClient;
    this.updateInstaEditClientLine = updateInstaEditClientLine;
    this.softDeleteLine = softDeleteLine;
    this.saveInstaRegisterClientOrLine = saveInstaRegisterClientOrLine;
    this.saveInstaRegisterClientOrLineWithCharge = saveInstaRegisterClientOrLineWithCharge;
    this.getContelSaldo = getContelSaldo;
    this.saveImportTopupHistory = saveImportTopupHistory;

    this.SaveIntlDeposits = SaveIntlDeposits;
    this.getMMHistory = getMMHistory;

    this.updateRefundInfo = updateRefundInfo;
    this.getAllInternationUsers = getAllInternationUsers;
    this.getAllInternationUserData = getAllInternationUserData;
    this.postRegisterIntlCustomer = postRegisterIntlCustomer;
    this.resetESIM = resetESIM;

    function getAPIUrl() {
      return urlApi;
    }

    function getClientDashboardData(month, year, ativos) {
      var q = $q.defer();

      $q.all([getAllCustomers(false), getStatusCharging(month, year, ativos)]).then(function (values) {
        var results = [];
        results[0] = values[0];
        results[1] = values[1];
        q.resolve(results);
      }).catch(function (error) {
        q.reject(error);
      });

      return q.promise;;
    }

    function getLastPaymentType(customer) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat('/profile/getpaymentmethod?personID='.concat(customer.Id))
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerParentByPhone(phoneparent, personid) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/profile/customer/GetParentbyPhone?phoneparent=' +
          phoneparent +
          '&personid=' +
          personid
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllParents() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customer/GetParentAll'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllCustomersMinimal() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/all/customers/list'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllCustomersNew() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customers/all'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusChargingOfCustomer(id, month, year) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/charging/cobranca/status/vingencia/cliente/' +
          id +
          '/mes/' +
          month +
          '/ano/' +
          year
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusCharging(month, year, ativos) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/charging/cobranca/status/vingencia/mes/' + month + '/ano/' + year)
      )
        //HTTPService.get(urlApi.concat('/charging/cobranca/status/vingencia/mes/' + month + '/ano/' + year + '/ativos/' + ativos))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getUpdatePagarme() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/pagarme/transacao/update'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getReintegrateDatePagarme() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/pagarme/transacao/reintegrate/date'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    //api/charging/schedule/executed/date
    function getScheduleDateExecuted() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/schedule/executed/date'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getBonusLog() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/bonus/lista/log'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getBonusOrderHistory(total) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/bonus/order/history?total=' + total))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getComissionsOrderHistory(total) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/comission/order/history?total=' + total))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTotaisComissoes(customerId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/comission/totais/' + customerId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCustomerComment(commentDetails) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/comment'), commentDetails)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdatePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/update'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postDeletePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/delete/customer'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }



    function postUpdatePersonAdress(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/updateAdress'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBasePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insert'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCheckout(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/cadastro'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postHistoryPayment(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/charging/insert'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postSchedulePayment(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/charging/schedule/insert'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdateCustomer(customer) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/update'), customer)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postOrderServicePerson(param) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/service/order'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdatePagarmeID(customer) {
      // customer/pagarme/id/insert
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/pagarme/id/insert'), customer)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postChargingClient(year, month, param) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/charging/')
          .concat(year)
          .concat('/')
          .concat(month)
          .concat('/clients/')
          .concat(param.ClientId)
          .concat('/charging'),
        param
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingClientCommitCard(year, month, chargingId, param) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/charging/')
          .concat(year)
          .concat('/')
          .concat(month)
          .concat('/clients/')
          .concat(param.ClientId)
          .concat('/charging/')
          .concat(chargingId),
        param
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postCustomerParent(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/parent/insert'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postInstaCustomerParent(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/parent/insta/insert'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendEmail(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postGeraBoleto() {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/pagarme/boleto'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postGeraCobrancaIntegrada(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/pagarme/integrada'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function saveTemplate(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/template/save'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function sendTemplate(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/template/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSoftDeletePhone(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/delete/soft/phone'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSoftDeleteCustomer(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/delete/soft/customer'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUnDeleteCustomer(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/delete/undo/customer'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingLog(param, id) {
      // debugger;
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/charging/log/person/id/').concat(id), {
        SerializedCharging: param
      })
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postPersonAtivity(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/ativity'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postPersonNextAction(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/nextaction'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postAllPhoneLinesAction(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/line/edit'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingUpdate(chargingId, status) {
      var q = $q.defer();
      HTTPService.post(
        urlApi.concat('/charging/update/id/' + chargingId + '/canceled/' + status)
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postDesassociarLinha(phoneId) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/desassociar?phoneId=' + phoneId))
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdatePhonePlan(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/foneclube/update'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postCustomerUpdateParent(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/parent/id/insert'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceActive(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/extra/service/insert'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceDeactive(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/extra/service/insert/deactive'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceFoneclube(service) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/service/insert'), service)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateServiceFoneclube(service) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/service/update'), service)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postInsertPlanFoneclube(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/insert'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdatePlanFoneclube(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/update'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postPersonFlag(flag) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/flags/insert'), flag)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateFlag(flag) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/flag/update'), flag)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postDebitoTransaction(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/charging/cielo/transaction/insert'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPlans() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/account/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPlansById(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/account/plans/').concat(id))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPlanOptios() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllPlanOptios() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/all/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCommision(customerId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/customer/').concat(customerId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function dispatchedCommision(customerId) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/comission/customer/')
          .concat(customerId)
          .concat('/dispatched')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function dispatchedBonus(customerId) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/comission/customer/')
          .concat(customerId)
          .concat('/bonus/dispatched')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerPlans(register) {
      var q = $q.defer();

      HTTPService.get(
        urlApi
          .concat('/profile/customer/plans?documentNumber=')
          .concat(register.toString())
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getOperators() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/account/operators'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerByCPF(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerPhonesByCPF(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customers/phone/'.concat(param)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerWithPhoneStatus(param) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/profile/cliente/phone/status?documentRegister='.concat(param))
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerWithPhoneStatus(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusBlockedClaro(ddd, numeroLinha) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat(
          '/manager/phones/claro/status/linha/ddd/' + ddd + '/numeroLinha/' + numeroLinha
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusLinhaClaro(ddd, numeroLinha, numero) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat(
          '/manager/phones/claro/status/linha/ddd/' +
          ddd +
          '/numeroLinha/' +
          numeroLinha +
          '/details'
        )
      )
        .then(function (result) {
          result.index = numero;
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomers() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customers'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getHistoryPayment(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/charges?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTblServiceOrders(id) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/profile/getorders?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getChargeAndServiceOrderHistory(id) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/charging/history?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getChargeAndServiceOrderHistoryDinamic(id, index) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/charging/history?personID='.concat(id)))
        .then(function (result) {
          result.indexLista = index;
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getCustomerByPhoneNumber(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/phoneOwner'), param)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerById(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente/id/'.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingClients(param) {
      var q = $q.defer();

      HTTPService.get(
        urlApi
          .concat('/charging/')
          .concat(param.year)
          .concat('/')
          .concat(param.month)
          .concat('/clients')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusDocument(documentNumber) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/profile/customer/status/new/document/').concat(documentNumber)
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function SendEmailStatus(emaildetails) {
      var q = $q.defer();
      HTTPService.postFile(urlApi.concat('/email/sendemailstatus'), emaildetails)
        .then(function (result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function (error) {
          console.log(error);
          q.reject(error);
        });

      return q.promise;
    }

    function getEmailDetails(templateId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/email/sendemailstatus/' + templateId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveemail(emaildetails) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/email/saveEmailDetails'), emaildetails)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getDataPgt(idPargarme) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/pagarme/transacao/dataUltimoPagamento/') + idPargarme
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTemplates() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/email/templates'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusAPI() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/status/database/name'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingLog(matricula) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/history/log/person/id/') + matricula)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingScheduleHistory(matricula) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/schedule/history/') + matricula)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLinhasEstoque() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/estoque'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusTelefonesOperadora() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/status'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLastPersonCharging(matricula) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/last/customer/') + matricula)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllCustomers(minimal) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/all/customers?minimal=') + minimal)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllPhonesStatus() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/all'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getMassChargingData(mes, ano) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/charging/mass?mes='
            .concat(mes)
            .concat('&ano=')
            .concat(ano)
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getStatusDivergencia() {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/manager/phones/divergencia'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getActiveCustomers() {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/profile/active/customers/parents'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getPhoneServices(phoneId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/') + phoneId + '/extra/services')
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getServices() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/extra/services'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllServices() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/extra/all/services'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postSendChargeMessage(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/message/send-invoice/' + param))
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendWhatsappMessage(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/message/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendWhatsappMessageWithButton(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/whatsapp/sendbutton'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendWhatsAppMessageNew(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/whatsapp/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getClientMessages(param, minimal) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/message/client/') + param + "?minimal=" + minimal)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getFlagsTypes(onlyFlags) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/flags/types?phoneFlagOnly='.concat(onlyFlags)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPersonFlags(idPerson) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customer/' + idPerson + '/flags'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPersonPhones(idPerson) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/customer/' + idPerson))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusCardDebito(idPerson) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/cielo/debito/apto/' + idPerson))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }


    function getMassChargingFull(mes, ano) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/mass/full/mes/' + mes + '/ano/' + ano))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerDaysWithoutCharge() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/last/customers/chargings'))
        .then(function (result) {

          q.resolve(result);
        })
        .catch(function (error) {

          q.reject(error);
        });

      return q.promise;
    }

    function postPropriedadeIterna(estoquePhone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/estoque/propriedade/interna'), estoquePhone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateScheduledCharges(data) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/charging/schedule/update'), data)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getDeleteAgendamentoCobranca(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/schedule/delete/' + id))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {

          q.reject(error);
        });

      return q.promise;
    }

    function saveDefaultPaymentInfo(paymentInfo) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/SaveDefaultPaymentInfo'), paymentInfo)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingById(personId, chargeId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/history/' + personId + '/' + chargeId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {

          q.reject(error);
        });

      return q.promise;
    }

    function setChargingFlagByUser(chargeId, blnEnable) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/set/flag/' + chargeId + '/' + blnEnable))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {

          q.reject(error);
        });

      return q.promise;
    }

    function validatePhoneForWA(phones) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/validate/' + phones))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {

          q.reject(error);
        });

      return q.promise;
    }

    function getWATemplates() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/templates'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getWATemplatesConfig() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/whatsappconfig'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function permanentBlockLineForCustomer(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/block/customer'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function permanentUnBlockLineForCustomer(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/unblock/customer'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function permanentBlockLine(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/block'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function permanentUnBlockLine(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/unblock'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveWATemplatesConfig(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/whatsapp/whatsappconfig/save'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function sendChargeSummary(chargeId, phonenumbers) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/send/chargesummary/' + chargeId + '/' + phonenumbers))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLastTransactionIdByCustomer(documentNum) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/pagarme/transacao/last/' + documentNum))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function sendMarketingMsg(param) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/whatsapp/send/marketing'), param)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function sendGenericMsg(param) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/whatsapp/send/generic'), param)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function sendWelcomeMsgWhatsApp(param) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/whatsapp/send/welcome'), param)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveWATemplates(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/whatsapp/templates/save'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function deleteWATemplates(templateId) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/whatsapp/templates/delete/' + templateId))
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function deleteTemplate(templateId) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/template/delete/' + templateId))
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function sendWhatsAppMessageCCRefused(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/whatsapp/cc/refused'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveImportDrCelular(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/charging/drcelular/import'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function verifyImportDrCelular(ano, mes, operanto, empreso) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/drcelular/verify/' + ano + '/' + mes + '/' + operanto + '/' + empreso))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppStart() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/start'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppStop() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/stop'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppManageSession(type) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/manage/session/' + type))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppCreateTokenSession(token) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/generate/token/' + token))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppCheckConnectionStatus() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/status/connection'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function wppStatusSession() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/whatsapp/status/session'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveUserSettings(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/update/settings'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function validateCPF(cpf) {
      var q = $q.defer();

      HTTPService.get('https://api.cpfcnpj.com.br/74817fbeb42c87d0a61f20684d3309e3/1/' + cpf)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function validateCEP(cep) {
      var q = $q.defer();

      HTTPService.get('https://viacep.com.br/ws/' + cep + '/json')
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function validateICCID(iccid) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/validate/iccid/' + iccid))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function getContelDetailByPhone(phone) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/get/' + phone))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function syncContelLines() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/sync/lines'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTopupHistory(line) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/topup/history/' + line))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function syncContelLinesForUser(phone) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/sync/lines-saldo/customer/' + phone))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getContelDetailBySaldoPhone(phone) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/get/saldo/' + phone))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getContelSaldo() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/get/saldo'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getContelPlans(phone) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPortabilidadeOperators() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/port/operator/list'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function getAllPhoneLinesNew() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/alllines'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function addTopupPlan(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/topup'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveInstaRegisterAndCharge(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/client/insta-charge'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function updateInstaEditClient(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/edit'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function updateInstaEditClientLine(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/update/line'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function softDeleteLine(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/soft/delete/line'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveInstaRegisterClient(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insta/insert/customer'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveInstaPhoneClient(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insta/insert/phone'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveInstaRegisterClientOrLine(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insta/register/customerorline'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveInstaRegisterClientOrLineWithCharge(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insta/register/customerorlinewithcharge'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAgGridStates(state) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/grid/get/state/' + state))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function addContelLineManual(line) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/contel/add/line/' + line))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function saveAgGridState(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/grid/save/state'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }


    function deleteAgGridState(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/grid/delete/state'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function updateDefaultGridState(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/grid/update/default/state'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveImportTopupHistory(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/mvno/contel/import/topup/history'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function SaveIntlDeposits(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/facil/deposit/balance'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLineDetails(number) {
      var q = $q.defer();
      var token = 'T4bCc463T6nt4CuSfUGhPCBgCBVYowNyOdxrjsNI';

      var url = `https://corsproxy.io/?http://api.conteltelecom.com.br/linhas/detalhes?numero=${number}`;

      var config = {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      };

      $http.get(url, config)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }


    function getMMHistory(state) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/mvno/history/mobimatter'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function getAllInternationUsers() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/intl/all'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function resetESIM(line) {
      var q = $q.defer();

       HTTPService.get(urlApi.concat('/mvno/line/reset/' + line))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.resolve(error);
        });

      return q.promise;
    }

    function postRegisterIntlCustomer(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/register/user/intl'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function updateRefundInfo(data) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/user/intl/refund'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllInternationUserData(data) {

      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/intl/user'), data)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

  }

})();

(function() {
  'use strict';

  angular.module('foneClub').service('HubDevService', HubDevService);

  HubDevService.inject = ['$q', 'HTTPService'];

  function HubDevService($q, HTTPService) {
    //teste
    var apiToken = '5ae973d7a997af13f0aaf2bf60e65803';

    //prod
    // var apiToken = '74817fbeb42c87d0a61f20684d3309e3';

    this.validaCPF = validaCPF;
    this.validaCEP = validaCEP;

    function validaCPF(cpf, datanascimento) {
      var q = $q.defer();
      var packageNumber = cpf.length > 11 ? 4 : 1;
      //packages
      //1 CPF Básico 2 CPF Avançado 4 CNPJ Básico 7 CPF Personalizado 8 CPF Personalizado
      ///{token}/{package}/{type}/{value}
      HTTPService.get(
        'https://api.cpfcnpj.com.br/'
          .concat(apiToken)
          .concat('/')
          .concat(packageNumber)
          .concat('/')
          .concat('json')
          .concat('/')
          .concat(cpf)
          .concat('/')
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function validaCEP(cep) {
      var q = $q.defer();

      HTTPService.get('http://viacep.com.br/ws/'.concat(cep).concat('/json/'))
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }
  }
})();

(function() {
  'use strict';

  angular.module('foneClub').service('PagarmeService', PagarmeService);

  PagarmeService.inject = ['$q', 'HTTPService'];

  function PagarmeService($q, HTTPService) {
        
    // live
    var apiKey = 'ak_live_fP7ceLSpdBe8gCXGTywVRmC5VTkvN0'
    var encriptionKey = 'ek_live_U52ijlxsDgB8mk0rzcJde7HYHzqWYl';

    // //homol
    // var apiKey = "ak_test_rIMnFMFbwNJR1A5RuTmSULl9xxDdoM"
    // var encriptionKey ="ek_test_5rLvyIU3tqMGHKAj94kpCuqSWT37Ps"

    this.getCards = getCards;
    this.getCustomers = getCustomers;
    this.getCustomer = getCustomer;
    this.getCard = getCard;
    this.getStatusBoleto = getStatusBoleto;
    this.getStatusBoletoRecursivo = getStatusBoletoRecursivo;

    this.postBoleto = postBoleto;
    this.postBoletoDirect = postBoletoDirect;
    this.postPIX = postPIX;
    this.postTransactionCard = postTransactionCard;
    this.postTransactionExistentCard = postTransactionExistentCard; //refact pra uma só func
    this.postCaptureTransaction = postCaptureTransaction;
    this.generateCardHash = generateCardHash;
    this.notifyCustomerBoleto = notifyCustomerBoleto;
    this.getInstallmentPayments = getInstallmentPayments;

    this.getBoletoUrl = getBoletoUrl;

    function getBoletoUrl(id, chargesAndOrders, index) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(id)
      )
        .then(function(result) {

          result.index = index;
          result.chargesAndOrders = chargesAndOrders;
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getInstallmentPayments() {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions/calculate_installments_amount?api_key='
          .concat("ak_live_fP7ceLSpdBe8gCXGTywVRmC5VTkvN0")
          .concat('&amount=10000')
          .concat('&free_installments=1')
          .concat('&interest_rate=13')
          .concat('&max_installments=3')
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCards() {
      var q = $q.defer();

      HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey))
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomers() {
      var q = $q.defer();
      console.log('getCustomers');
      HTTPService.get(
        'https://api.pagar.me/1/customers/?count=10000&api_key='.concat(apiKey)
      )
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomer(documentNumber) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/customers/?api_key='
          .concat(apiKey)
          .concat('&document_number=')
          .concat(documentNumber)
      )
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCard(customerId) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/cards?api_key='
          .concat(apiKey)
          .concat('&customer_id=')
          .concat(customerId)
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBoleto(amount, instructions, customer) {
      var q = $q.defer();

      // debugger;
      var parameters = {
        api_key: apiKey,
        encryption_key: encriptionKey,
        amount: amount,
        payment_method: 'boleto',
        'data-customer-data': true,
        customer: customer,
        boleto_instructions: instructions,
        postback_url: 'https://api.foneclube.com.br/api/pagarme/receive-webhook'
      };

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBoletoDirect(amount, instructions, customer, expirationDate) {
      var q = $q.defer();

      // debugger;
      // var parameters = {
      //     'api_key':apiKey,
      //     // 'encryption_key':encriptionKey,
      //     'amount': amount,
      //     'payment_method':'boleto',
      //     'boleto_instructions': instructions
      // };

      var parameters = {
        api_key: apiKey,
        // 'encryption_key':encriptionKey,
        amount: amount,
        payment_method: 'boleto',
        'data-customer-data': true,
        customer: customer,
        boleto_instructions: instructions,
        boleto_expiration_date: expirationDate,
        postback_url: 'https://api.foneclube.com.br/api/pagarme/receive-webhook'
      };

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postPIX(amount, instructions, customer, expirationDate, loop) {
      var q = $q.defer();

      // For expirying at 12 AM
      var expiryDateMandatory = expirationDate + 'T21:00:00';

      var parameters = {
        api_key: apiKey,
        customer:customer,
        encryption_key:encriptionKey,
        amount: amount,
        payment_method: 'pix',
        pix_expiration_date: expiryDateMandatory,
        pix_additional_fields: [{value:'1',name:'Quantidade'}],
        postback_url: 'https://api.foneclube.com.br/api/pagarme/receive-webhook'
      };
      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          q.resolve(result);

          // HTTPService.post(
          //   'https://api.pagar.me/1/transactions/'.concat(result.token).concat('/capture'),
          //   parameters
          // )
          // .then(function(result) {
          //   q.resolve(result);
          // })
          // .catch(function(error) {
          //   q.reject(error);
          // });

        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function notifyCustomerBoleto(id, email) {
      var q = $q.defer();

      // var parameters = {
      //     'email': email
      // };

      // HTTPService.post('https://api.pagar.me/1/transactions/'.concat(id).concat('/collect_payment?api_key=').concat(apiKey), parameters)
      // .then(function(result){
      //     console.log(result);
      //     q.resolve(result);
      // })
      // .catch(function(error){
      //     q.reject(error);
      // });

      q.resolve(true);

      return q.promise;
    }

    function postTransactionCard(amount, cardHash, customer) {
      var q = $q.defer();

      var parameters = {
        api_key: apiKey,
        encryption_key: encriptionKey,
        amount: amount,
        card_hash: cardHash,
        'data-customer-data': true,
        customer: customer,
        postback_url: 'https://api.foneclube.com.br/api/pagarme/receive-webhook'
      };

      console.log('--- Transação com prametros:');
      console.log(parameters);

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postTransactionExistentCard(amount, cardId, customer, installments) {
      var q = $q.defer();

      var parameters = {  
          api_key: apiKey,
          encryption_key: encriptionKey,
          amount: amount,
          card_id: cardId,
          installments: installments,
          customer: customer,
          postback_url: 'https://api.foneclube.com.br/api/pagarme/receive-webhook'
        };

      console.log('--- Transação com prametros:');
      console.log(parameters);

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
            q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCaptureTransaction(transactionId, amount) {
      var q = $q.defer();

      var parameters = {
        api_key: apiKey,
        amount: amount
      };

      HTTPService.post(
        'https://api.pagar.me/1/transactions/'.concat(transactionId).concat('/capture'),
        parameters
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function generateCardHash(cardData) {
      var q = $q.defer();
      PagarMe.encryption_key = encriptionKey;
      var creditCard = new PagarMe.creditCard();
      creditCard.cardHolderName = cardData.cardHolderName;
      creditCard.cardExpirationMonth = cardData.cardExpirationMonth;
      creditCard.cardExpirationYear = cardData.cardExpirationYear;
      creditCard.cardNumber = cardData.cardNumber;
      creditCard.cardCVV = cardData.cardCVV;

      var fieldErrors = creditCard.fieldErrors();
      var hasErrors = false;

      for (var field in fieldErrors) {
        hasErrors = true;
        break;
      }

      if (hasErrors) {
        q.reject(fieldErrors);
      } else {
        creditCard.generateHash(function(cardHash) {
          q.resolve(cardHash);
        });
      }

      return q.promise;
    }

    function getStatusBoleto(boletoId) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(boletoId)
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusBoletoRecursivo(
      boletoId,
      elemento,
      viewModel,
      indexCustomerModel,
      indexChargeModel
    ) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(boletoId)
      )
        .then(function(result) {
          // if (elemento.Name == 'Antonia Maria da Silva Barboza')
          //     // debugger

          try {
            result[0].elemento = elemento;
            result[0].vm = viewModel;
            result[0].indexCustomer = indexCustomerModel;
            result[0].indexCharge = indexChargeModel;
          } catch (erro) {
            //// debugger
          }

          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }
  }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .filter('filterTelefone', filterTelefone);
    
            filterTelefone.inject = [];

        function filterTelefone() {
            return function(arr, input) {
                if (input == null || input == undefined || arr == null || arr == undefined || arr.length == 0 ) {
                    return arr;
                }
                var inputClean = input.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~a-zA-Z]/g, '');
                if (inputClean == null || input == undefined) {
                    return arr;
                }
                return arr.filter(function(param) {
                    return param.Phones.find(function(phone) {
                        return phone.DDD.concat(phone.Number).indexOf(inputClean) !== -1;
                        // return phone.Number.toString().substring(0, inputClean.length) == inputClean;
                    }) 
                })
            }
        }
    })();
(function () {

    'use strict';

    angular
        .module('foneClub')
        .factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;

    }

})();

(function() {

  'use strict';

  angular.module('foneClub')
    .service('FileListUtil', FileListUtil);

  function FileListUtil() {

    /* fields */
    this.data = undefined;

    this.set = set
    this.get = get

    function set(fileList){
        this.data = fileList;
    }

    function get(){
        return this.data;
    }

  }

})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FireBaseManagerUtil', FireBaseManagerUtil);

    FireBaseManagerUtil.$inject = ['$firebaseArray'];
    function FireBaseManagerUtil($firebaseArray) {

        var ref = firebase.database().ref();
        var log = $firebaseArray(ref.child("log"));
        var users = $firebaseArray(ref.child("users"));

        this.initialize = initialize;
        this.addLog = addLog;
        this.addUser = addUser;
        this.getUsers = getUsers;

        function initialize(){

        }

        function addLog(value){
            log.$add({
             text: value
            });
        }

        // FireBaseManagerUtil.addUser({
        //     user:'Gustavo',
        //     password:'123gustavo'
        // });

        function addUser(user){
            users.$add(user);
        }

        function getUsers(){
            console.log(users);
            // var obj = $firebaseObject(ref);
            // obj.$loaded()
            // .then(function(data) {
            //     console.log(data === obj); // true
            // })
            // .catch(function(error) {
            //     console.error("Error:", error);
            // });

            return users;
        }

    }
})();
(function () {

  'use strict';

  angular.module('foneClub')
    .service('HTTPService', HTTPService);

  HTTPService.$inject = ['$http'];

  function HTTPService($http) {

    var vm = this;
    vm.get = get;
    vm.post = post;
    vm.postFile = postFile;
    vm.getStatus = getStatus;

    function get(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }

    function getStatus(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.status;
      }

      function error(message) {
        throw message;
      }
    }

    function post(path, params) {

      return $http.post(path, params)
        .then(complete)
        .catch(error);

      function complete(data, status, headers, config) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }
    function postFile(path, params) {
      // debugger;
      return $http.post(path, params, {
        headers: { 'Content-Type': undefined }
      })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data;
      }

      function error(message) {
        throw message;
      }
    }
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('LocationService', LocationService);

    LocationService.inject = ['$state', 'UtilsService'];
    function LocationService($state, UtilsService) {

        this.change = change;

        function change(value, dataParameters) {
            UtilsService.setRouteData(value)
            $state.go(value, {
                data: dataParameters
            });
        }
    }
})();
(function() {

  'use strict';

  angular.module('foneClub')
    .service('MainUtils', MainUtils);

  MainUtils.inject = ['$q', '$cordovaFile', '$ionicLoading', '$ionicPopup'];
  function MainUtils($q, $cordovaFile, $ionicLoading, $ionicPopup) {

    this.guid = guid;
    this.pathToDataURI = pathToDataURI;
    this.dataURIToBlob = dataURIToBlob;
    this.uploadFile = uploadFile;
    this.operatorOptions = operatorOptions;

    this.agent = undefined;
    this.setAgent = setAgent
    this.getAgent = getAgent

    function setAgent(value){
        this.agent = value;
    }

    function getAgent(){
        return this.agent;
    }

      function guid() {

        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
          s4() + '-' + s4() + s4() + s4();
      }

      function dataURIToBlob(dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);

            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ia], {type:mimeString});
        }

        function pathToDataURI(url, callback) {
            var xhr = new XMLHttpRequest();
            var headers = {
              'Access-Control-Allow-Origin' : '*',
              'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS, PUT',
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            };
            xhr.onload = function() {
                var reader = new FileReader();
                reader.onloadend = function() {
                callback(reader.result);
                }
                reader.readAsDataURL(xhr.response);
            };
            xhr.open('GET', url);
            xhr.headers = headers;
            xhr.responseType = 'blob';
            xhr.send();
        }

        function uploadFile(file){

            var q = $q.defer();

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                //console.debug('Upload complete. Data:', data);
                q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                q.reject(err);
            });

            return q.promise;
        }

        function operatorOptions(){

            return [
                {'nome':'Claro', 'id':1},
                {'nome':'Vivo', 'id':2},
                {'nome':'Oi', 'id':3},
                {'nome':'Tim', 'id':4},
                {'nome':'Vivo', 'id':5},
                {'nome':'Outra', 'id':6},
            ];
        }

  }

})();
(function() {

    'use strict';

    angular.module('foneClub').service('SessionStorageUtilsService', SessionStorageUtilsService);

    SessionStorageUtilsService.inject = ['$q'];

    function SessionStorageUtilsService($q) {
        return {
            getSession : getSession,
            setSession : setSession,
            setGridObject : setGridObject
        }

        
        function getSession(key){
            return sessionStorage.getItem(key);
        }

        function setSession(key, data){
            sessionStorage.setItem(key, JSON.stringify(data));
        }

        function setGridObject(gridName, api, filterText){
            var data = {
                ColumnState : JSON.stringify(api.columnApi.getColumnState()),
    		    FilterModel : JSON.stringify(api.api.getFilterModel()),
    		    SortModel : JSON.stringify(api.api.getSortModel()),
                FilterText : filterText
            };
            setSession(gridName, data);
        }
    }
})();
(function() {

    'use strict';

    angular.module('foneClub').service('UtilsService', UtilsService);

    UtilsService.inject = ['$q'];

    function UtilsService($q) {
        return {
            clearDocumentNumber: _clearDocumentNumber,
            clearDocumentNumber: _clearDocumentNumber,
            getContactPhoneFromPhones: _getContactPhoneFromPhones,
            getRouteData: getRouteData,
            getPreviousRouteData: getPreviousRouteData,
            setRouteData:setRouteData,
            getDocumentNumerWithMask: _getDocumentNumerWithMask,
            getPhoneNumberFromStringToJson: _getPhoneNumberFromStringToJson,
            clearPhoneNumber: _clearPhoneNumber,
            sendImageToUpload: _sendImageToUpload,
            diffBtDays: diffBtDays,
            formatDate: formatDate,
            formatDateYYYYmmDD:formatDateYYYYmmDD,
            addDays: addDays, 
            removeAccents: removeAccents,
            checkContains: checkContains,
            mobileCheck: mobileCheck,
            clipBoardCopy: clipBoardCopy,
            getNext12Months: _getNext12Months
        }

        
        function getRouteData(){
            return this.data
        }

        function getPreviousRouteData(){
            return this.previousRoute
        }

        function setRouteData(param){
            this.previousRoute = this.data;
            this.data = param
        }

        function _getNext12Months(ss){
            var months=[];
            const start = moment(moment(moment(ss).format('MM-DD-YYYY')).subtract(12, 'month').format('MM-DD-YYYY'), 'MM-DD-YYYY')
            const end = moment(ss).startOf('month')

            while (end.isAfter(start, 'month')) {
                start.add(1, 'month')
                months.push(start.format('MMM-YYYY'));
            }

            const start1 = moment(ss).startOf('month')
            const end1 = moment(moment(moment(ss).format('MM-DD-YYYY')).add(12, 'month').format('MM-DD-YYYY'), 'MM-DD-YYYY')

            while (end1.isAfter(start1, 'month')) {
                start1.add(1, 'month')
                months.push(start1.format('MMM-YYYY'));
            }
            return months;
        }
        
        function _clearDocumentNumber(documentNumber){
            return documentNumber.replace(/[-.]/g, '').replace('/','');
        }
        
        function _getContactPhoneFromPhones(phones) {
            var contacts = phones.filter(function (element) {
                return !element.IsFoneclube;
            });
            return contacts;
        }
        
        function _getDocumentNumerWithMask(documentNumber) {
            return documentNumber.substr(0, 3) + '.' + documentNumber.substr(3, 3) + '.' + documentNumber.substr(6, 3) + '-' + documentNumber.substr(9)
        }

        function _getPhoneNumberFromStringToJson(param) {
            var number = {
                DDD: _clearPhoneNumber(param).substring(0, 2),
                Number: _clearPhoneNumber(param).substring(2)
            }
            return number;
        }

        function _clearPhoneNumber(number) {
            return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
        }

        function _sendImageToUpload(imageSelf, imageFrente, imageVerso) {
            var q = $q.defer();
            var toUpload = [];
            if (imageSelf) toUpload.push({img: imageSelf, tipo: 1});
            if (imageFrente) toUpload.push({img: imageFrente, tipo: 2});
            if (imageVerso) toUpload.push({img: imageVerso, tipo: 3});
            if (toUpload.length == 0) {
                q.resolve();
            }
            var promises = toUpload.map(function(image) {
                return uploadImage(image);
            });
            $q.all(promises).then(function (result){
                console.log(result);
                q.resolve(result);
            }, function (result){
                console.log(result);
                q.reject(result);
            });
            return q.promise;
        }

        function uploadImage(imagem) {
            var q = $q.defer();
            var holdId = imagem.tipo;
            function isInvalidName(str){
                return /\s/.test(str);
            }
            if(isInvalidName(imagem.img.name)){
                q.reject("Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo");
                return q.promise;
            }
            var imageUploader = new ImageUploader();
            imageUploader.push(imagem.img)
            .then((data) => {
                data.tipo = holdId;
                q.resolve(data);
            })
            .catch((err) => {
                q.reject('Não foi possível enviar imagens');
            });
            return q.promise;
        }

        function diffBtDays(date1, date2) {
            const diffTime = Math.abs(date2 - date1);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
          }

        function formatDate(date) {
            var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

          if (month.length < 2) 
              month = '0' + month;
          if (day.length < 2) 
              day = '0' + day;

          return [year, month, day].join('-');
      }

      function formatDateYYYYmmDD(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }

    function addDays(days) {
        var dat = new Date();
        dat.setDate(dat.getDate() + days);
        return dat.toISOString();
    }

    function removeAccents(strAccents) {
		var strAccents = strAccents.split('');
		var strAccentsOut = new Array();
		var strAccentsLen = strAccents.length;
		var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
		var accentsOut = "AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz";
		for (var y = 0; y < strAccentsLen; y++) {
			if (accents.indexOf(strAccents[y]) != -1) {
				strAccentsOut[y] = accentsOut.substr(accents.indexOf(strAccents[y]), 1);
			} else
				strAccentsOut[y] = strAccents[y];
		}
		strAccentsOut = strAccentsOut.join('');
		return strAccentsOut;
	}

	function checkContains(strOrigin, strSearch) {
		if (strSearch.indexOf(" ") > -1) {
			var val = strSearch.split(" ");
			const res = true;
			for (var i in val) {
				if (strOrigin.indexOf(val[i]) == -1) {
					return false;
				}
			}
			return res;
		} else {
			return strOrigin.indexOf(strSearch) > -1;
		}
	}

    function mobileCheck() {
        let check = false;
        (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
        return check;
    }

    function clipBoardCopy(text_to_share) {
              // create temp element
        var copyElement = document.createElement("pre");
        copyElement.appendChild(document.createTextNode(text_to_share));
        copyElement.id = 'tempCopyToClipboard';
        angular.element(document.body.append(copyElement))
        // select the text
        var range = document.createRange();
        range.selectNode(copyElement);
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range)
        // copy & cleanup
        document.execCommand('copy');
        window.getSelection().removeAllRanges();
        copyElement.remove();
    }

    }
})();
(function() {
  'use strict';

  angular.module('foneClub').service('ViewModelUtilsService', ViewModelUtilsService);

  ViewModelUtilsService.inject = ['$ionicModal', 'DialogFactory'];
  function ViewModelUtilsService($ionicModal, DialogFactory) {
    //todo colocar cria~ção na hora do show garantindo sempre limpeza ao abrir
    this.modalCustomerData = {};
    this.showModalCustomer = showModalCustomer;
    this.showModalComment = showModalComment;
    this.showModalFlag = showModalFlag;

    this.modalNewCardPaymentData = {};
    this.showModalNewCardPayment = showModalNewCardPayment;
    this.showInternationDeposits = showInternationDeposits;

    this.modalExistentCardPaymentData = {};
    this.modalExistentCardData = {};
    this.showModalExistentCardPayment = showModalExistentCardPayment;
    this.showModalPaymentHistoryDetail = showModalPaymentHistoryDetail;

    this.modalData = {};
    this.modalReportData = {};
    this.showModal = showModal;

    this.modalBoletoData = {};
    this.modalRepeatBoletoData = {};

    this.modalCardData = {};
    this.modalRepeatCardData = {};
    this.showModalBoleto = showModalBoleto;
    this.showModalBoletoPayment = showModalBoletoPayment;
    this.showModalPIX = showModalPIX;
    this.showModalReport = showModalReport;
    this.showModalDebito = showModalDebito;

    this.showModalRepeatBoleto = showModalRepeatBoleto;
    this.showModalRepeatCard = showModalRepeatCard;
    this.showModalPhoneTopUpTemplate = showModalPhoneTopUpTemplate;
    this.showModalPhoneTopUpHistoryTemplate = showModalPhoneTopUpHistoryTemplate;
    this.showModalEmailDetail = showModalEmailDetail;
    this.showModalWhatsapp = showModalWhatsapp;
    this.showModalWhatsappTemplate = showModalWhatsappTemplate;
    this.showModalWATemplateEdit = showModalWATemplateEdit;
    this.showDrCelularImportTemplate = showDrCelularImportTemplate;
    this.showContelTopupHistorTemplate = showContelTopupHistorTemplate;
    this.showModalTemplate = showModalTemplate;
    this.showPlanSelectionModal = showPlanSelectionModal;
    this.changeAllPhoneLinesNewView = changeAllPhoneLinesNewView;
    this.showScheudleEditModal = showScheudleEditModal;
    this.showModalAddNewPhoneLinePopup = showModalAddNewPhoneLinePopup;
    this.showInstaChargeConfirPopup = showInstaChargeConfirPopup;
    this.showInstaAddNewLinePopup = showInstaAddNewLinePopup;
    this.showIntlAddUserModalTemplate = showIntlAddUserModalTemplate;
    this.showFacilDeposits = showFacilDeposits;

    function showModal(data) {
      this.modalData = data;
      var service = this;

      DialogFactory.showTemplate('modules/lista-customer/checkout-customer-modal.html');
    }

    function showModalCustomer(data, index) {
      this.modalCustomerData = data;
      this.modalCustomerData.index = index;
      var service = this;

      DialogFactory.showTemplate('modules/customers/customers-modal/customer-modal.html');
    }

    function showModalNewCardPayment(data) {
      this.modalNewCardPaymentData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/new-card/new-card-payment.html');
    }

    function showInternationDeposits(data) {
      this.customerData = data;
      DialogFactory.showTemplateMedium('modules/customers/intl-deposits/intl-depositModal.html');
    }

    function showModalComment(data) {
      this.modalCommentData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/comment/comment.html');
    }

    function showModalFlag(data){
      this.modalFlagData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/flags-modal/flags.html');
    }

    function showModalExistentCardPayment(data, card) {
      this.modalExistentCardPaymentData = data;
      this.modalExistentCardData = card;
      var service = this;

      DialogFactory.showTemplate('modules/customers/existent-card/existent-card.html');
    }

    function showModalBoleto(data) {
      this.modalBoletoData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/boleto/boleto.html');
    }

    function showModalPIX(data) {
      this.modalBoletoData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/pix/pix.html');
    }

    function showModalReport(data) {
      this.modalData = data;

      DialogFactory.showTemplateSmall('modules/customers/report-modal/report-modal.html');
    }

    function showModalDebito(data) {
      this.modalBoletoData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/debito/debito.html');
    }

    function showModalBoletoPayment(data) {
      this.modalBoletoData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/boleto/boletopayment.html');
    }
    function showModalRepeatBoleto(payment, data) {
      // debugger;
      this.modalBoletoData = data;
      this.modalRepeatBoletoData = payment;
      var service = this;
      DialogFactory.showTemplate('modules/customers/repeat-boleto/repeat-boleto.html');
    }
    function showModalRepeatCard(payment, data) {
      // debugger;
      this.modalCardData = data;
      this.modalRepeatCardData = payment;
      var service = this;
      DialogFactory.showTemplate('modules/customers/repeat-card/repeat-card.html');
    }

    function showModalPaymentHistoryDetail(history, customer) {
      this.modalPaymentDetailHistory = history;
      this.modalPaymentDetailCustomer = customer;
      var service = this;
      DialogFactory.showTemplate('modules/customers/payment-detail/paymentdetail.html');
    }

    function showModalEmailDetail(emailstatus, phone, email, operator, customer) {
      this.modalEmailDetailemailstatus = emailstatus;
      this.modalEmailDetailphone = phone;
      this.modalEmailDetailemail = email;
      this.modalEmailDetailoperator = operator;
      this.modalEmailCustomer = customer;
      var service = this;
      DialogFactory.showTemplate('modules/customers/edicao/EmailTemplate.html');
    }

    function showModalWhatsapp(data) {
      this.modalData = data;
      var service = this;

      DialogFactory.showTemplate('modules/whatsapp/whatsapp.html');
    }

    function showModalWhatsappTemplate(data) {
      this.modalData = data;

      DialogFactory.showTemplate('modules/wa-template-edit/wa-template-editModal.html');
    }

    function showModalPhoneTopUpTemplate(data) {
      this.modalData = data;

      DialogFactory.showTemplate('modules/all-phoneslines-new/phone-topup.html');
    }

    function showModalAddNewPhoneLinePopup() {
      DialogFactory.showTemplate('modules/all-phoneslines-new/add-new-phone.html');
    }

    function showModalPhoneTopUpHistoryTemplate(data) {
      this.modalData = data;

      DialogFactory.showTemplate('modules/all-phoneslines-new/phone-topup-history.html');
    }

    function showInstaChargeConfirPopup(data) {
      this.modalData = data;

      DialogFactory.showTemplateMedium('modules/customers/insta-charge/insta-charge-confirmation.html');
    }

    function showInstaAddNewLinePopup(data) {
      this.modalData = data;

      DialogFactory.showTemplateMedium('modules/customers/insta-charge/addnewline.html');
    }

    function showModalTemplate(data) {
      this.modalData = data;

      DialogFactory.showTemplate('modules/template-edit/template-editModal.html');
    }

    function showDrCelularImportTemplate() {
      DialogFactory.showTemplateSmall('modules/dr-celular/dr-celular-modal.html');
    }

    function showContelTopupHistorTemplate() {
      DialogFactory.showTemplateSmall('modules/contel/import-contel-history-modal.html');
    }

    function showPlanSelectionModal(data){
      this.modalData = data;

      DialogFactory.showTemplate('modules/customers/insta-charge/select-planoModal.html');
    }

    function showScheudleEditModal(data){
      this.modalData = data;

      DialogFactory.showTemplateMedium('modules/customers/customers-modal/customer-schedule-editModal.html');
    }

    function showModalWATemplateEdit(data) {
      this.modalReportData = data;

      DialogFactory.showTemplate('modules/customers/report-modal/selectreport-modal.html');
    }

    function changeAllPhoneLinesNewView(data){
      this.modalReportData = data;

      DialogFactory.showTemplate('modules/all-phoneslines-new/all-phoneslines-new.html');
    }

     function showIntlAddUserModalTemplate(data) {
      this.modalData = data;

      DialogFactory.showTemplateMedium('modules/facil/faciladdnew.html');
    }

     function showFacilDeposits(data) {
      this.modalData = data;

      DialogFactory.showTemplateMedium('modules/facil/facildeposithistory.html');
    }


    this.showConfirmDialog = function(title, content) {
      return DialogFactory.dialogConfirm({
        titulo: title,
        mensagem: content
      });
    };
  }
})();

(function () {
    
        'use strict';
    
        angular
            .module('foneClub')
            .factory('DialogFactory', DialogFactory);
    
        DialogFactory.$inject = ['ngDialog', '$q'];
    
        function DialogFactory(ngDialog, $q) {

            function _dialogConfirm(param) {                
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Confirmação';
                }
                if(param.btn1 == undefined || !param.btn1) {
                    param.btn1 = 'Não';
                }
                if(param.btn2 == undefined || !param.btn2) {
                    param.btn2 = 'Ok';
                }

                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnCancelar" ng-click="closeThisDialog(0)"> '+ param.btn1 + ' </button>' +
                    '<button type="button" id="openConfirm-btn-confirm" class="btnConfirmar" ng-enter-all="confirm(1)" ng-click="confirm(1)" style="margin-left:20px"> ' + param.btn2 + ' </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: true
                }).then(function(param) {
                    if(param == 0 || param == 1)
                        defer.resolve(param);
                    else
                        return false;
                }, function(param) {
                    if(param == 0 || param == 1)
                        defer.resolve(param);
                    else
                        return false;
                })
                return defer.promise;
            }

            function _dialogConfirmCustom(param) {                
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Confirmação';
                }
                if(param.btn1 == undefined || !param.btn1) {
                    param.btn1 = 'Não';
                }
                if(param.btn2 == undefined || !param.btn2) {
                    param.btn2 = 'Ok';
                }
                if(param.additionalAction == undefined)
                    param.additionalAction = "";

                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnCancelar" ng-click="closeThisDialog(0)"> '+ param.btn1 + ' </button>' +
                    '<button type="button" id="openConfirm-btn-confirm" class="btnConfirmar" ng-enter-all="confirm(1)" ng-click="confirm(1)" style="margin-left:20px"> ' + param.btn2 + ' </button></div> <div style="text-align:center">'+ param.additionalAction +'</div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: true
                }).then(function(param) {
                    if(param == 0 || param == 1)
                        defer.resolve(param);
                    else
                        return false;
                }, function(param) {
                    if(param == 0 || param == 1)
                        defer.resolve(param);
                    else
                        return false;
                })
                return defer.promise;
            }

            function _showMessageDialog(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }

            function _showAlertDialog(param) {
                // debugger;
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.message +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }
            
            function _showLoader(mensagem) {                               
                return ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="show-loader">'+                    
                    '<span>'+ mensagem +'</span></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })                
            }

            function _showMessageConfirm(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnOk" ng-enter-all="confirm(1)" ng-click="confirm(1)"> Ok </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showTemplate(template) {
                return ngDialog.open({                    
                    template: template,   
                    className: 'show-template',                        
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: true                    
                })
            }

            function _showTemplateSmall(template) {
                return ngDialog.open({                    
                    template: template,   
                    className: 'show-template',
                    appendClassName: 'custom-width-500',
                    width:"500px",  
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: true                    
                })
            }

            function _showTemplateMedium(template) {
                return ngDialog.open({                    
                    template: template,   
                    className: 'show-template',
                    appendClassName: 'custom-width-1200',
                    width:"1200px",  
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: true                    
                })
            }

            return {
                dialogConfirm: _dialogConfirm,
                dialogConfirmCustom: _dialogConfirmCustom,
                showMessageDialog: _showMessageDialog,
                showMessageConfirm: _showMessageConfirm,
                showLoader: _showLoader,
                showTemplate: _showTemplate,
                showAlertDialog:_showAlertDialog,
                showTemplateSmall: _showTemplateSmall,
                showTemplateMedium: _showTemplateMedium
            }
    
        }
    
    })();
    

angular
.module('foneClub')
.directive('moneyInput', function($filter, $browser, $timeout) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {

                console.log($element.val());
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('currency')(value/100, "R$", 2));

            };


            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '')
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val(ngModelCtrl.$viewValue);
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });
            $timeout(function(){
                $element.val($filter('currency')($element.val().replace(/[^0-9]/g, '')/100, "R$", 2));    
                $browser.defer(listener)
            },500);
            
        }

    };
});


angular
.module('foneClub')
.directive('moneyInputPlain', function($filter, $browser, $timeout) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {

                console.log($element.val());
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('currency')(value/100, "", 2));

            };


            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '')
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val(ngModelCtrl.$viewValue);
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });
            $timeout(function(){
                $element.val($filter('currency')($element.val().replace(/[^0-9]/g, '')/100, "", 2));    
                $browser.defer(listener)
            },500);
            
        }

    };
});
angular.module('foneClub').directive('intlTel', function(){
  return{
    replace:true,
    restrict: 'E',
    require: 'ngModel',
    template: '<input type="text" placeholder="e.g. +55 22123 4567">',
    link: function(scope,element,attrs,ngModel){
      var read = function() {
        var inputValue = window.intlTelInput(element[0]);
        var cCode = inputValue.getSelectedCountryData().dialCode;
        var data = {
            CountryCode : cCode ,
            Phone : element.val().replace(cCode,'')
        }
        ngModel.$setViewValue(data);
      }     
      window.intlTelInput(element[0], {
        initialCountry: "BR",
      }); 

      element.on('blur keyup change', function() {
        if (scope.$root.$$phase != '$apply' && scope.$root.$$phase != '$digest') {
            scope.$apply(read);
        }
      });
      read();
    }
  }
});
angular.module('foneClub').directive('ngEnter', function () {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
});

angular.module('foneClub').directive('ngEnterAll', function () {    
    return function (scope, element, attrs) {
        angular.element(document).find('body').bind("keydown", function (event) {            
            if(event.which === 13) {
            console.log(element[0].type);
            if(event!=undefined && event.target !=null && event.target.type != "textarea")
            {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnterAll);
                });
 
                event.preventDefault();
            }
            }
        });

        
    };
});

angular.module('foneClub').directive('nextOnEnter', function () {
    return {
        restrict: 'A',
        link: function ($scope, selem, attrs) {
            selem.bind('keydown', function (e) {
                var code = e.keyCode || e.which;
                if (code === 13) {
                    e.preventDefault();
                    var pageElems = document.querySelectorAll('input, select, textarea'),
                        elem = e.srcElement || e.target,
                        focusNext = false,
                        len = pageElems.length;
                    for (var i = 0; i < len; i++) {
                        var pe = pageElems[i];
                        if (focusNext) {
                            if (pe.style.display !== 'none') {
                                document.getElementById(pe.id).focus();
                                break;
                            }
                        } else if (pe === elem) {
                            focusNext = true;
                        }
                    }
                }
            });
        }
    }
});
(function() {
'use strict';

    angular
        .module('foneClub')
        .directive('file', ['FileListUtil', function(FileListUtil) {
            return {
                restrict: 'AE',
                scope: {
                file: '@'
                },
                link: function(scope, el, attrs){

                    el.on('change', function(event){
                        var files = event.target.files;
                        var file = files[0];
                        if(file && typeof(file) !== undefined && file.size > 0){
                            scope.file = file;
                            scope.$parent.file = file;
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        else {
                            scope.file = {};
                            scope.$parent.file = {};
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        scope.$apply(); 
                    });


                }
            };
        }])


})();


//angular.module('foneClub', ['kendo.directives']);
angular.module('foneClub').controller('statusChangingController2', statusChangingController2);



function statusChangingController2($scope, $interval, FoneclubeService, PagarmeService) {




  var vm = this;
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.diffDays = diffDays;
  vm.statusType = {
    COBRADO: 1,
    NAO_COBRADO: 2,
    PAGO: 3,
    REFUNDED: 4,
    VENCIDO: 5
  };
  vm.PagamentosType = {
    BOLETO: 1,
    CARTAO: 2
  };
  vm.AtivoType = {
    ATIVA: 2,
    CANCELADA: 1
  }
  vm.tiposStatus = [
    { id: "", title: "" },
    { id: 1, title: 'COBRADO' },
    { id: 2, title: 'NÃO COBRADO' },
    { id: 3, title: 'PAGO' },
    { id: 4, title: 'REFUNDED' },
    { id: 5, title: 'VENCIDO' }
  ];
  vm.tiposPagamento = [
    { id: "", title: "" },
    { id: 1, title: 'BOLETO' },
    { id: 2, title: 'CARTÃO' }
  ];
  vm.tipoAtiva = [
    { id: "", title: "" },
    { id: 1, title: 'CANCELADA' },
    { id: 2, title: 'ATIVA' }
  ]
  vm.tipoAcao = [
    { id: "", title: "" },
    { id: 1, title: 'A' },
    { id: 2, title: 'C' }
  ]

  function convertToViewModel(sourceData) {
    var customerDataList = [];

    for (var i = 0; i < sourceData.length; i++) {
      var customer = sourceData[i];




      var RCobrado = customer.ammoutIntFormat;
      var customerSelectedCharge = '';
      var Tipo = '';
      var TipoLink = '';
      var Acao = '';
      var AcaoBool = false;
      var Vencimento = customer.boletoExpires;
      var Ultimopag = customer.LastPaidDate;
      var Dias2 = diffDays(customer.LastPaidDate);
      var RPago;
      var CustomerName = customer.Name;
      var Status2 = '';
      var customerChargeId = '';
      var UltimaCob = customer.chargingDate;
      var Dias = 0;
      var Status = customer.descricaoStatus;

      if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
      if (customer.descricaoStatus == '3') { Status = 'PAGO' };
      if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
      if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

      if (customer.ChargingValidity != undefined) {

        var lastChargingRec = (customer.ChargingValidity.length - 1);
        var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

        customerSelectedCharge = customerChargingInfo;
        customerChargeId = customerChargingInfo.Id;
        if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
          UltimaCob = customerChargingInfo.CreateDate;

        }



        Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'

        if (customerChargingInfo.PaymentType == 1) {
          Tipo = 'CARTÃO';
        }
        else {
          Tipo = 'BOLETO'
          TipoLink = customerChargingInfo.BoletoUrl;
        }
        if (customerChargingInfo.Canceled) {
          Acao = 'A';
          AcaoBool = true;
        }
        if (!customerChargingInfo.Canceled) {
          Acao = 'C';
        }
      }

      if (UltimaCob != undefined && UltimaCob != null) { Dias = diffDays(UltimaCob); }

      if (customer.Name == 'Rodrigo Cardozo Pinto') {
        //debugger;

      }

      customerDataList.push({
        'UltimaCob': UltimaCob,
        'Dias': Dias,
        'RCobrado': RCobrado,
        'Tipo': Tipo,
        'TipoLink': TipoLink,
        'Status': Status,
        'StatusId': customer.descricaoStatus,
        'Status2': Status2,
        'Acao': Acao,
        'AcaoBool': AcaoBool,
        'customerSelectedCharge': customerSelectedCharge,
        'customerChargeId': customerChargeId,
        'Vencimento': Vencimento,
        'Ultimopag': Ultimopag,
        'Dias2': Dias2,
        'RPago': RPago,
        'CustomerName': CustomerName,
      });
    }
    return customerDataList;
  }

  $scope.onPageLoad = function () {
    $scope.onClickSearchCustomerData();
  }

  $scope.onClickSearchCustomerData = function () {
    vm.loading = true;
    vm.totalReceivedReady = false;
    hasUpdate = false;
    var ativos = vm.somenteAtivos ? 1 : 0;

    FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {

      vm.customers = result;
      for (var i in vm.customers) {

        vm.customers[i].allChargingsCanceled = false;

        for (var o in vm.customers[i].ChargingValidity) {
          vm.customers[i].ChargingValidity[o].display = true;
        }
      }
      handleData(vm.customers);
      loadPaymentHistory();
      var gridData = vm.customers;
      initDataProperties(gridData);
    })
  }


  $scope.exportToExcel = function () {
    debugger
    $('.k-grid-excel').trigger("click")
  }

  function initDataProperties(customerDatasource) {
    var customerData = convertToViewModel(customerDatasource);
    var totalRecords = customerData.length + 10;
    var pageHeight = $(window).height() - 110;

    $scope.customerDataSource = new kendo.data.DataSource({
      data: customerData,
      pageSize: totalRecords,
      schema: {
        model: {
          fields: {
            Dias: { type: "number" },
            AcaoBool: { type: "boolean" },
          }
        }
      },
    });
    $scope.customerGridOptions = {
      dataSource: $scope.customerDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "Customer Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false

      },
      reorderable: true,
      resizable: true,

      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: {
            contains: "Contains",
            startswith: "Starts with",
            eq: "Is equal to",
            neq: "Is not equal to"
          },
          number: {
            eq: "Equal to",
            neq: "Not equal to",
            gte: "Greater Than",
            lte: "Less Than"
          }
        }
      },
      columns: [
        {
          field: "CustomerName", title: "Name", width: "220px", headerTemplate: "<div class='break-word'>Name<div>"
          , filterable: { cell: { operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "UltimaCob", title: "Última Cob.", width: "130px",
          template: "#if( UltimaCob != '1999/12/31') {# <div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd.MMM')#</div> #}else{# <div>-</div> #}#",
          headerTemplate: "<div class='break-word'>Última Cob.<div>",
          filterable: { cell: { showOperators: false,operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias", title: "Dias", width: "150px"
          , headerTemplate: "<div class='break-word'>Dias<div>",
          filterable: { cell: { operator: "gte", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }

        },
        {
          field: "Status", title: "Status", width: "140px"
          , headerTemplate: "<div class='break-word'>Última Cob. <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({                   
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'COBRADO' }, { text: 'NÃO COBRADO' }, { text: 'PAGO' }, { text: 'REFUNDED' }, { text: 'VENCIDO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },
        {
          field: "RCobrado", title: "R$ Cobrado", width: "110px"
          , headerTemplate: "<div class='break-word'>R$ <br>Cobrado<div>"
          , filterable: { cell: { showOperators: false,operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Tipo", title: "Tipo", width: "110px"
          , headerTemplate: "<div class='break-word'>Tipo<div>"
          , template: " #if( Tipo != 'BOLETO') {#   <label>#:Tipo#</label>  #} else{#  <a href='#:TipoLink#' target='_blank'>#:Tipo#</a> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'BOLETO' }, { text: 'CARTÃO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },


        {
          field: "Status2", title: "Status", width: "130px"
          , headerTemplate: "<div class='break-word'>Ação <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'ATIVA' }, { text: 'CANCELADA' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

        {
          field: "Acao", title: "Ação", width: "80px", headerTemplate: "<div class='break-word'>Ação <div>"
          , template: " #if( Acao == 'C') {#   <button class= 'btnb btn-danger action-buttons' ng-click='vm.onDesativarBoleto(#:customerChargeId#)'>				C</button>  #} else{#  <button class='btnb btn-info action-buttons' ng-click='vm.onAtivarBoleto(#:customerChargeId#)'>A</button> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'A' }, { text: 'C' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

         

        {
          field: "Vencimento", title: "Vencimento", width: "110px", headerTemplate: "<div class='break-word'>Vencimento<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Ultimopag", title: "Última pag.", width: "110px", headerTemplate: "<div class='break-word'>Última pag.<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias2", title: "Dias", width: "110px", headerTemplate: "<div class='break-word'>Dias<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "RPago", title: "R$ Pago", width: "110px", headerTemplate: "<div class='break-word'>R$ Pago<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

      ]
    }
    vm.loading = false;
  }


  function handleData(customers) {
    vm.callbackCount = 0;
    vm.totalBoletoCharges = 0;
    vm.totalReceived = 0;
    vm.totalCharged = 0;
    vm.totalCustomers = customers.length;
    vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
    vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

    try {
      vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
    }
    catch (erro) {
      //sem clientes
    }

    for (var index in customers) {

      var customer = customers[index];
      if (customer.Name == '1 Antonia Maria da Silva Barboza') {

      }
      try {
        customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
      }
      catch (erro) { }

      if (customer.Charged) {
        customer.statusType = vm.statusType.CARREGANDO;
        customer.registerPayd = false;
        for (var i in customer.ChargingValidity) {
          var charge = customer.ChargingValidity[i];
          try {
            customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
          }
          catch (erro) { }

          if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
            customer.ChargingValidity[i].StatusDescription = 'PAGO';
            customer.descricaoStatus = vm.statusType.PAGO;
            customer.descricaoTipo = vm.PagamentosType.CARTAO;
            customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
            customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
          }

          if (charge.PaymentType == 2 && charge.BoletoId != 0) {
            customer.descricaoTipo = vm.PagamentosType.BOLETO;
            PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {

              //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
              result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



              if (result[0].status == "waiting_payment") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                if (!result[0].elemento.registerPayd) {
                  result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                }

                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                } else {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                }
              }
              else if (result[0].status == "paid") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                try {

                }
                catch (erro) { }

                result[0].elemento.registerPayd = true;
                result[0].elemento.status = charge.StatusDescription;
                totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
              }
              else {
                // ;
              }
              charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

              result[0].vm.callbackCount++;

              if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                vm.totalReceivedReady = true;
              }
            })
          }

          if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
            customer.descricaoStatus = vm.statusType.REFUNDED;
            customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
          }

          if (charge.BoletoId == 0 && charge.PaymentType == 2) {
            if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
              vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
              customer.descricaoStatus = 'INVÁLIDO';
            }

          }
        }

        vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

        if (customer.ChargingValidity[0].Payd == true) {
          vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
        }

        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100);
        customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
        customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.ammoutInt = parseFloat(customer.ammout);
        customer.ammoutIntFormat = customer.ammoutInt.toString().replace('.', ',');
      }
      else {
        customer.status = 'NÃO COBRADO';
        customer.descricaoStatus = vm.statusType.NAO_COBRADO;
        customer.ammoutInt = 0;
        customer.ammoutIntPaid = 0;
      }
    }
    vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

  }

  function loadPaymentHistory() {
    for (var index in vm.customers) {

      FoneclubeService.getChargeAndServiceOrderHistoryDinamic(vm.customers[index].Id, index).then(function (result) {

        if (result.length == 0) {
        }
        else {

          // TODO TEMPORARIO
          var dataCobranca;
          try {

            // dataCobranca = result[0].Charges.PaymentDate.substring(0,10).replace('-','/').replace('-','/');
            dataCobranca = result[0].Charges.CreationDate;
          }
          catch (erro) {

            // dataCobranca = result[0].CreatedDate.substring(0,10).replace('-','/').replace('-','/')
            dataCobranca = result[0].CreatedDate
          }

          var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mes = dataConvertida.substring(5, 7);
          var ano = dataConvertida.substring(0, 4);

          var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mesSelecionado = selecionado.substring(5, 7);
          var anoSelecionado = selecionado.substring(0, 4);

          if (mesSelecionado == mes && anoSelecionado == ano) {
            vm.customers[result.indexLista].dataIgual = true;
          }

          vm.customers[result.indexLista].chargingDate = dataConvertida;
          vm.customers[result.indexLista].chargingDateDiffDays = diffDays(dataConvertida);
          vm.customers[result.indexLista].LastPaidDateDiffDays = diffDays(vm.customers[result.indexLista].LastPaidDate);
        }
      });
    }
    for (var index in vm.customers) {
      if (vm.customers[index].chargingDate == undefined || vm.customers[index].chargingDate == null) {
        vm.customers[index].chargingDate = new Date('2000/01/01').toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        vm.customers[index].chargingDateDiffDays = diffDays(vm.customers[index].chargingDate);
      }
    }

  }



  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
  var secondDate = new Date();

  function diffDays(date) {
    var firstDate = new Date(date);
    return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
  }




  vm.onDesativarBoleto = onDesativarBoleto;
  vm.onAtivarBoleto = onAtivarBoleto;

  function onDesativarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, true)
            .then(function (value) {
              if (value) {
                charge.Canceled = true;
              }
            })
        }
      })
  }

  function onAtivarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, false)
            .then(function (value) {
              if (value) {
                charge.Canceled = false;
              }
            })
        }
      })
  }
};


statusChangingController2.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

(function () {
    'use strict';
  
    angular
      .module('foneClub')
      .component('foneHeader', {
        templateUrl: '../components/header-page/header-page.html',
        bindings: {
          title: "@"
          },
          controller: headerController,
          controllerAs: 'vm'
      });        
  
    headerController.$inject = ['$rootScope'];
  
    function headerController($rootScope) {
      var vm = this;      
      vm.clickMenuHamburguer = function() {
        $rootScope.$broadcast('menu-hamburguer');
      }
    }

  })();
  
(function () {

  'use strict';

  angular
    .module('foneClub')
    .service('MainComponents', MainComponents);

  MainComponents.$inject = ['$q', '$sce', '$ionicPopup', '$timeout', '$ionicLoading', '$cordovaNetwork', '$ionicBackdrop', '$ionicBody'];

  function MainComponents($q, $sce, $ionicPopup, $timeout, $ionicLoading, $cordovaNetwork, $ionicBackdrop, $ionicBody) {

    /* fields */
    var vm = this;
    vm.getVersion = getVersion;
    vm.alert = alert;
    vm.show = show;
    vm.showSimpleToast = showSimpleToast;
    vm.infoAlert = infoAlert;
    vm.showLoader = showLoader;
    vm.hideLoader = hideLoader;

    var releaseMode = true;
    var version = '1.6.0';

    setFavicon();

    function getVersion(){
      return version;
    }

    function setFavicon(){
      var link = document.querySelector("link[rel*='icon']") || document.createElement('link');
      link.type = 'image/x-icon';
      link.rel = 'shortcut icon';
      if(releaseMode){
        link.href = 'content/favicon/favicon-32x32.png'
      }
      else{
        link.href = 'content/favicon/homol/favicon-32x32.png'
      }

      document.getElementsByTagName('head')[0].appendChild(link);
    }

    function alert(params){

      if(!params.titulo)
        params.titulo = 'Aviso';

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: params.titulo
      };

      return $ionicPopup.alert(infoParams).then(function (answer) {
        return answer;
      });

    }

    function show(params){
      closeAllPopups();
      return $ionicPopup.show(params);
    }

    function showLoader(mensagem){
      $ionicLoading.show({
                template: mensagem
      });
    }

    function hideLoader(){
      $ionicLoading.hide();
    }

    function infoAlert(params) {

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: 'Info',
        cancelText: 'Cancelar'
      };

      return $ionicPopup.confirm(infoParams).then(function (answer) {
        return answer;
      });
    }

    function showLoading() {
      $ionicLoading.show({
        template: '<ion-spinner icon="bubbles" class="spinner-calm"></ion-spinner>'
      });
    }

    function hideLoading() {
      $ionicLoading.hide();
    }

    function isOnline() {
      if (window.cordova && window.cordova.plugins && navigator && navigator.connection && navigator.connection.type) {
          return (window.cordova && $cordovaNetwork.isOnline()) || (navigator.onLine);
      }else{
          return navigator.onLine;
      }
    }

    function showSimpleToast(toastMsg, title) {
      return $ionicPopup.alert({
        template: toastMsg,
        title: title
      });
    }

    function showConfirm(params) {

      var infoParams = {
        template: params.message || 'Mensagem',
        title: params.title || 'Título',
        cancelText: params.cancelText || 'Cancelar',
        okText: params.okText || 'Confirmar',
        okType: 'button-assertive'
      };

      return $ionicPopup.confirm(infoParams);
    }



    function _noConnectionMessage() {
      return showSimpleToast("Sem conexão com internet", "AVISO");
    }

    function closeAllPopups() {
        var noop = angular.noop;
        var elevated = false;
        var popupStack = $ionicPopup._popupStack;
        if (popupStack.length > 0) {
          popupStack.forEach(function(popup, index) {
            if (popup.isShown === true) {
              popup.remove();
              popupStack.pop();
            }
          });
        }

        $ionicBackdrop.release();
        //Remove popup-open & backdrop if this is last popup
        $timeout(function() {
          // wait to remove this due to a 300ms delay native
          // click which would trigging whatever was underneath this
          $ionicBody.removeClass('popup-open');
          // $ionicPopup._popupStack.pop();
        }, 400, false);
        ($ionicPopup._backButtonActionDone || noop)();
    }

  }
})();

